#!/usr/bin/env python3
"""
H·ªÜ TH·ªêNG KH√ìA B·∫¢O M·∫¨T 4 L·ªöP - GIAO DI·ªÜN TI·∫æNG VI·ªÜT
T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp
Phi√™n b·∫£n: v2.2 - Vietnamese Interface for Students
"""

import cv2
import time
import json
import os
import logging
import threading
import tkinter as tk
from tkinter import ttk, font
from PIL import Image, ImageTk
from datetime import datetime
from typing import Optional, List, Dict, Any
from dataclasses import dataclass
from enum import Enum
import sys
import numpy as np
import asyncio

# Import modules c·ªßa d·ª± √°n (gi·ªØ nguy√™n)
try:
    from improved_face_recognition import ImprovedFaceRecognition, FaceDetectionResult
    from enhanced_components import (
        Colors, EnhancedBuzzerManager, EnhancedNumpadDialog, 
        EnhancedMessageBox, AdminDataManager, ImprovedAdminGUI
    )
    from discord_integration import DiscordSecurityBot
except ImportError as e:
    print(f"‚ùå L·ªói import modules: {e}")
    print("üîß ƒê·∫£m b·∫£o c√°c file sau t·ªìn t·∫°i:")
    print("   - improved_face_recognition.py")
    print("   - enhanced_components.py")
    print("   - discord_integration.py")
    sys.exit(1)

# Hardware imports (gi·ªØ nguy√™n ph·∫ßn n√†y)
try:
    from picamera2 import Picamera2
    from gpiozero import LED, PWMOutputDevice
    from pyfingerprint.pyfingerprint import PyFingerprint
    import board
    import busio
    from adafruit_pn532.i2c import PN532_I2C
except ImportError as e:
    logging.error(f"Kh√¥ng th·ªÉ import th∆∞ vi·ªán ph·∫ßn c·ª©ng: {e}")
    print("‚ö†Ô∏è Hardware import failed - running in simulation mode")
    
    # Mock hardware classes for testing
    class MockPicamera2:
        def configure(self, config): pass
        def start(self): pass
        def stop(self): pass
        def capture_array(self): 
            return np.zeros((600, 800, 3), dtype=np.uint8)
    
    class MockLED:
        def __init__(self, pin): self.state = True
        def on(self): self.state = True
        def off(self): self.state = False
    
    class MockPN532:
        def SAM_configuration(self): pass
        def read_passive_target(self, timeout=1): return None
    
    class MockFingerprint:
        def verifyPassword(self): return True
        def readImage(self): return False
        def convertImage(self, slot): pass
        def searchTemplate(self): return (-1, 0)
        def createTemplate(self): pass
        def storeTemplate(self, pos, slot): pass
        def deleteTemplate(self, pos): pass
        def loadTemplate(self, pos, slot): pass
    
    Picamera2 = MockPicamera2
    LED = MockLED
    
    class MockBoard:
        SCL = None
        SDA = None
    
    class MockBusIO:
        def I2C(self, scl, sda): return None
    
    board = MockBoard()
    busio = MockBusIO()
    PN532_I2C = lambda i2c, debug=False: MockPN532()
    PyFingerprint = lambda *args, **kwargs: MockFingerprint()

# ==== CONFIGURATION - GI·ªÆ NGUY√äN ====
@dataclass
class Config:
    # Paths
    PROJECT_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    MODELS_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/models"
    FACE_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/face_data"
    ADMIN_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    
    # GPIO
    BUZZER_GPIO: int = 17
    RELAY_GPIO: int = 5
    
    # Face Recognition
    FACE_CONFIDENCE_THRESHOLD: float = 0.5
    FACE_RECOGNITION_THRESHOLD: float = 85.0
    FACE_REQUIRED_CONSECUTIVE: int = 5
    FACE_DETECTION_INTERVAL: float = 0.03
    
    # Camera
    CAMERA_WIDTH: int = 800
    CAMERA_HEIGHT: int = 600
    DISPLAY_WIDTH: int = 650
    DISPLAY_HEIGHT: int = 490
    
    # Admin
    ADMIN_UID: List[int] = None
    ADMIN_PASS: str = "0809"
    
    # Timing
    LOCK_OPEN_DURATION: int = 3
    MAX_ATTEMPTS: int = 5
    
    def __post_init__(self):
        if self.ADMIN_UID is None:
            self.ADMIN_UID = [0xe5, 0xa8, 0xbd, 0x2]
        
        for path in [self.MODELS_PATH, self.FACE_DATA_PATH, self.ADMIN_DATA_PATH]:
            os.makedirs(path, exist_ok=True)

class AuthStep(Enum):
    FACE = "face"
    FINGERPRINT = "fingerprint"
    RFID = "rfid"
    PASSCODE = "passcode"
    ADMIN = "admin"

# ==== LOGGING SETUP ====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/home/khoi/Desktop/KHOI_LUANAN/system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==== GIAO DI·ªÜN TI·∫æNG VI·ªÜT CHO SINH VI√äN ====
class VietnameseSecurityGUI:
    def update_fingerprint_status(self, status_type, message, details=""):
        """Smart update cho fingerprint status"""
        colors = {
            "scanning": Colors.PRIMARY,
            "quality_issue": Colors.WARNING, 
            "not_recognized": Colors.ERROR,
            "success": Colors.SUCCESS,
            "timeout": Colors.WARNING,
            "hardware_error": Colors.ERROR
        }
        
        titles = {
            "scanning": "ƒêANG QU√âT V√ÇN TAY",
            "quality_issue": "CH·∫§T L∆Ø·ª¢NG V√ÇN TAY", 
            "not_recognized": "V√ÇN TAY KH√îNG NH·∫¨N DI·ªÜN",
            "success": "V√ÇN TAY TH√ÄNH C√îNG",
            "timeout": "H·∫æT TH·ªúI GIAN QU√âT",
            "hardware_error": "L·ªñI PH·∫¶N C·ª®NG"
        }
        
        # C·∫≠p nh·∫≠t step v·ªõi m√†u s·∫Øc ph√π h·ª£p
        self.gui.update_step(2, titles.get(status_type, "QU√âT V√ÇN TAY"), message, colors.get(status_type, Colors.PRIMARY))
        
        if details:
            self.gui.update_detail(details, colors.get(status_type, Colors.TEXT_SECONDARY))
    def __init__(self, root):
        self.root = root
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.current_fps = 0
        self.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
        
        self._setup_window()
        self._create_widgets()
        self._setup_bindings()
    
    def _setup_window(self):
        self.root.title("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH 4 L·ªöP B·∫¢O M·∫¨T")
        self.root.geometry("1500x900")
        self.root.configure(bg=Colors.DARK_BG)
        self.root.attributes('-fullscreen', True)
        self.root.minsize(1200, 800)
    
    def _create_widgets(self):
        # Container ch√≠nh
        main_container = tk.Frame(self.root, bg=Colors.DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        main_container.grid_columnconfigure(0, weight=2)
        main_container.grid_columnconfigure(1, weight=1)
        main_container.grid_rowconfigure(0, weight=1)
        
        # B√äN TR√ÅI - CAMERA NH·∫¨N DI·ªÜN
        self._create_camera_panel(main_container)
        
        # B√äN PH·∫¢I - TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG
        self._create_status_panel(main_container)
        
        # PH√çA D∆Ø·ªöI - THANH TR·∫†NG TH√ÅI
        self._create_status_bar()
    
    def _create_camera_panel(self, parent):
        camera_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        camera_panel.grid(row=0, column=0, padx=(0,10), pady=0, sticky="nsew")
        
        # Ti√™u ƒë·ªÅ camera
        header = tk.Frame(camera_panel, bg=Colors.PRIMARY, height=100)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        # Ti√™u ƒë·ªÅ ch√≠nh
        header_left = tk.Frame(header, bg=Colors.PRIMARY)
        header_left.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(header_left, text="CAMERA NH·∫¨N DI·ªÜN KHU√îN M·∫∂T",
                font=('Arial', 26, 'bold'), fg='white', bg=Colors.PRIMARY,
                anchor='w').pack(side=tk.LEFT, padx=20, expand=True, fill=tk.X)
        
        # Th√¥ng s·ªë k·ªπ thu·∫≠t
        stats_frame = tk.Frame(header, bg=Colors.PRIMARY)
        stats_frame.pack(side=tk.RIGHT, padx=20)
        
        self.fps_label = tk.Label(stats_frame, text="T·ªëc ƒë·ªô: -- khung/gi√¢y", 
                                 font=('Arial', 16, 'bold'), fg='white', bg=Colors.PRIMARY)
        self.fps_label.pack()
        
        self.detection_count_label = tk.Label(stats_frame, text="Ph√°t hi·ªán: 0", 
                                            font=('Arial', 14), fg='white', bg=Colors.PRIMARY)
        self.detection_count_label.pack()
        
        # M√†n h√¨nh camera
        self.camera_frame = tk.Frame(camera_panel, bg='black', relief=tk.SUNKEN, bd=4)
        self.camera_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        self.camera_label = tk.Label(self.camera_frame, 
                                   text="ƒêang kh·ªüi ƒë·ªông camera nh·∫≠n di·ªán...\n\nƒêang t·∫£i m√¥ h√¨nh nh·∫≠n d·∫°ng...",
                                   font=('Arial', 22), fg='white', bg='black')
        self.camera_label.pack(expand=True)
        
        # Tr·∫°ng th√°i nh·∫≠n di·ªán
        status_frame = tk.Frame(camera_panel, bg=Colors.CARD_BG, height=80)
        status_frame.pack(fill=tk.X, pady=10)
        status_frame.pack_propagate(False)
        
        self.face_status = tk.Label(status_frame, text="H·ªá th·ªëng ƒëang kh·ªüi ƒë·ªông...",
                                   font=('Arial', 18, 'bold'), 
                                   fg=Colors.PRIMARY, bg=Colors.CARD_BG)
        self.face_status.pack(expand=True)
        
        self.detection_info = tk.Label(status_frame, text="Chu·∫©n b·ªã h·ªá th·ªëng nh·∫≠n di·ªán...",
                                      font=('Arial', 16), 
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.detection_info.pack()
    
    def _create_status_panel(self, parent):
        status_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        status_panel.grid(row=0, column=1, padx=(10,0), pady=0, sticky="nsew")
        
        # Ti√™u ƒë·ªÅ tr·∫°ng th√°i
        header = tk.Frame(status_panel, bg=Colors.SUCCESS, height=100)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        tk.Label(header, text="TR·∫†NG TH√ÅI X√ÅC TH·ª∞C",
                font=('Arial', 22, 'bold'), fg='white', bg=Colors.SUCCESS).pack(expand=True)
        
        # B∆∞·ªõc hi·ªán t·∫°i
        self.step_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        self.step_frame.pack(fill=tk.X, padx=25, pady=25)
        
        self.step_number = tk.Label(self.step_frame, text="1", 
                                   font=('Arial', 52, 'bold'),
                                   fg='white', bg=Colors.PRIMARY,
                                   width=2, relief=tk.RAISED, bd=5)
        self.step_number.pack(side=tk.LEFT, padx=(0,25))
        
        step_info = tk.Frame(self.step_frame, bg=Colors.CARD_BG)
        step_info.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.step_title = tk.Label(step_info, text="NH·∫¨N DI·ªÜN KHU√îN M·∫∂T",
                                  font=('Arial', 30, 'bold'),
                                  fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                                  anchor='w')
        self.step_title.pack(fill=tk.X)
        
        self.step_subtitle = tk.Label(step_info, text="H·ªá th·ªëng ƒëang ph√¢n t√≠ch...",
                                     font=('Arial', 20),
                                     fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG,
                                     anchor='w')
        self.step_subtitle.pack(fill=tk.X)
        
        # C√°c b∆∞·ªõc x√°c th·ª±c
        progress_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        progress_frame.pack(fill=tk.X, padx=25, pady=20)
        
        tk.Label(progress_frame, text="C√ÅC B∆Ø·ªöC X√ÅC TH·ª∞C:",
                font=('Arial', 22, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG).pack(anchor='w')
        
        steps_frame = tk.Frame(progress_frame, bg=Colors.CARD_BG)
        steps_frame.pack(fill=tk.X, pady=15)
        
        self.step_indicators = {}
        step_names = [
            "NH·∫¨N DI·ªÜN KHU√îN M·∫∂T", 
            "QU√âT V√ÇN TAY", 
            "QU√ât TH·∫∫ RFID", 
            "NH·∫¨P M·∫¨T KH·∫®U"
        ]
        
        for i, name in enumerate(step_names):
            container = tk.Frame(steps_frame, bg=Colors.CARD_BG)
            container.pack(fill=tk.X, pady=8)
            
            circle = tk.Label(container, text=f"{i+1}",
                             font=('Arial', 22, 'bold'),
                             fg='white', bg=Colors.TEXT_SECONDARY,
                             width=3, relief=tk.RAISED, bd=4)
            circle.pack(side=tk.LEFT, padx=(0,20))
            
            label = tk.Label(container, text=name,
                            font=('Arial', 20, 'bold'),
                            fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                            anchor='w')
            label.pack(side=tk.LEFT, fill=tk.X, expand=True)
            
            self.step_indicators[i+1] = {
                'circle': circle,
                'label': label
            }
        
        # Khu v·ª±c th√¥ng tin chi ti·∫øt
        msg_frame = tk.Frame(status_panel, bg=Colors.BACKGROUND, relief=tk.SUNKEN, bd=4)
        msg_frame.pack(fill=tk.X, padx=25, pady=20)
        
        tk.Label(msg_frame, text="TH√îNG TIN CHI TI·∫æT:",
                font=('Arial', 18, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.BACKGROUND).pack(anchor='w', padx=20, pady=(15,8))
        
        self.detail_message = tk.Label(msg_frame, text="Kh·ªüi ƒë·ªông h·ªá th·ªëng nh·∫≠n di·ªán...\nƒêang t·∫£i d·ªØ li·ªáu m·∫´u...",
                                      font=('Arial', 16),
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.BACKGROUND,
                                      wraplength=450, justify=tk.LEFT, anchor='w')
        self.detail_message.pack(fill=tk.X, padx=20, pady=(0,15))
        
        # Hi·ªÉn th·ªã th·ªùi gian
        self.time_label = tk.Label(status_panel, text="",
                                  font=('Arial', 16),
                                  fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.time_label.pack(side=tk.BOTTOM, pady=10)
        
        self._update_time()
    
    def _create_status_bar(self):
        status_bar = tk.Frame(self.root, bg=Colors.PRIMARY, height=90)
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, padx=20, pady=(0,20))
        status_bar.pack_propagate(False)
        
        self.main_status = tk.Label(status_bar, 
                                   text="H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH - ƒêANG KH·ªûI ƒê·ªòNG...",
                                   font=('Arial', 22, 'bold'),
                                   fg='white', bg=Colors.PRIMARY)
        self.main_status.pack(expand=True)
    
    def _setup_bindings(self):
        self.root.bind('<Key>', self._on_key)
        self.root.bind('<F11>', lambda e: self.root.attributes('-fullscreen', 
                                                              not self.root.attributes('-fullscreen')))
        self.root.focus_set()
    
    def _on_key(self, event):
        key = event.keysym
        if key == 'asterisk' or key == 'KP_Multiply':
            if hasattr(self, 'system_ref'):
                self.system_ref._force_admin_mode()
        elif key == 'numbersign' or key == 'KP_Add':
            if hasattr(self, 'system_ref'):
                self.system_ref.start_authentication()
        elif key == 'Escape':
            if hasattr(self, 'system_ref') and hasattr(self.system_ref, 'buzzer'):
                if EnhancedMessageBox.ask_yesno(self.root, "Tho√°t h·ªá th·ªëng", 
                                            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?", self.system_ref.buzzer):
                    self.root.quit()
    
    def _update_time(self):
        current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        self.time_label.config(text=current_time)
        self.root.after(1000, self._update_time)
    
    def update_camera(self, frame: np.ndarray, detection_result: Optional[FaceDetectionResult] = None):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã camera v·ªõi th√¥ng tin nh·∫≠n di·ªán"""
        try:
            # T√≠nh to√°n FPS
            self.fps_counter += 1
            current_time = time.time()
            if current_time - self.fps_start_time >= 1.0:
                self.current_fps = self.fps_counter
                self.fps_counter = 0
                self.fps_start_time = current_time
                self.fps_label.config(text=f"T·ªëc ƒë·ªô: {self.current_fps} khung/gi√¢y")
            
            # C·∫≠p nh·∫≠t th·ªëng k√™
            if detection_result:
                self.detection_stats["total"] += 1
                if detection_result.recognized:
                    self.detection_stats["recognized"] += 1
                elif detection_result.detected:
                    self.detection_stats["unknown"] += 1
                
                self.detection_count_label.config(
                    text=f"T·ªïng: {self.detection_stats['total']} | ƒê√∫ng: {self.detection_stats['recognized']}"
                )
            
            # Thay ƒë·ªïi k√≠ch th∆∞·ªõc ƒë·ªÉ hi·ªÉn th·ªã
            height, width = frame.shape[:2]
            display_height = Config.DISPLAY_HEIGHT
            display_width = int(width * display_height / height)
            
            img = cv2.resize(frame, (display_width, display_height))
            rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img_pil = Image.fromarray(rgb_img)
            img_tk = ImageTk.PhotoImage(img_pil)
            
            self.camera_label.config(image=img_tk, text="")
            self.camera_label.image = img_tk
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i nh·∫≠n di·ªán
            if detection_result:
                if detection_result.detected:
                    if detection_result.recognized:
                        self.face_status.config(
                            text=f"ƒê√É X√ÅC NH·∫¨N: {detection_result.person_name}",
                            fg=Colors.SUCCESS
                        )
                        self.detection_info.config(
                            text=f"ƒê·ªô ch√≠nh x√°c: {detection_result.confidence:.1f} | Tr·∫°ng th√°i: CHO PH√âP",
                            fg=Colors.SUCCESS
                        )
                    else:
                        self.face_status.config(
                            text="PH√ÅT HI·ªÜN: KHU√îN M·∫∂T KH√îNG ƒê∆Ø·ª¢C PH√âP",
                            fg=Colors.ERROR
                        )
                        self.detection_info.config(
                            text="Ph√°t hi·ªán khu√¥n m·∫∑t nh∆∞ng ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω | T·ª´ ch·ªëi truy c·∫≠p",
                            fg=Colors.ERROR
                        )
                else:
                    self.face_status.config(
                        text="ƒêANG QU√âT: T√¨m ki·∫øm khu√¥n m·∫∑t...",
                        fg=Colors.WARNING
                    )
                    self.detection_info.config(
                        text="H·ªá th·ªëng ƒëang ph√¢n t√≠ch video t·ª´ camera...",
                        fg=Colors.TEXT_SECONDARY
                    )
            
        except Exception as e:
            logger.error(f"L·ªói c·∫≠p nh·∫≠t camera: {e}")
    
    def update_step(self, step_num, title, subtitle, color=None):
        if color is None:
            color = Colors.PRIMARY
            
        self.step_number.config(text=str(step_num), bg=color)
        self.step_title.config(text=title)
        self.step_subtitle.config(text=subtitle)
        
        # C·∫≠p nh·∫≠t c√°c ch·ªâ b√°o ti·∫øn tr√¨nh
        for i in range(1, 5):
            indicator = self.step_indicators[i]
            if i < step_num:
                indicator['circle'].config(bg=Colors.SUCCESS)
                indicator['label'].config(fg=Colors.TEXT_PRIMARY)
            elif i == step_num:
                indicator['circle'].config(bg=color)
                indicator['label'].config(fg=Colors.TEXT_PRIMARY)
            else:
                indicator['circle'].config(bg=Colors.TEXT_SECONDARY)
                indicator['label'].config(fg=Colors.TEXT_SECONDARY)
    
    def update_status(self, message, color=None):
        if color is None:
            color = 'white'
        self.main_status.config(text=message, fg=color)
    
    def update_detail(self, message, color=None):
        if color is None:
            color = Colors.TEXT_SECONDARY
        self.detail_message.config(text=message, fg=color)
    
    def set_system_reference(self, system):
        self.system_ref = system

# ==== H·ªÜ TH·ªêNG B·∫¢O M·∫¨T VI·ªÜT H√ìA ====
class VietnameseSecuritySystem:
    
    def _init_discord_bot(self):
        """Kh·ªüi t·∫°o Discord bot integration"""
        try:
            logger.info("Kh·ªüi t·∫°o Discord bot integration...")
            self.discord_bot = DiscordSecurityBot(self)
            logger.info("Discord bot integration ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o Discord bot: {e}")
            logger.info("Ti·∫øp t·ª•c ch·∫°y m√† kh√¥ng c√≥ Discord bot...")
            self.discord_bot = None
    
    def _send_discord_notification(self, message):
        """Helper function ƒë·ªÉ g·ª≠i Discord notification t·ª´ sync context"""
        try:
            if self.discord_bot and self.discord_bot.bot:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.discord_bot.send_notification(message))
                loop.close()
        except Exception as e:
            logger.error(f"Discord notification error: {e}")       
    
    def __init__(self):
        self.config = Config()
        logger.info("Kh·ªüi t·∫°o H·ªá th·ªëng Kh√≥a C·ª≠a Th√¥ng minh...")
        
        self._init_hardware()
        self._init_components()
        self._init_gui()
        self._init_discord_bot()
        
        self.auth_state = {
            "step": AuthStep.FACE,
            "consecutive_face_ok": 0,
            "fingerprint_attempts": 0,
            "rfid_attempts": 0,
            "pin_attempts": 0
        }

        self.failed_attempts = {
            "face": 0,
            "fingerprint": 0, 
            "rfid": 0,
            "pin": 0,
            "total_today": 0
        }
        
        self.running = True
        self.face_thread = None
        
        logger.info("H·ªá th·ªëng Kh√≥a C·ª≠a Th√¥ng minh kh·ªüi t·∫°o th√†nh c√¥ng!")
    
    def _init_hardware(self):
        """Kh·ªüi t·∫°o ph·∫ßn c·ª©ng"""
        try:
            logger.info("Kh·ªüi t·∫°o ph·∫ßn c·ª©ng...")
            
            # Buzzer
            try:
                self.buzzer = EnhancedBuzzerManager(self.config.BUZZER_GPIO)
            except:
                logger.warning("Buzzer mock mode")
                self.buzzer = type('MockBuzzer', (), {'beep': lambda x, y: None})()
            
            # Camera
            self.picam2 = Picamera2()
            if hasattr(self.picam2, 'configure'):
                self.picam2.configure(self.picam2.create_video_configuration(
                    main={"format": 'XRGB8888', "size": (self.config.CAMERA_WIDTH, self.config.CAMERA_HEIGHT)}
                ))
                self.picam2.start()
                time.sleep(2)
            
            # Relay (Door lock)
            self.relay = LED(self.config.RELAY_GPIO)
            self.relay.on()  # Locked by default
            
            # RFID
            i2c = busio.I2C(board.SCL, board.SDA)
            self.pn532 = PN532_I2C(i2c, debug=False)
            self.pn532.SAM_configuration()
            
            # Fingerprint sensor
            self.fingerprint = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)
            if not self.fingerprint.verifyPassword():
                logger.warning("Fingerprint sensor simulation mode")
            
            logger.info("T·∫•t c·∫£ ph·∫ßn c·ª©ng ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o ph·∫ßn c·ª©ng: {e}")
            logger.info("Continuing in simulation mode...")
    
    def _init_components(self):
        """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn h·ªá th·ªëng"""
        try:
            logger.info("Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn h·ªá th·ªëng...")
            
            # Admin data manager
            self.admin_data = AdminDataManager(self.config.ADMIN_DATA_PATH)
            
            # Face Recognition
            self.face_recognizer = ImprovedFaceRecognition(
                models_path=self.config.MODELS_PATH,
                face_data_path=self.config.FACE_DATA_PATH,
                confidence_threshold=self.config.FACE_CONFIDENCE_THRESHOLD,
                recognition_threshold=self.config.FACE_RECOGNITION_THRESHOLD
            )
            
            logger.info("C√°c th√†nh ph·∫ßn h·ªá th·ªëng ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o th√†nh ph·∫ßn h·ªá th·ªëng: {e}")
            raise
    
    def _init_gui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        try:
            logger.info("Kh·ªüi t·∫°o giao di·ªán...")
            
            self.root = tk.Tk()
            self.gui = VietnameseSecurityGUI(self.root)  # S·ª¨ D·ª§NG GUI VI·ªÜT H√ìA
            self.gui.set_system_reference(self)
            
            # Admin GUI
            self.admin_gui = ImprovedAdminGUI(self.root, self)
            
            logger.info("Giao di·ªán ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o giao di·ªán: {e}")
            raise
    
    def _force_admin_mode(self):
        """Ch·∫ø ƒë·ªô admin nhanh b·∫±ng ph√≠m *"""
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(self.root, "TRUY C·∫¨P QU·∫¢N TR·ªä",
                                    "Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã:", True, self.buzzer)
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            self.gui.update_status("CH·∫æ ƒê·ªò QU·∫¢N TR·ªä ƒê√É K√çCH HO·∫†T", 'lightgreen')
            self.gui.update_detail("X√°c th·ª±c qu·∫£n tr·ªã th√†nh c√¥ng! ƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn...", Colors.SUCCESS)
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
        elif password is not None:
            self.gui.update_status("T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä", 'orange')
            self.gui.update_detail("M·∫≠t kh·∫©u qu·∫£n tr·ªã kh√¥ng ƒë√∫ng!", Colors.ERROR)
            self.buzzer.beep("error")
    
    def start_authentication(self):
        """B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c"""
        logger.info("B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c")
        
        self.auth_state = {
            "step": AuthStep.FACE,
            "consecutive_face_ok": 0,
            "fingerprint_attempts": 0,
            "rfid_attempts": 0,
            "pin_attempts": 0
        }
        
        self.gui.update_step(1, "NH·∫¨N DI·ªÜN KHU√îN M·∫∂T", "H·ªá th·ªëng ƒëang ph√¢n t√≠ch...", Colors.PRIMARY)
        self.gui.update_status("ƒêANG PH√ÇN T√çCH KHU√îN M·∫∂T - VUI L√íNG NH√åN V√ÄO CAMERA", 'white')
        self.gui.update_detail("H·ªá th·ªëng nh·∫≠n di·ªán ƒëang qu√©t v√† ph√¢n t√≠ch khu√¥n m·∫∑t.\nNh√¨n th·∫≥ng v√†o camera v√† gi·ªØ nguy√™n v·ªã tr√≠.", Colors.PRIMARY)
        
        # Reset detection stats
        self.gui.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
        
        if self.face_thread and self.face_thread.is_alive():
            return
        
        self.face_thread = threading.Thread(target=self._face_recognition_loop, daemon=True)
        self.face_thread.start()
    
    def _face_recognition_loop(self):
        """V√≤ng l·∫∑p nh·∫≠n di·ªán khu√¥n m·∫∑t"""
        logger.info("B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p nh·∫≠n di·ªán khu√¥n m·∫∑t")
        consecutive_count = 0
        
        while self.running and self.auth_state["step"] == AuthStep.FACE:
            try:
                # Capture frame
                frame = self.picam2.capture_array()
                if frame is None:
                    continue
                
                # X·ª≠ l√Ω nh·∫≠n di·ªán
                annotated_frame, result = self.face_recognizer.process_frame(frame)
                
                # C·∫≠p nh·∫≠t GUI
                self.root.after(0, lambda: self.gui.update_camera(annotated_frame, result))
                
                if result.recognized:
                    consecutive_count += 1
                    self.auth_state["consecutive_face_ok"] = consecutive_count
                    
                    progress = consecutive_count / self.config.FACE_REQUIRED_CONSECUTIVE * 100
                    msg = f"ƒê√£ x√°c nh·∫≠n ({consecutive_count}/{self.config.FACE_REQUIRED_CONSECUTIVE}) - {progress:.0f}%"
                    
                    self.root.after(0, lambda: self.gui.update_step(1, "NH·∫¨N DI·ªÜN TH√ÄNH C√îNG", msg, Colors.SUCCESS))
                    self.root.after(0, lambda: self.gui.update_detail(
                        f"Danh t√≠nh: {result.person_name}\n"
                        f"ƒêang x√°c minh... c√≤n {self.config.FACE_REQUIRED_CONSECUTIVE - consecutive_count} l·∫ßn x√°c nh·∫≠n\n"
                        f"ƒê·ªô ch√≠nh x√°c: {result.confidence:.1f}/100", 
                        Colors.SUCCESS))
                    
                    if consecutive_count >= self.config.FACE_REQUIRED_CONSECUTIVE:
                        logger.info(f"Nh·∫≠n di·ªán khu√¥n m·∫∑t th√†nh c√¥ng: {result.person_name}")
                        self.buzzer.beep("success")
                        self.root.after(0, lambda: self.gui.update_status(f"ƒê√É X√ÅC NH·∫¨N KHU√îN M·∫∂T: {result.person_name.upper()}!", 'lightgreen'))
                        self.root.after(1500, self._proceed_to_fingerprint)
                        break
                        
                elif result.detected:
                    consecutive_count = 0
                    self.auth_state["consecutive_face_ok"] = 0
                    self.root.after(0, lambda: self.gui.update_step(1, "PH√ÅT HI·ªÜN KHU√îN M·∫∂T", "Khu√¥n m·∫∑t ch∆∞a ƒëƒÉng k√Ω", Colors.WARNING))
                    self.root.after(0, lambda: self.gui.update_detail(
                        "H·ªá th·ªëng ph√°t hi·ªán khu√¥n m·∫∑t nh∆∞ng ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu.\n"
                        f"ƒê·ªô ch√≠nh x√°c ph√°t hi·ªán: {result.confidence:.1f}\n"
                        "Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng.", 
                        Colors.WARNING))
                else:
                    consecutive_count = 0
                    self.auth_state["consecutive_face_ok"] = 0
                    self.root.after(0, lambda: self.gui.update_step(1, "ƒêANG QU√âT", "T√¨m ki·∫øm khu√¥n m·∫∑t...", Colors.PRIMARY))
                
                time.sleep(self.config.FACE_DETECTION_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói v√≤ng l·∫∑p nh·∫≠n di·ªán khu√¥n m·∫∑t: {e}")
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªói h·ªá th·ªëng: {str(e)}", Colors.ERROR))
                time.sleep(1)
    
    def _proceed_to_fingerprint(self):
        """Chuy·ªÉn sang b∆∞·ªõc qu√©t v√¢n tay"""
        logger.info("Chuy·ªÉn sang x√°c th·ª±c v√¢n tay")
        self.auth_state["step"] = AuthStep.FINGERPRINT
        self.auth_state["fingerprint_attempts"] = 0
        
        self.gui.update_step(2, "QU√âT V√ÇN TAY", "ƒê·∫∑t ng√≥n tay l√™n c·∫£m bi·∫øn", Colors.WARNING)
        self.gui.update_status("ƒêANG CH·ªú QU√âT V√ÇN TAY...", 'yellow')
        self.gui.update_detail("Vui l√≤ng ƒë·∫∑t ng√≥n tay ƒë√£ ƒëƒÉng k√Ω l√™n c·∫£m bi·∫øn sinh tr·∫Øc h·ªçc.\nC·∫£m bi·∫øn ƒë√£ s·∫µn s√†ng ƒë·ªÉ qu√©t.", Colors.WARNING)
        
        threading.Thread(target=self._fingerprint_loop, daemon=True).start()
    
    def _fingerprint_loop(self):
        """FIXED: Fingerprint loop v·ªõi smart error handling"""
        while (self.auth_state["fingerprint_attempts"] < self.config.MAX_ATTEMPTS and 
            self.auth_state["step"] == AuthStep.FINGERPRINT):
            
            try:
                self.auth_state["fingerprint_attempts"] += 1
                attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state['fingerprint_attempts']}/{self.config.MAX_ATTEMPTS}"
                
                self.root.after(0, lambda: self.gui.update_step(2, "QU√âT V√ÇN TAY", attempt_msg, Colors.WARNING))
                
                timeout = 10
                start_time = time.time()
                scan_success = False
                image_read_attempts = 0  # ƒê·∫æM S·ªê L·∫¶N ƒê·ªåC ·∫¢NH
                
                while time.time() - start_time < timeout:
                    try:
                        if self.fingerprint.readImage():
                            image_read_attempts += 1
                            
                            # SMART: Th·ª≠ convert image
                            try:
                                self.fingerprint.convertImage(0x01)
                                result = self.fingerprint.searchTemplate()
                                
                                if result[0] != -1:
                                    # SUCCESS
                                    logger.info(f"Fingerprint verified: ID {result[0]}")
                                    self.buzzer.beep("success")
                                    self.root.after(0, lambda: self.gui.update_status("V√ÇN TAY ƒê√É X√ÅC TH·ª§C! CHUY·ªÇN ƒê·∫æN TH·∫∫ T·ª™...", 'lightgreen'))
                                    self.root.after(1500, self._proceed_to_rfid)
                                    return
                                else:
                                    # Template not found - TH·∫¨T S·ª∞ TH·∫§T B·∫†I
                                    logger.warning(f"Fingerprint not recognized: attempt {self.auth_state['fingerprint_attempts']}")
                                    
                                    # CH·ªà G·ª¨I DISCORD ALERT KHI TH·∫¨T S·ª∞ TH·∫§T B·∫†I
                                    details = f"Template not found | Sensor reading: {result[1]} | Scanned successfully but not recognized"
                                    self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                                    
                                    self.buzzer.beep("error")
                                    remaining = self.config.MAX_ATTEMPTS - self.auth_state["fingerprint_attempts"]
                                    if remaining > 0:
                                        self.root.after(0, lambda: self.gui.update_detail(
                                            f"V√¢n tay kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!\nC√≤n {remaining} l·∫ßn th·ª≠\nVui l√≤ng th·ª≠ l·∫°i v·ªõi ng√≥n tay ƒë√£ ƒëƒÉng k√Ω.", Colors.ERROR))
                                        time.sleep(2)
                                        scan_success = True  # MARK AS SUCCESSFUL SCAN
                                        break
                                    
                            except Exception as convert_error:
                                # CONVERT ERROR - KH√îNG PH·∫¢I L·ªñI TH·∫¨T S·ª∞
                                error_msg = str(convert_error)
                                
                                # SMART: Ph√¢n bi·ªát lo·∫°i l·ªói
                                if "too few feature points" in error_msg.lower():
                                    # L·ªñI N√ÄY TH∆Ø·ªúNG L√Ä FALSE ALARM
                                    logger.debug(f"Fingerprint quality issue (attempt {image_read_attempts}): {error_msg}")
                                    
                                    # N·∫æU ƒê√É TH·ª¨ NHI·ªÄU L·∫¶N M√Ä V·∫™N L·ªñI N√ÄY -> SKIP
                                    if image_read_attempts >= 3:
                                        logger.info(f"Skipping quality error after {image_read_attempts} attempts")
                                        continue
                                    
                                    # KH√îNG G·ª¨I DISCORD ALERT CHO LO·∫†I L·ªñI N√ÄY
                                    self.root.after(0, lambda: self.gui.update_detail(
                                        f"Ch·∫•t l∆∞·ª£ng v√¢n tay ch∆∞a ƒë·ªß t·ªët...\nVui l√≤ng ƒë·∫∑t ng√≥n tay ch·∫Øc ch·∫Øn h∆°n.", Colors.WARNING))
                                    time.sleep(0.5)
                                    continue
                                else:
                                    # L·ªñI TH·∫¨T S·ª∞ KH√ÅC
                                    logger.error(f"Real fingerprint error: {error_msg}")
                                    details = f"Hardware/processing error: {error_msg}"
                                    self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                                    
                                    self.root.after(0, lambda: self.gui.update_detail(f"L·ªói c·∫£m bi·∫øn: {error_msg}", Colors.ERROR))
                                    time.sleep(1)
                                    break
                        
                        time.sleep(0.1)
                        
                    except Exception as read_error:
                        # L·ªñI ƒê·ªåC SENSOR
                        logger.error(f"Fingerprint read error: {read_error}")
                        break
                
                # CHECK TIMEOUT
                if time.time() - start_time >= timeout and not scan_success:
                    # TIMEOUT - G·ª¨I DISCORD ALERT
                    details = f"Scan timeout - no valid finger detected ({timeout}s) | Read attempts: {image_read_attempts}"
                    logger.warning(f"Fingerprint timeout: attempt {self.auth_state['fingerprint_attempts']}")
                    
                    self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state["fingerprint_attempts"]
                    if remaining > 0:
                        self.root.after(0, lambda: self.gui.update_detail(
                            f"H·∫øt th·ªùi gian qu√©t!\nC√≤n {remaining} l·∫ßn th·ª≠\nVui l√≤ng ƒë·∫∑t ng√≥n tay ƒë√∫ng c√°ch l√™n c·∫£m bi·∫øn.", Colors.WARNING))
                        time.sleep(1)
                        
            except Exception as e:
                # L·ªñI T·ªîNG QU√ÅT
                details = f"General hardware error: {str(e)}"
                logger.error(f"Fingerprint general error: {e}")
                
                self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªói c·∫£m bi·∫øn: {str(e)}", Colors.ERROR))
                time.sleep(1)
        
        # OUT OF ATTEMPTS
        if self.auth_state["fingerprint_attempts"] >= self.config.MAX_ATTEMPTS:
            details = f"Maximum fingerprint attempts exceeded ({self.config.MAX_ATTEMPTS}) | Real failures only"
            logger.critical(f"Fingerprint max attempts exceeded: {self.auth_state['fingerprint_attempts']}")
            
            self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
        
        logger.warning("Fingerprint: Maximum attempts exceeded")
        self.root.after(0, lambda: self.gui.update_status("V√ÇN TAY TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange'))
        self.buzzer.beep("error")
        self.root.after(3000, self.start_authentication)
    
    def _proceed_to_rfid(self):
        """Chuy·ªÉn sang b∆∞·ªõc qu√©t th·∫ª RFID"""
        logger.info("Chuy·ªÉn sang x√°c th·ª±c th·∫ª RFID")
        self.auth_state["step"] = AuthStep.RFID
        self.auth_state["rfid_attempts"] = 0
        
        self.gui.update_step(3, "QU√âT TH·∫∫ RFID", "ƒê∆∞a th·∫ª l·∫°i g·∫ßn ƒë·∫ßu ƒë·ªçc", Colors.ACCENT)
        self.gui.update_status("ƒêANG CH·ªú TH·∫∫ RFID...", 'lightblue')
        self.gui.update_detail("Vui l√≤ng ƒë∆∞a th·∫ª RFID l·∫°i g·∫ßn ƒë·∫ßu ƒë·ªçc.\nƒê·∫ßu ƒë·ªçc ƒëang ho·∫°t ƒë·ªông v√† qu√©t th·∫ª.", Colors.ACCENT)
        
        threading.Thread(target=self._rfid_loop, daemon=True).start()
    
    def _rfid_loop(self):
        """V√≤ng l·∫∑p x√°c th·ª±c th·∫ª RFID"""
        while (self.auth_state["rfid_attempts"] < self.config.MAX_ATTEMPTS and 
            self.auth_state["step"] == AuthStep.RFID):
            
            try:
                self.auth_state["rfid_attempts"] += 1
                attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state['rfid_attempts']}/{self.config.MAX_ATTEMPTS}"
                
                # C·∫≠p nh·∫≠t GUI
                self.root.after(0, lambda: self.gui.update_step(3, "QU√âT TH·∫∫ T·ª™", attempt_msg, Colors.ACCENT))
                self.root.after(0, lambda: self.gui.update_detail(
                    f"ƒêang qu√©t th·∫ª t·ª´... (L·∫ßn th·ª≠ {self.auth_state['rfid_attempts']}/{self.config.MAX_ATTEMPTS})\n"
                    "Gi·ªØ th·∫ª trong kho·∫£ng 2-5cm t·ª´ ƒë·∫ßu ƒë·ªçc.", 
                    Colors.ACCENT))
                
                # Qu√©t th·∫ª t·ª´
                uid = self.pn532.read_passive_target(timeout=8)
                
                if uid:
                    uid_list = list(uid)
                    logger.info(f"Ph√°t hi·ªán th·∫ª t·ª´: {uid_list}")
                    
                    # Ki·ªÉm tra th·∫ª admin
                    if uid_list == self.config.ADMIN_UID:
                        self.root.after(0, lambda: self._admin_authentication())
                        return
                    
                    # Ki·ªÉm tra th·∫ª th√¥ng th∆∞·ªùng
                    valid_uids = self.admin_data.get_rfid_uids()
                    if uid_list in valid_uids:
                        # TH√ÄNH C√îNG
                        logger.info(f"Th·∫ª t·ª´ ƒë∆∞·ª£c x√°c th·ª±c: {uid_list}")
                        self.buzzer.beep("success")
                        self.root.after(0, lambda: self.gui.update_status("TH·∫∫ T·ª™ ƒê√É X√ÅC TH·ª§C! NH·∫¨P M·∫¨T KH·∫®U...", 'lightgreen'))
                        self.root.after(0, lambda: self.gui.update_detail(f"X√°c th·ª±c th·∫ª t·ª´ th√†nh c√¥ng!\nM√£ th·∫ª: {uid_list}\nChuy·ªÉn ƒë·∫øn b∆∞·ªõc nh·∫≠p m·∫≠t kh·∫©u cu·ªëi c√πng.", Colors.SUCCESS))
                        self.root.after(1500, self._proceed_to_passcode)
                        return
                    else:
                        # TH·∫§T B·∫†I - Th·∫ª kh√¥ng ƒë∆∞·ª£c ph√©p
                        details = f"Th·∫ª kh√¥ng ƒë∆∞·ª£c ph√©p | UID: {uid_list} | Kh√¥ng c√≥ trong c∆° s·ªü d·ªØ li·ªáu"
                        logger.warning(f"Th·∫ª t·ª´ kh√¥ng ƒë∆∞·ª£c ph√©p: {uid_list}")
                        
                        self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                        
                        self.buzzer.beep("error")
                        remaining = self.config.MAX_ATTEMPTS - self.auth_state["rfid_attempts"]
                        
                        error_msg = f"TH·∫∫ T·ª™ KH√îNG ƒê∆Ø·ª¢C PH√âP!\n"
                        error_msg += f"M√£ th·∫ª ph√°t hi·ªán: {uid_list}\n"
                        error_msg += f"Th·∫ª ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng\n"
                        error_msg += f"C√≤n {remaining} l·∫ßn th·ª≠" if remaining > 0 else "H·∫øt l·∫ßn th·ª≠"
                        
                        self.root.after(0, lambda: self.gui.update_detail(error_msg, Colors.ERROR))
                        
                        if remaining > 0:
                            time.sleep(3)
                        else:
                            break
                else:
                    # TH·∫§T B·∫†I - Kh√¥ng ph√°t hi·ªán th·∫ª
                    details = f"Kh√¥ng ph√°t hi·ªán th·∫ª t·ª´ trong th·ªùi gian ch·ªù ({8}s)"
                    logger.warning(f"H·∫øt th·ªùi gian th·∫ª t·ª´: l·∫ßn th·ª≠ {self.auth_state['rfid_attempts']}")
                    
                    self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state["rfid_attempts"]
                    
                    timeout_msg = f"KH√îNG PH√ÅT HI·ªÜN TH·∫∫!\n"
                    timeout_msg += f"H·∫øt th·ªùi gian qu√©t sau {8} gi√¢y\n"
                    timeout_msg += f"Vui l√≤ng ƒë∆∞a th·∫ª g·∫ßn ƒë·∫ßu ƒë·ªçc h∆°n\n"
                    timeout_msg += f"C√≤n {remaining} l·∫ßn th·ª≠" if remaining > 0 else "H·∫øt l·∫ßn th·ª≠"
                    
                    self.root.after(0, lambda: self.gui.update_detail(timeout_msg, Colors.WARNING))
                    
                    if remaining > 0:
                        time.sleep(2)
                    else:
                        break
                    
            except Exception as e:
                # L·ªñI PH·∫¶N C·ª®NG
                details = f"L·ªói ph·∫ßn c·ª©ng ƒë·∫ßu ƒë·ªçc th·∫ª t·ª´: {str(e)}"
                logger.error(f"L·ªói th·∫ª t·ª´: {e}")
                
                self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªñI ƒê·∫¶U ƒê·ªåC TH·∫∫ T·ª™!\n{str(e)}\nVui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng", Colors.ERROR))
                time.sleep(2)
        
        # H·∫æT S·ªê L·∫¶N TH·ª¨
        if self.auth_state["rfid_attempts"] >= self.config.MAX_ATTEMPTS:
            details = f"ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ th·∫ª t·ª´ t·ªëi ƒëa ({self.config.MAX_ATTEMPTS}) | C√≥ th·ªÉ c√≥ h√†nh vi x√¢m nh·∫≠p"
            logger.critical(f"Th·∫ª t·ª´ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠: {self.auth_state['rfid_attempts']}")
            
            self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
        
        logger.warning("Th·∫ª t·ª´: ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa - Kh·ªüi ƒë·ªông l·∫°i x√°c th·ª±c")
        self.root.after(0, lambda: self.gui.update_status("TH·∫∫ T·ª™ TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange'))
        self.root.after(0, lambda: self.gui.update_detail(
            "X√ÅC TH·ª∞C TH·∫∫ T·ª™ TH·∫§T B·∫†I!\n"
            f"ƒê√£ h·∫øt t·∫•t c·∫£ {self.config.MAX_ATTEMPTS} l·∫ßn th·ª≠\n"
            "ƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\n"
            "S·ª± ki·ªán b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ghi l·∫°i", Colors.ERROR))
        self.buzzer.beep("error")
        self.root.after(4000, self.start_authentication)
    
    def _proceed_to_passcode(self):
        """Chuy·ªÉn sang b∆∞·ªõc cu·ªëi - nh·∫≠p m·∫≠t kh·∫©u"""
        logger.info("Chuy·ªÉn ƒë·∫øn b∆∞·ªõc x√°c th·ª±c m·∫≠t kh·∫©u cu·ªëi c√πng")
        self.auth_state["step"] = AuthStep.PASSCODE
        self.auth_state["pin_attempts"] = 0
        
        # Discord notification v·ªÅ b∆∞·ªõc cu·ªëi
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("B∆Ø·ªöC X√ÅC TH·ª∞C CU·ªêI C√ôNG\nƒêang chuy·ªÉn ƒë·∫øn nh·∫≠p m·∫≠t kh·∫©u\nNg∆∞·ªùi d√πng ƒë√£ v∆∞·ª£t qua 3/4 l·ªõp b·∫£o m·∫≠t",),
                daemon=True
            ).start()
        
        self.gui.update_step(4, "NH·∫¨P M·∫¨T KH·∫®U CU·ªêI", "Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng", Colors.SUCCESS)
        self.gui.update_status("NH·∫¨P M·∫¨T KH·∫®U CU·ªêI C√ôNG...", 'lightgreen')
        self.gui.update_detail(
            "B∆Ø·ªöC X√ÅC TH·ª∞C CU·ªêI C√ôNG\n"
            "‚úÖ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n"
            "‚úÖ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n" 
            "‚úÖ Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\n"
            "üîÑ M·∫≠t kh·∫©u: ƒêANG CH·ªú\n\n"
            "Nh·∫≠p m·∫≠t kh·∫©u s·ªë ƒë·ªÉ ho√†n t·∫•t x√°c th·ª±c.", 
            Colors.SUCCESS)
        
        self._request_passcode()

    def _request_passcode(self):
        """Nh·∫≠p m·∫≠t kh·∫©u"""
        
        # Ki·ªÉm tra s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa
        if self.auth_state["pin_attempts"] >= self.config.MAX_ATTEMPTS:
            # G·ª≠i c·∫£nh b√°o nghi√™m tr·ªçng cu·ªëi c√πng
            details = f"ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ m·∫≠t kh·∫©u t·ªëi ƒëa ({self.config.MAX_ATTEMPTS}) | B∆∞·ªõc x√°c th·ª±c cu·ªëi c√πng th·∫•t b·∫°i"
            logger.critical(f"M·∫≠t kh·∫©u v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠: {self.auth_state['pin_attempts']}")
            
            self._send_discord_failure_alert("passcode", self.auth_state['pin_attempts'], details)
            
            logger.warning("M·∫≠t kh·∫©u: ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa")
            self.gui.update_status("M·∫¨T KH·∫®U TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I", 'orange')
            self.gui.update_detail(
                "X√ÅC TH·ª∞C M·∫¨T KH·∫®U TH·∫§T B·∫†I!\n"
                f"ƒê√£ h·∫øt t·∫•t c·∫£ {self.config.MAX_ATTEMPTS} l·∫ßn th·ª≠\n"
                "Ng∆∞·ªùi d√πng ƒë√£ v∆∞·ª£t qua t·∫•t c·∫£ l·ªõp b·∫£o m·∫≠t kh√°c\n"
                "ƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\n"
                "S·ª± ki·ªán b·∫£o m·∫≠t nghi√™m tr·ªçng ƒë√£ ƒë∆∞·ª£c ghi l·∫°i", Colors.ERROR)
            self.buzzer.beep("error")
            self.root.after(4000, self.start_authentication)
            return
        
        # TƒÉng b·ªô ƒë·∫øm l·∫ßn th·ª≠
        self.auth_state["pin_attempts"] += 1
        attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS}"
        
        # C·∫≠p nh·∫≠t GUI
        self.gui.update_step(4, "NH·∫¨P M·∫¨T KH·∫®U", attempt_msg, Colors.SUCCESS)
        self.gui.update_detail(
            f"Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng... (L·∫ßn th·ª≠ {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS})\n"
            "‚úÖ C√°c b∆∞·ªõc tr∆∞·ªõc ƒë√£ ho√†n th√†nh th√†nh c√¥ng\n"
            "üéØ S·ª≠ d·ª•ng b√†n ph√≠m s·ªë ƒë·ªÉ nh·∫≠p m√£\n"
            "‚ö†Ô∏è ƒê√¢y l√† b∆∞·ªõc x√°c th·ª±c cu·ªëi c√πng", Colors.SUCCESS)
        
        # FORCE FOCUS
        self.root.focus_force()
        self.root.update()
        
        # Hi·ªÉn th·ªã dialog
        dialog = EnhancedNumpadDialog(
            self.root, 
            "X√ÅC TH·ª∞C CU·ªêI C√ôNG",
            f"Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng (L·∫ßn th·ª≠ {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS}):", 
            True, 
            self.buzzer
        )
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        # L·∫•y input
        entered_pin = dialog.show()
        
        if entered_pin is None:
            # Ng∆∞·ªùi d√πng h·ªßy
            logger.info("Nh·∫≠p m·∫≠t kh·∫©u b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng")
            self.gui.update_detail("‚ùå Vi·ªác nh·∫≠p m·∫≠t kh·∫©u ƒë√£ b·ªã h·ªßy\nüîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i x√°c th·ª±c...", Colors.WARNING)
            self.buzzer.beep("click")
            self.root.after(2000, self.start_authentication)
            return
        
        # X√°c th·ª±c m·∫≠t kh·∫©u
        correct_passcode = self.admin_data.get_passcode()
        
        if entered_pin == correct_passcode:
            # TH√ÄNH C√îNG
            logger.info("‚úÖ M·∫≠t kh·∫©u ƒë√£ x√°c th·ª±c - HO√ÄN T·∫§T T·∫§T C·∫¢ X√ÅC TH·ª∞C!")
            self.gui.update_status("X√ÅC TH·ª∞C HO√ÄN T·∫§T! ƒêANG M·ªû KH√ìA C·ª¨A...", 'lightgreen')
            self.gui.update_detail(
                "üéâ X√ÅC TH·ª∞C TH√ÄNH C√îNG!\n"
                "‚úÖ T·∫•t c·∫£ 4 l·ªõp b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c x√°c minh:\n"
                "  üë§ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n"
                "  üëÜ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n"
                "  üì± Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\n"
                "  üîë M·∫≠t kh·∫©u: TH√ÄNH C√îNG\n\n"
                "üîì ƒêang m·ªü kh√≥a c·ª≠a...", Colors.SUCCESS)
            self.buzzer.beep("success")
            
            # G·ª≠i th√¥ng b√°o th√†nh c√¥ng ƒë·∫øn Discord
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üîì **X√ÅC TH·ª∞C HO√ÄN T·∫§T** - T·∫•t c·∫£ 4 l·ªõp ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng!",),
                    daemon=True
                ).start()
            
            self._unlock_door()
            
        else:
            # TH·∫§T B·∫†I - M·∫≠t kh·∫©u sai
            remaining = self.config.MAX_ATTEMPTS - self.auth_state["pin_attempts"]
            
            details = f"M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng | ƒê·ªô d√†i mong ƒë·ª£i: {len(correct_passcode)}, Nh·∫≠n ƒë∆∞·ª£c: {len(entered_pin)} | Ng∆∞·ªùi d√πng ƒë√£ ƒë·∫øn b∆∞·ªõc cu·ªëi"
            logger.warning(f"M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng: l·∫ßn th·ª≠ {self.auth_state['pin_attempts']}")
            
            self._send_discord_failure_alert("passcode", self.auth_state['pin_attempts'], details)
            
            self.buzzer.beep("error")
            
            if remaining > 0:
                # V·∫´n c√≤n l·∫ßn th·ª≠
                error_msg = f"M·∫¨T KH·∫®U KH√îNG ƒê√öNG!\n"
                error_msg += f"üî¢ M·∫≠t kh·∫©u kh√¥ng kh·ªõp v·ªõi h·ªì s∆° h·ªá th·ªëng\n"
                error_msg += f"üîÑ C√≤n {remaining} l·∫ßn th·ª≠\n"
                error_msg += f"‚ö†Ô∏è Vui l√≤ng x√°c minh m·∫≠t kh·∫©u v√† th·ª≠ l·∫°i\n"
                error_msg += f"üõ°Ô∏è L·∫ßn th·ª≠ n√†y ƒë√£ ƒë∆∞·ª£c ghi l·∫°i"
                
                self.gui.update_detail(error_msg, Colors.ERROR)
                self.root.after(2500, self._request_passcode)
            else:
                # H·∫øt l·∫ßn th·ª≠
                final_error_msg = f"üö´ X√ÅC TH·ª∞C M·∫¨T KH·∫®U TH·∫§T B·∫†I!\n"
                final_error_msg += f"‚ùå ƒê√£ h·∫øt t·∫•t c·∫£ {self.config.MAX_ATTEMPTS} l·∫ßn th·ª≠\n"
                final_error_msg += f"‚ö†Ô∏è Ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh 3/4 l·ªõp b·∫£o m·∫≠t nh∆∞ng th·∫•t b·∫°i ·ªü b∆∞·ªõc cu·ªëi\n"
                final_error_msg += f"üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\n"
                final_error_msg += f"üõ°Ô∏è Vi ph·∫°m b·∫£o m·∫≠t nghi√™m tr·ªçng ƒë√£ ƒë∆∞·ª£c ghi l·∫°i"
                
                self.gui.update_status("M·∫¨T KH·∫®U TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange')
                self.gui.update_detail(final_error_msg, Colors.ERROR)
                self.root.after(4000, self.start_authentication)

    def _admin_authentication(self):
        """X√°c th·ª±c qu·∫£n tr·ªã n√¢ng cao qua th·∫ª t·ª´"""
        # Discord notification v·ªÅ vi·ªác truy c·∫≠p admin
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("üîß **PH√ÅT HI·ªÜN TH·∫∫ QU·∫¢N TR·ªä**\nTh·∫ª qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c qu√©t - y√™u c·∫ßu x√°c th·ª±c m·∫≠t kh·∫©u",),
                daemon=True
            ).start()
        
        # FORCE FOCUS TR∆Ø·ªöC KHI M·ªû DIALOG
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(
            self.root, 
            "üîß TRUY C·∫¨P QU·∫¢N TR·ªä VIA TH·∫∫ T·ª™",
            "ƒê√£ ph√°t hi·ªán th·∫ª qu·∫£n tr·ªã. Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã:", 
            True, 
            self.buzzer
        )
        
        # FORCE FOCUS CHO DIALOG
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            # X√°c th·ª±c qu·∫£n tr·ªã th√†nh c√¥ng
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(f"‚úÖ **C·∫§P QUY·ªÄN TRUY C·∫¨P QU·∫¢N TR·ªä**\nQu·∫£n tr·ªã vi√™n ƒë√£ x√°c th·ª±c th√†nh c√¥ng qua th·∫ª t·ª´ + m·∫≠t kh·∫©u\nƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã...",),
                    daemon=True
                ).start()
            
            logger.info("‚úÖ X√°c th·ª±c qu·∫£n tr·ªã qua th·∫ª t·ª´ th√†nh c√¥ng")
            self.gui.update_status("TH·∫∫ QU·∫¢N TR·ªä ƒê√É X√ÅC TH·ª∞C! ƒêANG M·ªû B·∫¢NG ƒêI·ªÄU KHI·ªÇN", 'lightgreen')
            self.gui.update_detail(
                "üîß X√ÅC TH·ª∞C QU·∫¢N TR·ªä TH√ÄNH C√îNG!\n"
                "‚úÖ Th·∫ª t·ª´ qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\n"
                "‚úÖ M·∫≠t kh·∫©u qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\n"
                "üéõÔ∏è ƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã...", Colors.SUCCESS)
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
            
        elif password is not None:
            # M·∫≠t kh·∫©u qu·∫£n tr·ªã sai
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("‚ùå **T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä**\nTh·∫ª qu·∫£n tr·ªã ƒë√∫ng nh∆∞ng m·∫≠t kh·∫©u sai\n‚ö†Ô∏è C√≥ th·ªÉ c√≥ h√†nh vi truy c·∫≠p tr√°i ph√©p",),
                    daemon=True
                ).start()
            
            logger.warning("‚ùå Ph√°t hi·ªán th·∫ª qu·∫£n tr·ªã nh∆∞ng m·∫≠t kh·∫©u sai")
            self.gui.update_status("M·∫¨T KH·∫®U QU·∫¢N TR·ªä KH√îNG ƒê√öNG", 'orange')
            self.gui.update_detail(
                "‚ùå T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä!\n"
                "‚úÖ Th·∫ª t·ª´ qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\n"
                "‚ùå M·∫≠t kh·∫©u qu·∫£n tr·ªã kh√¥ng ƒë√∫ng\n"
                "‚ö†Ô∏è Vi ph·∫°m b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ghi l·∫°i\n"
                "üîÑ ƒêang quay v·ªÅ x√°c th·ª±c...", Colors.ERROR)
            self.buzzer.beep("error")
            time.sleep(3)
            self.start_authentication()
        else:
            # Qu·∫£n tr·ªã h·ªßy
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üîÑ **H·ª¶Y TRUY C·∫¨P QU·∫¢N TR·ªä**\nQu·∫£n tr·ªã vi√™n ƒë√£ h·ªßy vi·ªác nh·∫≠p m·∫≠t kh·∫©u\nƒêang quay v·ªÅ x√°c th·ª±c b√¨nh th∆∞·ªùng",),
                    daemon=True
                ).start()
            
            logger.info("Truy c·∫≠p qu·∫£n tr·ªã ƒë√£ b·ªã h·ªßy")
            self.gui.update_detail("üîÑ Truy c·∫≠p qu·∫£n tr·ªã ƒë√£ b·ªã h·ªßy\nƒêang quay v·ªÅ x√°c th·ª±c...", Colors.WARNING)
            self.start_authentication()
    

    def _send_discord_failure_alert(self, step, attempts, details=""):
        """ULTRA SIMPLE: G·ª≠i Discord alert kh√¥ng c√≥ timeout context"""
        def send_alert():
            try:
                if self.discord_bot and self.discord_bot.bot:
                    # SIMPLE: Ch·ªâ d√πng asyncio.run() 
                    asyncio.run(
                        self.discord_bot.send_authentication_failure_alert(step, attempts, details)
                    )
                    logger.info(f"‚úÖ Discord alert sent successfully: {step}")
                else:
                    logger.warning("Discord bot not available")
            except Exception as e:
                logger.error(f"Discord alert error: {e}")
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=send_alert, daemon=True).start()

    def _send_discord_success(self, step, details=""):
        """Enhanced helper function ƒë·ªÉ g·ª≠i Discord success notification"""
        try:
            if self.discord_bot:
                # Create event loop for this thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Record the success
                loop.run_until_complete(
                    self.discord_bot.record_authentication_success(step)
                )
                
                # Send additional success notification with details if provided
                if details:
                    success_message = f"‚úÖ **{step.upper()} X√ÅC TH·ª∞C TH√ÄNH C√îNG**\n{details}"
                    loop.run_until_complete(
                        self.discord_bot.send_security_notification(success_message, "SUCCESS")
                    )
                
                loop.close()
                logger.info(f"Th√¥ng b√°o th√†nh c√¥ng Discord ƒë√£ g·ª≠i cho {step}")
                
        except Exception as e:
            logger.error(f"L·ªói th√¥ng b√°o th√†nh c√¥ng Discord cho {step}: {e}")

    def _unlock_door(self):
        """Enhanced door unlock v·ªõi Discord notifications"""
        try:
            logger.info(f"üîì ƒêang m·ªü kh√≥a c·ª≠a trong {self.config.LOCK_OPEN_DURATION} gi√¢y")
            
            # Th√¥ng b√°o th√†nh c√¥ng cu·ªëi c√πng ƒë·∫øn Discord
            if self.discord_bot:
                unlock_message = f"üîì **C·ª¨A ƒê√É M·ªû KH√ìA TH√ÄNH C√îNG**\n"
                unlock_message += f"üéâ Ho√†n th√†nh x√°c th·ª±c 4 l·ªõp:\n"
                unlock_message += f"  ‚úÖ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n"
                unlock_message += f"  ‚úÖ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n"
                unlock_message += f"  ‚úÖ Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\n"
                unlock_message += f"  ‚úÖ M·∫≠t kh·∫©u: TH√ÄNH C√îNG\n\n"
                unlock_message += f"üïê C·ª≠a s·∫Ω t·ª± ƒë·ªông kh√≥a l·∫°i sau {self.config.LOCK_OPEN_DURATION} gi√¢y\n"
                unlock_message += f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(unlock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_step(4, "HO√ÄN T·∫§T", "C·ª¨A ƒê√É M·ªû KH√ìA", Colors.SUCCESS)
            self.gui.update_status(f"C·ª¨A ƒêANG M·ªû - T·ª∞ ƒê·ªòNG KH√ìA SAU {self.config.LOCK_OPEN_DURATION} GI√ÇY", 'lightgreen')
            
            # M·ªü kh√≥a c·ª≠a
            self.relay.off()  # Unlock door
            self.buzzer.beep("success")
            
            # ƒê·∫øm ng∆∞·ª£c v·ªõi hi·ªáu ·ª©ng h√¨nh ·∫£nh
            for i in range(self.config.LOCK_OPEN_DURATION, 0, -1):
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000, 
                            lambda t=i: self.gui.update_detail(
                                f"üîì C·ª¨A ƒêANG M·ªû\n"
                                f"‚è∞ T·ª± ƒë·ªông kh√≥a sau {t} gi√¢y\n"
                                f"üö∂ Vui l√≤ng v√†o v√† ƒë√≥ng c·ª≠a\n"
                                f"üõ°Ô∏è T·∫•t c·∫£ h·ªá th·ªëng b·∫£o m·∫≠t ƒëang ho·∫°t ƒë·ªông", Colors.SUCCESS))
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                            lambda t=i: self.gui.update_status(f"C·ª¨A M·ªû - KH√ìA SAU {t} GI√ÇY", 'lightgreen'))
                
                # Ti·∫øng b√≠p ƒë·∫øm ng∆∞·ª£c cho 3 gi√¢y cu·ªëi
                if i <= 3:
                    self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                                lambda: self.buzzer.beep("click"))
            
            # L√™n l·ªãch t·ª± ƒë·ªông kh√≥a
            self.root.after(self.config.LOCK_OPEN_DURATION * 1000, self._lock_door)
            
        except Exception as e:
            logger.error(f"L·ªói m·ªü kh√≥a c·ª≠a: {e}")
            
            # Th√¥ng b√°o l·ªói ƒë·∫øn Discord
            if self.discord_bot:
                error_message = f"‚ùå **L·ªñI M·ªû KH√ìA C·ª¨A**\nL·ªói ph·∫ßn c·ª©ng khi m·ªü kh√≥a: {str(e)}\n‚ö†Ô∏è C√≥ th·ªÉ c·∫ßn can thi·ªáp th·ªß c√¥ng"
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(error_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üîß L·ªñI M·ªû KH√ìA C·ª¨A!\n{str(e)}\nVui l√≤ng ki·ªÉm tra ph·∫ßn c·ª©ng", Colors.ERROR)
            self.buzzer.beep("error")

    def _lock_door(self):
        """Enhanced door lock v·ªõi Discord notifications"""
        try:
            logger.info("üîí ƒêang kh√≥a c·ª≠a v√† ƒë·∫∑t l·∫°i h·ªá th·ªëng")
            
            # Kh√≥a c·ª≠a
            self.relay.on()  # Lock door
            
            # Discord notification v·ªÅ auto-lock
            if self.discord_bot:
                lock_message = f"üîí **C·ª¨A ƒê√É T·ª∞ ƒê·ªòNG KH√ìA**\n"
                lock_message += f"‚úÖ C·ª≠a ƒë√£ ƒë∆∞·ª£c b·∫£o m·∫≠t sau {self.config.LOCK_OPEN_DURATION} gi√¢y\n"
                lock_message += f"üîÑ H·ªá th·ªëng s·∫µn s√†ng cho ng∆∞·ªùi d√πng ti·∫øp theo\n"
                lock_message += f"üõ°Ô∏è T·∫•t c·∫£ l·ªõp b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i\n"
                lock_message += f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(lock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_status("C·ª¨A ƒê√É KH√ìA - H·ªÜ TH·ªêNG S·∫¥N S√ÄNG CHO NG∆Ø·ªúI D√ôNG TI·∫æP THEO", 'white')
            self.gui.update_detail(
                "üîí C·ª¨A ƒê√É T·ª∞ ƒê·ªòNG KH√ìA\n"
                "‚úÖ H·ªá th·ªëng b·∫£o m·∫≠t ƒë√£ ƒë·∫∑t l·∫°i\n"
                "üîÑ S·∫µn s√†ng cho chu k·ª≥ x√°c th·ª±c ti·∫øp theo\n"
                "üõ°Ô∏è T·∫•t c·∫£ c·∫£m bi·∫øn ƒëang ho·∫°t ƒë·ªông v√† gi√°m s√°t", Colors.PRIMARY)
            self.buzzer.beep("click")
            
            # Reset detection stats
            self.gui.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
            
            # Reset authentication state ho√†n to√†n
            self.auth_state = {
                "step": AuthStep.FACE,
                "consecutive_face_ok": 0,
                "fingerprint_attempts": 0,
                "rfid_attempts": 0,
                "pin_attempts": 0
            }
            
            # B·∫Øt ƒë·∫ßu chu k·ª≥ x√°c th·ª±c m·ªõi
            self.root.after(3000, self.start_authentication)
            
        except Exception as e:
            logger.error(f"L·ªói kh√≥a c·ª≠a: {e}")
            
            # Th√¥ng b√°o l·ªói nghi√™m tr·ªçng ƒë·∫øn Discord
            if self.discord_bot:
                critical_message = f"üö® **NGHI√äM TR·ªåNG: L·ªñI KH√ìA C·ª¨A**\n"
                critical_message += f"‚ùå Kh√¥ng th·ªÉ kh√≥a c·ª≠a: {str(e)}\n"
                critical_message += f"‚ö†Ô∏è NGUY C∆† VI PH·∫†M B·∫¢O M·∫¨T\n"
                critical_message += f"üîß C·∫¶N CAN THI·ªÜP TH·ª¶ C√îNG NGAY L·∫¨P T·ª®C"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(critical_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üö® NGHI√äM TR·ªåNG: L·ªñI KH√ìA C·ª¨A!\n{str(e)}\n‚ö†Ô∏è C·∫ßn can thi·ªáp th·ªß c√¥ng", Colors.ERROR)
            self.buzzer.beep("error")

    
    def run(self):
        """Ch·∫°y h·ªá th·ªëng ch√≠nh"""
        try:
            logger.info("ƒêang kh·ªüi ƒë·ªông H·ªá th·ªëng Kh√≥a C·ª≠a Th√¥ng minh")

            if self.discord_bot:
                logger.info("ƒêang kh·ªüi ƒë·ªông Discord bot...")
            if self.discord_bot.start_bot():
                logger.info("‚úÖ Discord bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
            else:
                logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Discord bot")

            # Hi·ªáu ·ª©ng kh·ªüi ƒë·ªông
            self.gui.update_status("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH v2.2 - S·∫¥N S√ÄNG!", 'lightgreen')
            self.gui.update_detail("H·ªá th·ªëng nh·∫≠n di·ªán ƒë√£ t·∫£i v√† s·∫µn s√†ng\n"
                                 "H·ªá th·ªëng b·∫£o m·∫≠t 4 l·ªõp ƒëang ho·∫°t ƒë·ªông\n"
                                 "T√≠ch h·ª£p Discord bot ƒë√£ ƒë∆∞·ª£c b·∫≠t\n"
                                 "Hi·ªáu su·∫•t n√¢ng cao cho Raspberry Pi 5", Colors.SUCCESS)
            
            self.buzzer.beep("startup")
            
            # Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
            face_info = self.face_recognizer.get_database_info()
            self.gui.update_detail(f"Tr·∫°ng th√°i h·ªá th·ªëng:\n"
                                 f"Khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω: {face_info['total_people']}\n"
                                 f"V√¢n tay: {len(self.admin_data.get_fingerprint_ids())}\n"
                                 f"Th·∫ª t·ª´: {len(self.admin_data.get_rfid_uids())}\n"
                                 f"Tr·∫°ng th√°i nh·∫≠n di·ªán: S·∫µn s√†ng", Colors.SUCCESS)
            
            # B·∫Øt ƒë·∫ßu x√°c th·ª±c sau 3 gi√¢y
            self.root.after(3000, self.start_authentication)
            
            # Setup cleanup
            self.root.protocol("WM_DELETE_WINDOW", self.cleanup)
            
            # B·∫Øt ƒë·∫ßu main loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            logger.info("H·ªá th·ªëng d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Cleanup t√†i nguy√™n khi tho√°t"""
        logger.info("ƒêang d·ªçn d·∫πp t√†i nguy√™n h·ªá th·ªëng...")
        self.running = False
        
        try:
            # CLEANUP DISCORD BOT
            if hasattr(self, 'discord_bot') and self.discord_bot:
                self.discord_bot.stop_bot()
                logger.info("Discord bot ƒë√£ d·ª´ng")
            
            if hasattr(self, 'picam2'):
                self.picam2.stop()
                logger.info("Camera ƒë√£ d·ª´ng")
                
            if hasattr(self, 'relay'):
                self.relay.on()  # Ensure door is locked
                logger.info("C·ª≠a ƒë√£ kh√≥a")
                
            if hasattr(self, 'buzzer') and hasattr(self.buzzer, 'buzzer') and self.buzzer.buzzer:
                self.buzzer.buzzer.off()
                logger.info("Buzzer ƒë√£ d·ª´ng")
                
        except Exception as e:
            logger.error(f"L·ªói cleanup: {e}")
        
        if hasattr(self, 'root'):
            self.root.quit()
        
        logger.info("Cleanup ho√†n t·∫•t")
    
    

# ==== MAIN EXECUTION ====
if __name__ == "__main__":
    try:
        print("=" * 100)
        print("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH 4 L·ªöP B·∫¢O M·∫¨T - PHI√äN B·∫¢N TI·∫æNG VI·ªÜT")
        print("   T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp")
        print("   Ng√†y: 2025-01-16 - Vietnamese Interface for Students")
        print("=" * 100)
        print()
        print("C·∫¢I TI·∫æN ƒê·∫∂C BI·ªÜT:")
        print("   ‚úì Nh·∫≠n di·ªán khu√¥n m·∫∑t v·ªõi m√¥ h√¨nh MobileNet SSD")
        print("   ‚úì Nh·∫≠n d·∫°ng LBPH v·ªõi ƒë·ªô ch√≠nh x√°c cao")
        print("   ‚úì T·ªëc ƒë·ªô cao 30+ khung/gi√¢y v·ªõi ph·∫£n h·ªìi tr·ª±c quan")
        print("   ‚úì Khung vi·ªÅn m√†u s·∫Øc (xanh/ƒë·ªè)")
        print("   ‚úì C·ª≠a s·ªï camera l·ªõn h∆°n 60% so v·ªõi phi√™n b·∫£n c≈©")
        print("   ‚úì T·ªëi ∆∞u ho√†n to√†n cho Raspberry Pi 5")
        print("   ‚úì √Çm thanh n√¢ng cao v·ªõi nhi·ªÅu m·∫´u")
        print("   ‚úì Th·ªëng k√™ v√† gi√°m s√°t th·ªùi gian th·ª±c")
        print("   ‚úì Giao di·ªán ti·∫øng Vi·ªát th√¢n thi·ªán")
        print("   ‚úì Thu·∫≠t ng·ªØ ƒë∆°n gi·∫£n d·ªÖ hi·ªÉu")
        print()
        print("4 L·ªöP B·∫¢O M·∫¨T TU·∫¶N T·ª∞:")
        print("   1. Nh·∫≠n di·ªán khu√¥n m·∫∑t (Camera th√¥ng minh)")
        print("   2. Sinh tr·∫Øc h·ªçc v√¢n tay (C·∫£m bi·∫øn AS608)")
        print("   3. Th·∫ª t·ª´/NFC (ƒê·∫ßu ƒë·ªçc PN532)")
        print("   4. M·∫≠t kh·∫©u s·ªë (B√†n ph√≠m)")
        print()
        print("ƒêI·ªÄU KHI·ªÇN N√ÇNG CAO:")
        print("   * ho·∫∑c KP_* = Ch·∫ø ƒë·ªô qu·∫£n tr·ªã")
        print("   # ho·∫∑c KP_+ = B·∫Øt ƒë·∫ßu x√°c th·ª±c")
        print("   ESC = Tho√°t h·ªá th·ªëng")
        print("   F11 = Chuy·ªÉn ƒë·ªïi to√†n m√†n h√¨nh")
        print("   Ph√≠m m≈©i t√™n = ƒêi·ªÅu h∆∞·ªõng dialog")
        print("   Enter/Space = X√°c nh·∫≠n")
        print("   D·∫•u ch·∫•m (.) = H·ªßy/Tho√°t dialog")
        print("   1-9 = L·ª±a ch·ªçn nhanh")
        print()
        print("KI·ªÇM TRA PH·∫¶N C·ª®NG:")
        
        hardware_components = [
            ("CAM", "Camera Raspberry Pi Module 2"),
            ("VT", "C·∫£m bi·∫øn v√¢n tay AS608 (USB/UART)"),
            ("TH·∫∫", "ƒê·∫ßu ƒë·ªçc th·∫ª t·ª´ PN532 (I2C)"),
            ("KH√ìA", "Kh√≥a ƒëi·ªán t·ª´ + Relay 4 k√™nh"),
            ("BUZZER", "Buzzer n√¢ng cao (GPIO PWM)"),
            ("PH√çM", "B√†n ph√≠m s·ªë USB"),
            ("DATA", "L∆∞u tr·ªØ m√¥ h√¨nh nh·∫≠n di·ªán"),
            ("H·ªÜ TH·ªêNG", "C∆° s·ªü d·ªØ li·ªáu khu√¥n m·∫∑t")
        ]
        
        for prefix, component in hardware_components:
            print(f"   {prefix}: {component}")
            time.sleep(0.2)
        
        print()
        print("ƒêANG KH·ªûI T·∫†O H·ªÜ TH·ªêNG ...")
        print("=" * 100)
        
        # Kh·ªüi t·∫°o v√† ch·∫°y h·ªá th·ªëng
        system = VietnameseSecuritySystem()
        
        print()
        print("T·∫§T C·∫¢ TH√ÄNH PH·∫¶N ƒê√É S·∫¥N S√ÄNG!")
        print("ƒêang kh·ªüi ƒë·ªông giao di·ªán ng∆∞·ªùi d√πng...")
        print("K·∫øt n·ªëi ph·∫ßn c·ª©ng th√†nh c√¥ng!")
        print("M√¥ h√¨nh nh·∫≠n di·ªán ƒë√£ ƒë∆∞·ª£c t·∫£i!")
        print("=" * 100)
        print("H·ªÜ TH·ªêNG S·∫¥N S√ÄNG! B·∫ÆT ƒê·∫¶U S·ª¨ D·ª§NG...")
        print("=" * 100)
        
        system.run()
        
    except Exception as e:
        print()
        print("=" * 100)
        print(f"L·ªñI KH·ªûI ƒê·ªòNG NGHI√äM TR·ªåNG: {e}")
        print()
        print("DANH S√ÅCH KI·ªÇM TRA KH·∫ÆC PH·ª§C:")
        
        troubleshooting_items = [
            ("HW", "Ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng v√† ngu·ªìn ƒëi·ªán"),
            ("MODEL", "ƒê·∫£m b·∫£o c√°c file m√¥ h√¨nh nh·∫≠n di·ªán t·ªìn t·∫°i"),
            ("GPIO", "Ki·ªÉm tra quy·ªÅn truy c·∫≠p GPIO v√† USB"),
            ("TH∆Ø VI·ªÜN", "C√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß th∆∞ vi·ªán Python"),
            ("BUZZER", "C·∫•u h√¨nh ƒë√∫ng GPIO cho Buzzer"),
            ("CAM", "Quy·ªÅn camera v√† drivers"),
            ("·ªî C·ª®NG", "Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng"),
            ("I2C", "K·∫øt n·ªëi I2C v√† UART ho·∫°t ƒë·ªông"),
            ("MODEL", "T·∫£i m√¥ h√¨nh nh·∫≠n di·ªán (ch·∫°y download_models.py)"),
            ("LOG", "Ki·ªÉm tra file log ƒë·ªÉ xem chi ti·∫øt l·ªói")
        ]
        
        for prefix, item in troubleshooting_items:
            print(f"   {prefix}: {item}")
        
        print()
        print("H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("   1. Ch·∫°y: python3 download_models.py")
        print("   2. Ki·ªÉm tra: ls -la /home/khoi/Desktop/KHOI_LUANAN/models/")
        print("   3. Test camera: python3 -c 'from picamera2 import Picamera2; print(\"OK\")'")
        print("   4. Test OpenCV: python3 -c 'import cv2; print(cv2.__version__)'")
        print("   5. Ki·ªÉm tra log: tail -f /home/khoi/Desktop/KHOI_LUANAN/system.log")
        print()
        print("=" * 100)
        
        logger.error(f"System startup failed: {e}")
        sys.exit(1)
