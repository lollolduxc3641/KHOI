#!/usr/bin/env python3
"""
H·ªÜ TH·ªêNG KH√ìA B·∫¢O M·∫¨T 4 L·ªöP - GIAO DI·ªÜN TI·∫æNG VI·ªÜT - C·∫¢I THI·ªÜN GUI
T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp
Phi√™n b·∫£n: v2.3.2 - Enhanced GUI Interface
Ng√†y c·∫≠p nh·∫≠t: 2025-07-04 09:19:48 UTC - Mautandew89
C·∫£i thi·ªán: Giao di·ªán g·ªçn g√†ng, √≠t ti·∫øng Anh, th√¥ng tin t·ªëi ∆∞u
"""

import cv2
import time
import json
import os
import logging
import threading
import tkinter as tk
from tkinter import ttk, font
from PIL import Image, ImageTk
from datetime import datetime
from typing import Optional, List, Dict, Any
from dataclasses import dataclass
from enum import Enum
import sys
import numpy as np
import asyncio

# Import modules c·ªßa d·ª± √°n
try:
    from improved_face_recognition import ImprovedFaceRecognition, FaceDetectionResult
    from enhanced_components import (
        Colors, EnhancedBuzzerManager, EnhancedNumpadDialog, 
        EnhancedMessageBox, AdminDataManager, ImprovedAdminGUI
    )
    from discord_integration import DiscordSecurityBot
except ImportError as e:
    print(f"‚ùå L·ªói import modules: {e}")
    print("üîß ƒê·∫£m b·∫£o c√°c file sau t·ªìn t·∫°i:")
    print("   - improved_face_recognition.py")
    print("   - enhanced_components.py")
    print("   - discord_integration.py")
    sys.exit(1)

# Hardware imports
try:
    from picamera2 import Picamera2
    from gpiozero import LED, PWMOutputDevice
    from pyfingerprint.pyfingerprint import PyFingerprint
    import board
    import busio
    from adafruit_pn532.i2c import PN532_I2C
except ImportError as e:
    logging.error(f"Kh√¥ng th·ªÉ import th∆∞ vi·ªán ph·∫ßn c·ª©ng: {e}")
    print("‚ö†Ô∏è Hardware import failed - running in simulation mode")
    
    # Mock hardware classes for testing
    class MockPicamera2:
        def configure(self, config): pass
        def start(self): pass
        def stop(self): pass
        def capture_array(self): 
            return np.zeros((600, 800, 3), dtype=np.uint8)
    
    class MockLED:
        def __init__(self, pin): self.state = True
        def on(self): self.state = True
        def off(self): self.state = False
        @property
        def value(self): return self.state
    
    class MockPN532:
        def SAM_configuration(self): pass
        def read_passive_target(self, timeout=1): return None
    
    class MockFingerprint:
        def verifyPassword(self): return True
        def readImage(self): return False
        def convertImage(self, slot): pass
        def searchTemplate(self): return (-1, 0)
        def createTemplate(self): pass
        def storeTemplate(self, pos, slot): pass
        def deleteTemplate(self, pos): pass
        def loadTemplate(self, pos, slot): pass
    
    Picamera2 = MockPicamera2
    LED = MockLED
    
    class MockBoard:
        SCL = None
        SDA = None
    
    class MockBusIO:
        def I2C(self, scl, sda): return None
    
    board = MockBoard()
    busio = MockBusIO()
    PN532_I2C = lambda i2c, debug=False: MockPN532()
    PyFingerprint = lambda *args, **kwargs: MockFingerprint()

# ==== ENHANCED CONFIGURATION ====
@dataclass
class Config:
    # Paths
    PROJECT_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    MODELS_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/models"
    FACE_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/face_data"
    ADMIN_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    
    # GPIO
    BUZZER_GPIO: int = 17
    RELAY_GPIO: int = 5
    
    # Face Recognition
    FACE_CONFIDENCE_THRESHOLD: float = 0.5
    FACE_RECOGNITION_THRESHOLD: float = 85.0
    FACE_REQUIRED_CONSECUTIVE: int = 5
    FACE_DETECTION_INTERVAL: float = 0.03
    
    # Camera
    CAMERA_WIDTH: int = 800
    CAMERA_HEIGHT: int = 600
    DISPLAY_WIDTH: int = 650
    DISPLAY_HEIGHT: int = 490
    
    # Admin
    ADMIN_UID: List[int] = None
    ADMIN_PASS: str = "0809"
    
    # Timing
    LOCK_OPEN_DURATION: int = 3
    MAX_ATTEMPTS: int = 5
    
    # Authentication modes
    DEFAULT_AUTH_MODE: str = "sequential"
    
    def __post_init__(self):
        if self.ADMIN_UID is None:
            self.ADMIN_UID = [0xe5, 0xa8, 0xbd, 0x2]
        
        for path in [self.MODELS_PATH, self.FACE_DATA_PATH, self.ADMIN_DATA_PATH]:
            os.makedirs(path, exist_ok=True)

# ==== ENHANCED AUTH STEP ENUM ====
class AuthStep(Enum):
    FACE = "face"
    FINGERPRINT = "fingerprint"
    RFID = "rfid"
    PASSCODE = "passcode"
    ADMIN = "admin"
    ANY_AUTH = "any_auth"
    COMPLETED = "completed"

# ==== ENHANCED AUTH STATE CLASS ====
class AuthenticationState:
    """Enhanced authentication state management"""
    def __init__(self, auth_mode: str = "sequential"):
        self.auth_mode = auth_mode
        self.reset()
        
    def reset(self):
        if self.auth_mode == "sequential":
            self.step = AuthStep.FACE
        else:
            self.step = AuthStep.ANY_AUTH
            
        self.consecutive_face_ok = 0
        self.fingerprint_attempts = 0
        self.rfid_attempts = 0
        self.pin_attempts = 0
        
        self.any_mode_attempts = {
            "face": 0,
            "fingerprint": 0,
            "rfid": 0,
            "passcode": 0
        }
        self.any_mode_successes = []
        
    def set_mode(self, mode: str):
        if mode in ["sequential", "any"]:
            self.auth_mode = mode
            self.reset()
            return True
        return False
    
    def is_sequential_mode(self):
        return self.auth_mode == "sequential"
    
    def is_any_mode(self):
        return self.auth_mode == "any"
    
    def get_current_step_display(self):
        step_names = {
            AuthStep.FACE: "NH·∫¨N DI·ªÜN KHU√îN M·∫∂T",
            AuthStep.FINGERPRINT: "QU√âT V√ÇN TAY",
            AuthStep.RFID: "QU√âT TH·∫∫ T·ª™",
            AuthStep.PASSCODE: "NH·∫¨P M·∫¨T KH·∫®U",
            AuthStep.ANY_AUTH: "X√ÅC TH·ª∞C B·∫§T K·ª≤",
            AuthStep.COMPLETED: "HO√ÄN TH√ÄNH"
        }
        return step_names.get(self.step, str(self.step))

# ==== LOGGING SETUP ====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/home/khoi/Desktop/KHOI_LUANAN/system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

logger.info("=" * 80)
logger.info("üöÄ H·ªÜ TH·ªêNG KH√ìA B·∫¢O M·∫¨T v2.3.2 - ENHANCED GUI INTERFACE")
logger.info("üìÖ Started: 2025-07-04 09:19:48 UTC")
logger.info("üë§ User: Mautandew89")
logger.info("üé® Enhanced: Simplified GUI, Vietnamese text, optimized info")
logger.info("=" * 80)

# ==== ENHANCED VIETNAMESE SECURITY GUI - IMPROVED INTERFACE ====
class VietnameseSecurityGUI:
    def __init__(self, root):
        self.root = root
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.current_fps = 0
        
        # SIMPLIFIED detection stats - √≠t th√¥ng tin h∆°n
        self.detection_stats = {"total": 0, "recognized": 0}
        
        self._setup_window()
        self._create_widgets()
        self._setup_bindings()
        
        logger.info("‚úÖ VietnameseSecurityGUI kh·ªüi t·∫°o - Enhanced interface v2.3.2")
    
    def update_fingerprint_status(self, status_type, message, details=""):
        """Smart update cho fingerprint status"""
        colors = {
            "scanning": Colors.PRIMARY,
            "quality_issue": Colors.WARNING, 
            "not_recognized": Colors.ERROR,
            "success": Colors.SUCCESS,
            "timeout": Colors.WARNING,
            "hardware_error": Colors.ERROR
        }
        
        # VIETNAMESE titles - no English
        titles = {
            "scanning": "ƒêANG QU√âT V√ÇN TAY",
            "quality_issue": "CH·∫§T L∆Ø·ª¢NG V√ÇN TAY", 
            "not_recognized": "V√ÇN TAY KH√îNG NH·∫¨N DI·ªÜN",
            "success": "V√ÇN TAY TH√ÄNH C√îNG",
            "timeout": "H·∫æT TH·ªúI GIAN QU√âT",
            "hardware_error": "L·ªñI C·∫¢M BI·∫æN"
        }
        
        self.update_step(2, titles.get(status_type, "QU√âT V√ÇN TAY"), message, colors.get(status_type, Colors.PRIMARY))
        
        if details:
            self.update_detail(details, colors.get(status_type, Colors.TEXT_SECONDARY))
    
    def _setup_window(self):
        self.root.title("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH 4 L·ªöP B·∫¢O M·∫¨T v2.3.2")
        self.root.geometry("1500x900")
        self.root.configure(bg=Colors.DARK_BG)
        self.root.attributes('-fullscreen', True)
        self.root.minsize(1200, 800)
    
    def _create_widgets(self):
        # Container ch√≠nh
        main_container = tk.Frame(self.root, bg=Colors.DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        main_container.grid_columnconfigure(0, weight=2)
        main_container.grid_columnconfigure(1, weight=1)
        main_container.grid_rowconfigure(0, weight=1)
        
        # B√äN TR√ÅI - CAMERA NH·∫¨N DI·ªÜN
        self._create_camera_panel(main_container)
        
        # B√äN PH·∫¢I - TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG
        self._create_status_panel(main_container)
        
        # PH√çA D∆Ø·ªöI - THANH TR·∫†NG TH√ÅI
        self._create_status_bar()
    
    def _create_camera_panel(self, parent):
        camera_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        camera_panel.grid(row=0, column=0, padx=(0,10), pady=0, sticky="nsew")
        
        # SIMPLIFIED header - √≠t text h∆°n
        header = tk.Frame(camera_panel, bg=Colors.PRIMARY, height=90)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        # SIMPLIFIED title
        header_left = tk.Frame(header, bg=Colors.PRIMARY)
        header_left.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(header_left, text="CAMERA NH·∫¨N DI·ªÜN",
                font=('Arial', 24, 'bold'), fg='white', bg=Colors.PRIMARY,
                anchor='w').pack(side=tk.LEFT, padx=20, expand=True, fill=tk.X)
        
        # SIMPLIFIED stats - ch·ªâ hi·ªÉn th·ªã th√¥ng tin c·∫ßn thi·∫øt
        stats_frame = tk.Frame(header, bg=Colors.PRIMARY)
        stats_frame.pack(side=tk.RIGHT, padx=20)
        
        self.fps_label = tk.Label(stats_frame, text="FPS: --", 
                                 font=('Arial', 14, 'bold'), fg='white', bg=Colors.PRIMARY)
        self.fps_label.pack()
        
        self.detection_count_label = tk.Label(stats_frame, text="Nh·∫≠n di·ªán: 0", 
                                            font=('Arial', 12), fg='white', bg=Colors.PRIMARY)
        self.detection_count_label.pack()
        
        # M√†n h√¨nh camera
        self.camera_frame = tk.Frame(camera_panel, bg='black', relief=tk.SUNKEN, bd=4)
        self.camera_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        self.camera_label = tk.Label(self.camera_frame, 
                                   text="ƒêang kh·ªüi ƒë·ªông camera...\n\nVui l√≤ng ch·ªù...",
                                   font=('Arial', 22), fg='white', bg='black')
        self.camera_label.pack(expand=True)
        
        # SIMPLIFIED status frame - √≠t text h∆°n
        status_frame = tk.Frame(camera_panel, bg=Colors.CARD_BG, height=70)
        status_frame.pack(fill=tk.X, pady=10)
        status_frame.pack_propagate(False)
        
        self.face_status = tk.Label(status_frame, text="H·ªá th·ªëng s·∫µn s√†ng",
                                   font=('Arial', 16, 'bold'), 
                                   fg=Colors.PRIMARY, bg=Colors.CARD_BG)
        self.face_status.pack(expand=True)
        
        self.detection_info = tk.Label(status_frame, text="Chu·∫©n b·ªã nh·∫≠n di·ªán",
                                      font=('Arial', 14), 
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.detection_info.pack()
    
    def _create_status_panel(self, parent):
        status_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        status_panel.grid(row=0, column=1, padx=(10,0), pady=0, sticky="nsew")
        
        # SIMPLIFIED Header - g·ªçn h∆°n
        header = tk.Frame(status_panel, bg=Colors.SUCCESS, height=100)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        # SIMPLIFIED main title
        tk.Label(header, text="TR·∫†NG TH√ÅI X√ÅC TH·ª∞C",
                font=('Arial', 20, 'bold'), fg='white', bg=Colors.SUCCESS).pack(pady=(15, 5))
        
        # SIMPLIFIED authentication mode indicator
        self.auth_mode_label = tk.Label(header, text="CH·∫æ ƒê·ªò: ƒêANG T·∫¢I",
                font=('Arial', 12, 'bold'), fg='white', bg=Colors.WARNING,
                relief=tk.RAISED, bd=2, padx=8, pady=1)
        self.auth_mode_label.pack(pady=(0, 10))
        
        # B∆∞·ªõc hi·ªán t·∫°i - SIMPLIFIED
        self.step_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        self.step_frame.pack(fill=tk.X, padx=25, pady=20)
        
        self.step_number = tk.Label(self.step_frame, text="1", 
                                   font=('Arial', 48, 'bold'),
                                   fg='white', bg=Colors.PRIMARY,
                                   width=2, relief=tk.RAISED, bd=5)
        self.step_number.pack(side=tk.LEFT, padx=(0,20))
        
        step_info = tk.Frame(self.step_frame, bg=Colors.CARD_BG)
        step_info.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.step_title = tk.Label(step_info, text="NH·∫¨N DI·ªÜN KHU√îN M·∫∂T",
                                  font=('Arial', 26, 'bold'),
                                  fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                                  anchor='w')
        self.step_title.pack(fill=tk.X)
        
        self.step_subtitle = tk.Label(step_info, text="H·ªá th·ªëng ƒëang ph√¢n t√≠ch",
                                     font=('Arial', 16),
                                     fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG,
                                     anchor='w')
        self.step_subtitle.pack(fill=tk.X)
        
        # SIMPLIFIED: C√°c b∆∞·ªõc x√°c th·ª±c - g·ªçn h∆°n
        progress_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        progress_frame.pack(fill=tk.X, padx=25, pady=15)
        
        tk.Label(progress_frame, text="C√ÅC B∆Ø·ªöC X√ÅC TH·ª∞C:",
                font=('Arial', 18, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG).pack(anchor='w')
        
        steps_frame = tk.Frame(progress_frame, bg=Colors.CARD_BG)
        steps_frame.pack(fill=tk.X, pady=10)
        
        self.step_indicators = {}
        # SIMPLIFIED step names - ng·∫Øn g·ªçn h∆°n
        step_names = [
            "KHU√îN M·∫∂T",
            "V√ÇN TAY", 
            "TH·∫∫ T·ª™",
            "M·∫¨T KH·∫®U"
        ]
        
        for i, name in enumerate(step_names):
            container = tk.Frame(steps_frame, bg=Colors.CARD_BG)
            container.pack(fill=tk.X, pady=6)
            
            circle = tk.Label(container, text=f"{i+1}",
                             font=('Arial', 18, 'bold'),
                             fg='white', bg=Colors.TEXT_SECONDARY,
                             width=2, relief=tk.RAISED, bd=3)
            circle.pack(side=tk.LEFT, padx=(0,15))
            
            label = tk.Label(container, text=name,
                            font=('Arial', 16, 'bold'),
                            fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                            anchor='w')
            label.pack(side=tk.LEFT, fill=tk.X, expand=True)
            
            self.step_indicators[i+1] = {
                'circle': circle,
                'label': label
            }
        
        # SIMPLIFIED: Khu v·ª±c th√¥ng tin chi ti·∫øt - g·ªçn h∆°n
        msg_frame = tk.Frame(status_panel, bg=Colors.BACKGROUND, relief=tk.SUNKEN, bd=3)
        msg_frame.pack(fill=tk.X, padx=25, pady=15)
        
        tk.Label(msg_frame, text="TH√îNG TIN CHI TI·∫æT:",
                font=('Arial', 16, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.BACKGROUND).pack(anchor='w', padx=15, pady=(12,6))
        
        self.detail_message = tk.Label(msg_frame, text="Kh·ªüi ƒë·ªông h·ªá th·ªëng nh·∫≠n di·ªán...",
                                      font=('Arial', 14),
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.BACKGROUND,
                                      wraplength=420, justify=tk.LEFT, anchor='w')
        self.detail_message.pack(fill=tk.X, padx=15, pady=(0,12))
        
        # SIMPLIFIED: Hi·ªÉn th·ªã th·ªùi gian - nh·ªè h∆°n
        self.time_label = tk.Label(status_panel, text="",
                                  font=('Arial', 14),
                                  fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.time_label.pack(side=tk.BOTTOM, pady=8)
        
        self._update_time()
    
    def _create_status_bar(self):
        status_bar = tk.Frame(self.root, bg=Colors.PRIMARY, height=80)
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, padx=20, pady=(0,20))
        status_bar.pack_propagate(False)
        
        self.main_status = tk.Label(status_bar, 
                                   text="H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH v2.3.2 - ƒêANG KH·ªûI ƒê·ªòNG",
                                   font=('Arial', 20, 'bold'),
                                   fg='white', bg=Colors.PRIMARY)
        self.main_status.pack(expand=True)
    
    def _setup_bindings(self):
        self.root.bind('<Key>', self._on_key)
        self.root.bind('<F11>', lambda e: self.root.attributes('-fullscreen', 
                                                              not self.root.attributes('-fullscreen')))
        self.root.focus_set()
    
    def _on_key(self, event):
        key = event.keysym
        if key == 'asterisk' or key == 'KP_Multiply':
            if hasattr(self, 'system_ref'):
                self.system_ref._force_admin_mode()
        elif key == 'numbersign' or key == 'KP_Add':
            if hasattr(self, 'system_ref'):
                self.system_ref.start_authentication()
        elif key == 'Escape':
            if hasattr(self, 'system_ref') and hasattr(self.system_ref, 'buzzer'):
                if EnhancedMessageBox.ask_yesno(self.root, "Tho√°t h·ªá th·ªëng", 
                                            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?", self.system_ref.buzzer):
                    self.root.quit()
    
    def _update_time(self):
        current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        self.time_label.config(text=current_time)
        self.root.after(1000, self._update_time)
    
    # ==== SIMPLIFIED METHOD: Update Authentication Mode Display ====
    def update_auth_mode_display(self, auth_mode: str):
        """SIMPLIFIED: C·∫≠p nh·∫≠t hi·ªÉn th·ªã ch·∫ø ƒë·ªô x√°c th·ª±c"""
        mode_displays = {
            "sequential": ("üõ°Ô∏è TU·∫¶N T·ª∞", Colors.SUCCESS),
            "any": ("‚ö° ƒê∆†N L·∫∫", Colors.WARNING)
        }
        
        display_text, color = mode_displays.get(auth_mode, ("‚ùì KH√îNG X√ÅC ƒê·ªäNH", Colors.ERROR))
        
        self.auth_mode_label.config(text=display_text, bg=color)
        
        # SIMPLIFIED: Update step indicators based on mode
        if auth_mode == "any":
            for i in range(1, 5):
                indicator = self.step_indicators[i]
                indicator['circle'].config(bg=Colors.WARNING)
                indicator['label'].config(fg=Colors.TEXT_PRIMARY)
        else:
            for i in range(1, 5):
                indicator = self.step_indicators[i]
                indicator['circle'].config(bg=Colors.TEXT_SECONDARY)
                indicator['label'].config(fg=Colors.TEXT_SECONDARY)
    
    # ==== ENHANCED METHODS - SIMPLIFIED MESSAGES ====
    def update_camera(self, frame: np.ndarray, detection_result: Optional[FaceDetectionResult] = None):
        """SIMPLIFIED: C·∫≠p nh·∫≠t hi·ªÉn th·ªã camera v·ªõi th√¥ng tin g·ªçn g√†ng"""
        try:
            # SIMPLIFIED FPS calculation
            self.fps_counter += 1
            current_time = time.time()
            if current_time - self.fps_start_time >= 1.0:
                self.current_fps = self.fps_counter
                self.fps_counter = 0
                self.fps_start_time = current_time
                self.fps_label.config(text=f"FPS: {self.current_fps}")
            
            # SIMPLIFIED detection stats
            if detection_result:
                self.detection_stats["total"] += 1
                if detection_result.recognized:
                    self.detection_stats["recognized"] += 1
                
                # SIMPLIFIED counter display
                self.detection_count_label.config(
                    text=f"Nh·∫≠n di·ªán: {self.detection_stats['recognized']}/{self.detection_stats['total']}"
                )
            
            # Display camera frame
            height, width = frame.shape[:2]
            display_height = Config.DISPLAY_HEIGHT
            display_width = int(width * display_height / height)
            
            img = cv2.resize(frame, (display_width, display_height))
            rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img_pil = Image.fromarray(rgb_img)
            img_tk = ImageTk.PhotoImage(img_pil)
            
            self.camera_label.config(image=img_tk, text="")
            self.camera_label.image = img_tk
            
            # SIMPLIFIED detection status messages
            if detection_result:
                if detection_result.detected:
                    if detection_result.recognized:
                        self.face_status.config(
                            text=f"ƒê√É X√ÅC NH·∫¨N: {detection_result.person_name}",
                            fg=Colors.SUCCESS
                        )
                        self.detection_info.config(
                            text=f"ƒê·ªô ch√≠nh x√°c: {detection_result.confidence:.1f}% - CHO PH√âP",
                            fg=Colors.SUCCESS
                        )
                    else:
                        self.face_status.config(
                            text="KHU√îN M·∫∂T KH√îNG ƒê∆Ø·ª¢C PH√âP",
                            fg=Colors.ERROR
                        )
                        self.detection_info.config(
                            text="Ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω - T·ª´ ch·ªëi truy c·∫≠p",
                            fg=Colors.ERROR
                        )
                else:
                    self.face_status.config(
                        text="ƒêANG QU√âT KHU√îN M·∫∂T",
                        fg=Colors.WARNING
                    )
                    self.detection_info.config(
                        text="T√¨m ki·∫øm khu√¥n m·∫∑t trong khung h√¨nh",
                        fg=Colors.TEXT_SECONDARY
                    )
            
        except Exception as e:
            logger.error(f"L·ªói c·∫≠p nh·∫≠t camera: {e}")
    
    def update_step(self, step_num, title, subtitle, color=None):
        if color is None:
            color = Colors.PRIMARY
            
        self.step_number.config(text=str(step_num), bg=color)
        self.step_title.config(text=title)
        self.step_subtitle.config(text=subtitle)
        
        # Get auth mode from system if available
        auth_mode = "sequential"  # default
        if hasattr(self, 'system_ref') and hasattr(self.system_ref, 'auth_state'):
            auth_mode = self.system_ref.auth_state.auth_mode
        
        # SIMPLIFIED: C·∫≠p nh·∫≠t c√°c ch·ªâ b√°o ti·∫øn tr√¨nh
        if auth_mode == "any":
            # Any mode: highlight current step being attempted
            for i in range(1, 5):
                indicator = self.step_indicators[i]
                if i == step_num:
                    indicator['circle'].config(bg=color)
                    indicator['label'].config(fg=Colors.TEXT_PRIMARY)
                else:
                    indicator['circle'].config(bg=Colors.WARNING)
                    indicator['label'].config(fg=Colors.TEXT_PRIMARY)
        else:
            # Sequential mode: traditional progression
            for i in range(1, 5):
                indicator = self.step_indicators[i]
                if i < step_num:
                    indicator['circle'].config(bg=Colors.SUCCESS)
                    indicator['label'].config(fg=Colors.TEXT_PRIMARY)
                elif i == step_num:
                    indicator['circle'].config(bg=color)
                    indicator['label'].config(fg=Colors.TEXT_PRIMARY)
                else:
                    indicator['circle'].config(bg=Colors.TEXT_SECONDARY)
                    indicator['label'].config(fg=Colors.TEXT_SECONDARY)
    
    def update_status(self, message, color=None):
        if color is None:
            color = 'white'
        self.main_status.config(text=message, fg=color)
    
    def update_detail(self, message, color=None):
        """SIMPLIFIED: Update detail v·ªõi shorter messages"""
        if color is None:
            color = Colors.TEXT_SECONDARY
        
        # LIMIT message length ƒë·ªÉ tr√°nh qu√° d√†i
        if len(message) > 180:  # Gi·∫£m t·ª´ 200 xu·ªëng 180
            message = message[:177] + "..."
        
        self.detail_message.config(text=message, fg=color)
    
    def set_system_reference(self, system):
        self.system_ref = system
        
        # Initialize auth mode display
        if hasattr(system, 'admin_data'):
            auth_mode = system.admin_data.get_authentication_mode()
            self.update_auth_mode_display(auth_mode)
    # ==== VIETNAMESE SECURITY SYSTEM - ENHANCED WITH DUAL AUTH MODE ====
class VietnameseSecuritySystem:
    
    def _init_discord_bot(self):
        """Kh·ªüi t·∫°o Discord bot integration"""
        try:
            logger.info("Kh·ªüi t·∫°o Discord bot integration...")
            self.discord_bot = DiscordSecurityBot(self)
            logger.info("Discord bot integration ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o Discord bot: {e}")
            logger.info("Ti·∫øp t·ª•c ch·∫°y m√† kh√¥ng c√≥ Discord bot...")
            self.discord_bot = None
    
    def _send_discord_notification(self, message):
        """Helper function ƒë·ªÉ g·ª≠i Discord notification t·ª´ sync context"""
        try:
            if self.discord_bot and self.discord_bot.bot:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(self.discord_bot.send_notification(message))
                loop.close()
        except Exception as e:
            logger.error(f"Discord notification error: {e}")       
    
    def __init__(self):
        self.config = Config()
        logger.info("üöÄ Kh·ªüi t·∫°o H·ªá th·ªëng Kh√≥a C·ª≠a Th√¥ng minh v2.3.2 - Enhanced GUI")
        
        self._init_hardware()
        self._init_components()
        self._init_gui()
        self._init_discord_bot()
        
        # ENHANCED: Authentication state v·ªõi dual mode support
        auth_mode = self.admin_data.get_authentication_mode()
        self.auth_state = AuthenticationState(auth_mode)
        
        # Legacy compatibility
        self.failed_attempts = {
            "face": 0,
            "fingerprint": 0, 
            "rfid": 0,
            "pin": 0,
            "total_today": 0
        }
        
        self.running = True
        self.face_thread = None
        
        # Any mode specific variables
        self.any_mode_active_threads = {}
        self.any_mode_lock = threading.Lock()
        
        logger.info(f"‚úÖ H·ªá th·ªëng kh·ªüi t·∫°o th√†nh c√¥ng - Ch·∫ø ƒë·ªô: {auth_mode.upper()}")
    
    def _init_hardware(self):
        """Kh·ªüi t·∫°o ph·∫ßn c·ª©ng"""
        try:
            logger.info("Kh·ªüi t·∫°o ph·∫ßn c·ª©ng...")
            
            # Buzzer
            try:
                self.buzzer = EnhancedBuzzerManager(self.config.BUZZER_GPIO)
            except:
                logger.warning("Buzzer mock mode")
                self.buzzer = type('MockBuzzer', (), {'beep': lambda x, y: None})()
            
            # Camera
            self.picam2 = Picamera2()
            if hasattr(self.picam2, 'configure'):
                self.picam2.configure(self.picam2.create_video_configuration(
                    main={"format": 'XRGB8888', "size": (self.config.CAMERA_WIDTH, self.config.CAMERA_HEIGHT)}
                ))
                self.picam2.start()
                time.sleep(2)
            
            # Relay (Door lock)
            self.relay = LED(self.config.RELAY_GPIO)
            self.relay.on()  # Locked by default
            
            # RFID
            i2c = busio.I2C(board.SCL, board.SDA)
            self.pn532 = PN532_I2C(i2c, debug=False)
            self.pn532.SAM_configuration()
            
            # Fingerprint sensor
            self.fingerprint = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)
            if not self.fingerprint.verifyPassword():
                logger.warning("Fingerprint sensor simulation mode")
            
            logger.info("T·∫•t c·∫£ ph·∫ßn c·ª©ng ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o ph·∫ßn c·ª©ng: {e}")
            logger.info("Continuing in simulation mode...")
    
    def _init_components(self):
        """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn h·ªá th·ªëng"""
        try:
            logger.info("Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn h·ªá th·ªëng...")
            
            # Admin data manager (ENHANCED)
            self.admin_data = AdminDataManager(self.config.ADMIN_DATA_PATH)
            
            # Face Recognition
            self.face_recognizer = ImprovedFaceRecognition(
                models_path=self.config.MODELS_PATH,
                face_data_path=self.config.FACE_DATA_PATH,
                confidence_threshold=self.config.FACE_CONFIDENCE_THRESHOLD,
                recognition_threshold=self.config.FACE_RECOGNITION_THRESHOLD
            )
            
            logger.info("C√°c th√†nh ph·∫ßn h·ªá th·ªëng ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o th√†nh ph·∫ßn h·ªá th·ªëng: {e}")
            raise
    
    def _init_gui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        try:
            logger.info("Kh·ªüi t·∫°o giao di·ªán enhanced...")
            
            self.root = tk.Tk()
            self.gui = VietnameseSecurityGUI(self.root)  # ENHANCED GUI
            self.gui.set_system_reference(self)
            
            # Admin GUI (ENHANCED)
            self.admin_gui = ImprovedAdminGUI(self.root, self)
            
            logger.info("Giao di·ªán enhanced ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o giao di·ªán: {e}")
            raise
    
    def _force_admin_mode(self):
        """Ch·∫ø ƒë·ªô admin nhanh b·∫±ng ph√≠m *"""
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(self.root, "TRUY C·∫¨P QU·∫¢N TR·ªä",
                                    "Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã:", True, self.buzzer)
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            self.gui.update_status("CH·∫æ ƒê·ªò QU·∫¢N TR·ªä ƒê√É K√çCH HO·∫†T", 'lightgreen')
            self.gui.update_detail("X√°c th·ª±c qu·∫£n tr·ªã th√†nh c√¥ng! ƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn...", Colors.SUCCESS)
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
        elif password is not None:
            self.gui.update_status("T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä", 'orange')
            self.gui.update_detail("M·∫≠t kh·∫©u qu·∫£n tr·ªã kh√¥ng ƒë√∫ng!", Colors.ERROR)
            self.buzzer.beep("error")
    
    # ==== ENHANCED AUTHENTICATION METHODS ====
    
    def start_authentication(self):
        """ENHANCED: B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c v·ªõi dual mode support"""
        # Refresh authentication mode from admin data
        current_mode = self.admin_data.get_authentication_mode()
        self.auth_state.set_mode(current_mode)
        
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c - Ch·∫ø ƒë·ªô: {current_mode.upper()}")
        
        # Update GUI to show current mode
        self.gui.update_auth_mode_display(current_mode)
        
        if current_mode == "sequential":
            self._start_sequential_authentication()
        else:
            self._start_any_authentication()
    
    def _start_sequential_authentication(self):
        """B·∫Øt ƒë·∫ßu x√°c th·ª±c tu·∫ßn t·ª± (ch·∫ø ƒë·ªô c≈©)"""
        logger.info("üõ°Ô∏è Kh·ªüi ƒë·ªông ch·∫ø ƒë·ªô x√°c th·ª±c tu·∫ßn t·ª±")
        
        self.auth_state.reset()
        
        self.gui.update_step(1, "NH·∫¨N DI·ªÜN KHU√îN M·∫∂T", "H·ªá th·ªëng ƒëang ph√¢n t√≠ch", Colors.PRIMARY)
        self.gui.update_status("X√ÅC TH·ª∞C TU·∫¶N T·ª∞ - B∆Ø·ªöC 1/4: PH√ÇN T√çCH KHU√îN M·∫∂T", 'white')
        self.gui.update_detail("üõ°Ô∏è Ch·∫ø ƒë·ªô b·∫£o m·∫≠t cao - Tu·∫ßn t·ª± 4 l·ªõp\nH·ªá th·ªëng nh·∫≠n di·ªán ƒëang qu√©t v√† ph√¢n t√≠ch khu√¥n m·∫∑t.\nNh√¨n th·∫≥ng v√†o camera v√† gi·ªØ nguy√™n v·ªã tr√≠.", Colors.PRIMARY)
        
        # Reset detection stats
        self.gui.detection_stats = {"total": 0, "recognized": 0}
        
        if self.face_thread and self.face_thread.is_alive():
            return
        
        self.face_thread = threading.Thread(target=self._face_recognition_loop, daemon=True)
        self.face_thread.start()
    
    def _start_any_authentication(self):
        """ENHANCED: B·∫Øt ƒë·∫ßu x√°c th·ª±c ƒë∆°n l·∫ª (ch·∫ø ƒë·ªô m·ªõi)"""
        logger.info("‚ö° Kh·ªüi ƒë·ªông ch·∫ø ƒë·ªô x√°c th·ª±c ƒë∆°n l·∫ª")
        
        self.auth_state.reset()
        
        # Stop any existing threads
        self._stop_all_auth_threads()
        
        self.gui.update_step(0, "X√ÅC TH·ª∞C B·∫§T K·ª≤", "Ch·ªçn ph∆∞∆°ng th·ª©c x√°c th·ª±c", Colors.WARNING)
        self.gui.update_status("CH·∫æ ƒê·ªò TRUY C·∫¨P NHANH - S·ª¨ D·ª§NG B·∫§T K·ª≤ PH∆Ø∆†NG TH·ª®C N√ÄO", 'yellow')
        self.gui.update_detail("‚ö° Ch·∫ø ƒë·ªô truy c·∫≠p nhanh - ƒê∆°n l·∫ª\n‚úÖ Khu√¥n m·∫∑t ho·∫∑c üëÜ V√¢n tay ho·∫∑c üì± Th·∫ª t·ª´ ho·∫∑c üîë M·∫≠t kh·∫©u\nB·∫•t k·ª≥ ph∆∞∆°ng th·ª©c n√†o th√†nh c√¥ng ‚Üí M·ªü kh√≥a ngay", Colors.WARNING)
        
        # Reset detection stats
        self.gui.detection_stats = {"total": 0, "recognized": 0}
        
        # Start all authentication methods concurrently
        self._start_concurrent_authentication()
    
    def _start_concurrent_authentication(self):
        """Kh·ªüi ƒë·ªông t·∫•t c·∫£ ph∆∞∆°ng th·ª©c x√°c th·ª±c ƒë·ªìng th·ªùi"""
        with self.any_mode_lock:
            try:
                # Start face recognition
                if "face" not in self.any_mode_active_threads or not self.any_mode_active_threads["face"].is_alive():
                    self.any_mode_active_threads["face"] = threading.Thread(
                        target=self._any_mode_face_loop, daemon=True)
                    self.any_mode_active_threads["face"].start()
                    logger.debug("‚úÖ Face recognition thread started")
                
                # Start fingerprint scanning
                if "fingerprint" not in self.any_mode_active_threads or not self.any_mode_active_threads["fingerprint"].is_alive():
                    self.any_mode_active_threads["fingerprint"] = threading.Thread(
                        target=self._any_mode_fingerprint_loop, daemon=True)
                    self.any_mode_active_threads["fingerprint"].start()
                    logger.debug("‚úÖ Fingerprint thread started")
                
                # Start RFID scanning
                if "rfid" not in self.any_mode_active_threads or not self.any_mode_active_threads["rfid"].is_alive():
                    self.any_mode_active_threads["rfid"] = threading.Thread(
                        target=self._any_mode_rfid_loop, daemon=True)
                    self.any_mode_active_threads["rfid"].start()
                    logger.debug("‚úÖ RFID thread started")
                
                logger.info("‚úÖ T·∫•t c·∫£ ph∆∞∆°ng th·ª©c x√°c th·ª±c ƒë√£ s·∫µn s√†ng trong ch·∫ø ƒë·ªô Any")
                
                # Update GUI
                self.root.after(0, lambda: self.gui.update_detail(
                    "‚ö° T·∫§T C·∫¢ PH∆Ø∆†NG TH·ª®C ƒê√É S·∫¥N S√ÄNG:\nüë§ Khu√¥n m·∫∑t: ƒêang qu√©t li√™n t·ª•c\nüëÜ V√¢n tay: ƒê·∫∑t ng√≥n tay l√™n c·∫£m bi·∫øn\nüì± Th·∫ª t·ª´: ƒê∆∞a th·∫ª l·∫°i g·∫ßn ƒë·∫ßu ƒë·ªçc\nüîë M·∫≠t kh·∫©u: Nh·∫•n ph√≠m # ƒë·ªÉ nh·∫≠p", Colors.SUCCESS))
                
                # Bind keyboard for passcode input
                self.root.bind('<numbersign>', self._trigger_any_mode_passcode)
                self.root.bind('<KP_Add>', self._trigger_any_mode_passcode)
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông concurrent authentication: {e}")
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªói kh·ªüi ƒë·ªông: {str(e)}", Colors.ERROR))
    
    def _stop_all_auth_threads(self):
        """D·ª´ng t·∫•t c·∫£ thread x√°c th·ª±c"""
        try:
            with self.any_mode_lock:
                for thread_name, thread in self.any_mode_active_threads.items():
                    if thread and thread.is_alive():
                        logger.debug(f"üõë Stopping {thread_name} thread")
                        
                self.any_mode_active_threads.clear()
                
                # Unbind passcode triggers
                self.root.unbind('<numbersign>')
                self.root.unbind('<KP_Add>')
                
                logger.debug("‚úÖ All authentication threads stopped")
        except Exception as e:
            logger.error(f"‚ùå Error stopping auth threads: {e}")
    
    # ==== ANY MODE AUTHENTICATION LOOPS ====
    
    def _any_mode_face_loop(self):
        """Face recognition loop cho any mode"""
        logger.debug("üé≠ Any mode face loop started")
        consecutive_count = 0
        
        while (self.running and 
               self.auth_state.is_any_mode() and 
               self.auth_state.step != AuthStep.COMPLETED):
            try:
                # Capture frame
                frame = self.picam2.capture_array()
                if frame is None:
                    continue
                
                # X·ª≠ l√Ω nh·∫≠n di·ªán
                annotated_frame, result = self.face_recognizer.process_frame(frame)
                
                # C·∫≠p nh·∫≠t GUI
                self.root.after(0, lambda: self.gui.update_camera(annotated_frame, result))
                
                if result.recognized:
                    consecutive_count += 1
                    
                    if consecutive_count >= self.config.FACE_REQUIRED_CONSECUTIVE:
                        logger.info(f"‚úÖ Any mode face success: {result.person_name}")
                        
                        # SUCCESS - unlock immediately
                        self._any_mode_success("face", result.person_name, f"ƒê·ªô ch√≠nh x√°c: {result.confidence:.1f}")
                        return
                    else:
                        # Progress update
                        progress = consecutive_count / self.config.FACE_REQUIRED_CONSECUTIVE * 100
                        self.root.after(0, lambda: self.gui.update_detail(
                            f"üë§ KHU√îN M·∫∂T ƒêANG X√ÅC NH·∫¨N: {result.person_name}\nüìä Ti·∫øn ƒë·ªô: {consecutive_count}/{self.config.FACE_REQUIRED_CONSECUTIVE} ({progress:.0f}%)\nüéØ ƒê·ªô ch√≠nh x√°c: {result.confidence:.1f}/100\n‚ö° C√°c ph∆∞∆°ng th·ª©c kh√°c v·∫´n ho·∫°t ƒë·ªông", Colors.SUCCESS))
                else:
                    consecutive_count = 0
                
                time.sleep(self.config.FACE_DETECTION_INTERVAL)
                
            except Exception as e:
                logger.error(f"‚ùå Any mode face loop error: {e}")
                time.sleep(1)
        
        logger.debug("üõë Any mode face loop ended")
    
    def _any_mode_fingerprint_loop(self):
        """Fingerprint loop cho any mode"""
        logger.debug("üëÜ Any mode fingerprint loop started")
        
        while (self.running and 
               self.auth_state.is_any_mode() and 
               self.auth_state.step != AuthStep.COMPLETED):
            try:
                # Quick check for finger presence
                if self.fingerprint.readImage():
                    try:
                        self.fingerprint.convertImage(0x01)
                        result = self.fingerprint.searchTemplate()
                        
                        if result[0] != -1:
                            # SUCCESS
                            logger.info(f"‚úÖ Any mode fingerprint success: ID {result[0]}")
                            self._any_mode_success("fingerprint", f"ID {result[0]}", f"Template match: {result[1]}")
                            return
                        else:
                            # Not recognized, continue
                            logger.debug(f"üëÜ Fingerprint not recognized in any mode")
                            
                    except Exception as convert_error:
                        # Quality issues, continue
                        logger.debug(f"üëÜ Fingerprint quality issue: {convert_error}")
                
                time.sleep(0.5)  # Reasonable interval for continuous scanning
                
            except Exception as e:
                logger.error(f"‚ùå Any mode fingerprint error: {e}")
                time.sleep(2)
        
        logger.debug("üõë Any mode fingerprint loop ended")
    
    def _any_mode_rfid_loop(self):
        """RFID loop cho any mode"""
        logger.debug("üì± Any mode RFID loop started")
        
        while (self.running and 
               self.auth_state.is_any_mode() and 
               self.auth_state.step != AuthStep.COMPLETED):
            try:
                # Quick RFID scan
                uid = self.pn532.read_passive_target(timeout=2)
                
                if uid:
                    uid_list = list(uid)
                    logger.debug(f"üì± RFID detected in any mode: {uid_list}")
                    
                    # Check if admin card
                    if uid_list == self.config.ADMIN_UID:
                        self.root.after(0, lambda: self._admin_authentication())
                        return
                    
                    # Check if valid card
                    valid_uids = self.admin_data.get_rfid_uids()
                    if uid_list in valid_uids:
                        # SUCCESS
                        logger.info(f"‚úÖ Any mode RFID success: {uid_list}")
                        self._any_mode_success("rfid", f"UID {uid_list}", "Th·∫ª h·ª£p l·ªá")
                        return
                    else:
                        # Invalid card
                        logger.warning(f"üì± Invalid RFID in any mode: {uid_list}")
                        self.root.after(0, lambda: self.gui.update_detail(
                            f"üì± TH·∫∫ T·ª™ KH√îNG H·ª¢P L·ªÜ!\nüîç UID ph√°t hi·ªán: {uid_list}\n‚ùå Th·∫ª ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng\n‚ö° C√°c ph∆∞∆°ng th·ª©c kh√°c v·∫´n ho·∫°t ƒë·ªông", Colors.ERROR))
                
                time.sleep(1)  # Prevent rapid scanning
                
            except Exception as e:
                logger.error(f"‚ùå Any mode RFID error: {e}")
                time.sleep(3)
        
        logger.debug("üõë Any mode RFID loop ended")
    
    def _trigger_any_mode_passcode(self, event=None):
        """Trigger passcode input trong any mode"""
        if (self.auth_state.is_any_mode() and 
            self.auth_state.step != AuthStep.COMPLETED):
            
            logger.debug("üîë Triggering any mode passcode input")
            
            # Update GUI
            self.gui.update_detail(
                "üîë NH·∫¨P M·∫¨T KH·∫®U - CH·∫æ ƒê·ªò NHANH\nNh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng ƒë·ªÉ m·ªü kh√≥a ngay\nC√°c ph∆∞∆°ng th·ª©c kh√°c s·∫Ω t·∫°m d·ª´ng...", Colors.ACCENT)
            
            # Force focus
            self.root.focus_force()
            self.root.update()
            
            dialog = EnhancedNumpadDialog(
                self.root, 
                "üîë X√ÅC TH·ª∞C NHANH - M·∫¨T KH·∫®U",
                "Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng (Ch·∫ø ƒë·ªô ƒë∆°n l·∫ª):", 
                True, 
                self.buzzer
            )
            
            if hasattr(dialog, 'dialog'):
                dialog.dialog.focus_force()
                dialog.dialog.grab_set()
                dialog.dialog.lift()
            
            entered_pin = dialog.show()
            
            if entered_pin is None:
                # User cancelled
                self.gui.update_detail(
                    "üîë Nh·∫≠p m·∫≠t kh·∫©u ƒë√£ b·ªã h·ªßy\n‚ö° C√°c ph∆∞∆°ng th·ª©c kh√°c ti·∫øp t·ª•c ho·∫°t ƒë·ªông", Colors.WARNING)
                return
            
            # Verify passcode
            correct_passcode = self.admin_data.get_passcode()
            
            if entered_pin == correct_passcode:
                # SUCCESS
                logger.info("‚úÖ Any mode passcode success")
                self._any_mode_success("passcode", "M·∫≠t kh·∫©u ch√≠nh x√°c", f"ƒê·ªô d√†i: {len(entered_pin)} k√Ω t·ª±")
            else:
                # FAILURE
                logger.warning("‚ùå Any mode passcode failed")
                self.gui.update_detail(
                    f"üîë M·∫¨T KH·∫®U KH√îNG ƒê√öNG!\n‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp v·ªõi h·ªá th·ªëng\n‚ö° C√°c ph∆∞∆°ng th·ª©c kh√°c v·∫´n ho·∫°t ƒë·ªông\nüîÑ C√≥ th·ªÉ th·ª≠ l·∫°i b·∫±ng ph√≠m #", Colors.ERROR)
                self.buzzer.beep("error")
    
    def _any_mode_success(self, method: str, identifier: str, details: str):
        """X·ª≠ l√Ω th√†nh c√¥ng trong any mode"""
        try:
            with self.any_mode_lock:
                if self.auth_state.step == AuthStep.COMPLETED:
                    return  # Already completed
                
                self.auth_state.step = AuthStep.COMPLETED
                self.auth_state.any_mode_successes.append({
                    "method": method,
                    "identifier": identifier,
                    "details": details,
                    "timestamp": datetime.now().isoformat()
                })
            
            method_names = {
                "face": "üë§ NH·∫¨N DI·ªÜN KHU√îN M·∫∂T",
                "fingerprint": "üëÜ SINH TR·∫ÆC V√ÇN TAY",
                "rfid": "üì± TH·∫∫ T·ª™ RFID",
                "passcode": "üîë M·∫¨T KH·∫®U H·ªÜ TH·ªêNG"
            }
            
            method_display = method_names.get(method, method.upper())
            
            logger.info(f"üéâ ANY MODE SUCCESS: {method} - {identifier}")
            
            # Stop all other threads
            self._stop_all_auth_threads()
            
            # Update GUI
            self.gui.update_step(0, "X√ÅC TH·ª∞C TH√ÄNH C√îNG", f"{method_display} - HO√ÄN T·∫§T", Colors.SUCCESS)
            self.gui.update_status("X√ÅC TH·ª∞C TH√ÄNH C√îNG - ƒêANG M·ªû KH√ìA C·ª¨A", 'lightgreen')
            self.gui.update_detail(
                f"üéâ X√ÅC TH·ª∞C TH√ÄNH C√îNG!\n‚úÖ Ph∆∞∆°ng th·ª©c: {method_display}\nüÜî ƒê·ªãnh danh: {identifier}\nüìã Chi ti·∫øt: {details}\nüîì ƒêang m·ªü kh√≥a c·ª≠a...", Colors.SUCCESS)
            
            self.buzzer.beep("success")
            
            # Discord notification
            if self.discord_bot:
                discord_msg = f"‚ö° **X√ÅC TH·ª∞C ƒê∆†N L·∫∫ TH√ÄNH C√îNG**\n"
                discord_msg += f"‚úÖ **Ph∆∞∆°ng th·ª©c**: {method_display}\n"
                discord_msg += f"üÜî **ƒê·ªãnh danh**: {identifier}\n"
                discord_msg += f"üìã **Chi ti·∫øt**: {details}\n"
                discord_msg += f"üïê **Th·ªùi gian**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                discord_msg += f"üîì **Tr·∫°ng th√°i**: ƒêang m·ªü kh√≥a c·ª≠a"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(discord_msg,),
                    daemon=True
                ).start()
            
            # Unlock door
            self._unlock_door()
            
        except Exception as e:
            logger.error(f"‚ùå Error in _any_mode_success: {e}")
            self.gui.update_detail(f"L·ªói x·ª≠ l√Ω th√†nh c√¥ng: {str(e)}", Colors.ERROR)
        # ==== SEQUENTIAL MODE METHODS (Enhanced) ====
    
    def _face_recognition_loop(self):
        """V√≤ng l·∫∑p nh·∫≠n di·ªán khu√¥n m·∫∑t cho sequential mode"""
        logger.info("üõ°Ô∏è B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p nh·∫≠n di·ªán khu√¥n m·∫∑t - Sequential mode")
        consecutive_count = 0
        
        while self.running and self.auth_state.step == AuthStep.FACE:
            try:
                # Capture frame
                frame = self.picam2.capture_array()
                if frame is None:
                    continue
                
                # X·ª≠ l√Ω nh·∫≠n di·ªán
                annotated_frame, result = self.face_recognizer.process_frame(frame)
                
                # C·∫≠p nh·∫≠t GUI
                self.root.after(0, lambda: self.gui.update_camera(annotated_frame, result))
                
                if result.recognized:
                    consecutive_count += 1
                    self.auth_state.consecutive_face_ok = consecutive_count
                    
                    progress = consecutive_count / self.config.FACE_REQUIRED_CONSECUTIVE * 100
                    msg = f"ƒê√£ x√°c nh·∫≠n ({consecutive_count}/{self.config.FACE_REQUIRED_CONSECUTIVE}) - {progress:.0f}%"
                    
                    self.root.after(0, lambda: self.gui.update_step(1, "NH·∫¨N DI·ªÜN TH√ÄNH C√îNG", msg, Colors.SUCCESS))
                    self.root.after(0, lambda: self.gui.update_detail(
                        f"Danh t√≠nh: {result.person_name}\nƒêang x√°c minh... c√≤n {self.config.FACE_REQUIRED_CONSECUTIVE - consecutive_count} l·∫ßn\nƒê·ªô ch√≠nh x√°c: {result.confidence:.1f}/100", 
                        Colors.SUCCESS))
                    
                    if consecutive_count >= self.config.FACE_REQUIRED_CONSECUTIVE:
                        logger.info(f"‚úÖ Sequential face success: {result.person_name}")
                        self.buzzer.beep("success")
                        
                        # Discord success notification
                        if self.discord_bot:
                            threading.Thread(
                                target=self._send_discord_success,
                                args=("face", f"Nh·∫≠n di·ªán th√†nh c√¥ng: {result.person_name}"),
                                daemon=True
                            ).start()
                        
                        self.root.after(0, lambda: self.gui.update_status(f"‚úÖ B∆Ø·ªöC 1/4 HO√ÄN TH√ÄNH: {result.person_name.upper()}!", 'lightgreen'))
                        self.root.after(1500, self._proceed_to_fingerprint)
                        break
                        
                elif result.detected:
                    consecutive_count = 0
                    self.auth_state.consecutive_face_ok = 0
                    self.root.after(0, lambda: self.gui.update_step(1, "PH√ÅT HI·ªÜN KHU√îN M·∫∂T", "Khu√¥n m·∫∑t ch∆∞a ƒëƒÉng k√Ω", Colors.WARNING))
                    self.root.after(0, lambda: self.gui.update_detail(
                        "H·ªá th·ªëng ph√°t hi·ªán khu√¥n m·∫∑t nh∆∞ng ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu.\nƒê·ªô ch√≠nh x√°c ph√°t hi·ªán: {:.1f}\nVui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.".format(result.confidence), 
                        Colors.WARNING))
                else:
                    consecutive_count = 0
                    self.auth_state.consecutive_face_ok = 0
                    self.root.after(0, lambda: self.gui.update_step(1, "ƒêANG QU√âT", "T√¨m ki·∫øm khu√¥n m·∫∑t", Colors.PRIMARY))
                
                time.sleep(self.config.FACE_DETECTION_INTERVAL)
                
            except Exception as e:
                logger.error(f"‚ùå Sequential face loop error: {e}")
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªói h·ªá th·ªëng: {str(e)}", Colors.ERROR))
                time.sleep(1)
    
    def _proceed_to_fingerprint(self):
        """Chuy·ªÉn sang b∆∞·ªõc qu√©t v√¢n tay"""
        logger.info("üõ°Ô∏è Sequential mode: Chuy·ªÉn sang x√°c th·ª±c v√¢n tay")
        self.auth_state.step = AuthStep.FINGERPRINT
        self.auth_state.fingerprint_attempts = 0
        
        self.gui.update_step(2, "QU√âT V√ÇN TAY", "ƒê·∫∑t ng√≥n tay l√™n c·∫£m bi·∫øn", Colors.WARNING)
        self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 2/4: ƒêANG CH·ªú QU√âT V√ÇN TAY", 'yellow')
        self.gui.update_detail("Vui l√≤ng ƒë·∫∑t ng√≥n tay ƒë√£ ƒëƒÉng k√Ω l√™n c·∫£m bi·∫øn sinh tr·∫Øc h·ªçc.\nC·∫£m bi·∫øn ƒë√£ s·∫µn s√†ng ƒë·ªÉ qu√©t.", Colors.WARNING)
        
        threading.Thread(target=self._fingerprint_loop, daemon=True).start()
    
    def _fingerprint_loop(self):
        """ENHANCED: Fingerprint loop cho sequential mode"""
        while (self.auth_state.fingerprint_attempts < self.config.MAX_ATTEMPTS and 
            self.auth_state.step == AuthStep.FINGERPRINT):
            
            try:
                self.auth_state.fingerprint_attempts += 1
                attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state.fingerprint_attempts}/{self.config.MAX_ATTEMPTS}"
                
                self.root.after(0, lambda: self.gui.update_step(2, "QU√âT V√ÇN TAY", attempt_msg, Colors.WARNING))
                
                timeout = 10
                start_time = time.time()
                scan_success = False
                image_read_attempts = 0
                
                while time.time() - start_time < timeout:
                    try:
                        if self.fingerprint.readImage():
                            image_read_attempts += 1
                            
                            try:
                                self.fingerprint.convertImage(0x01)
                                result = self.fingerprint.searchTemplate()
                                
                                if result[0] != -1:
                                    # SUCCESS
                                    logger.info(f"‚úÖ Sequential fingerprint verified: ID {result[0]}")
                                    self.buzzer.beep("success")
                                    
                                    # Discord success notification
                                    if self.discord_bot:
                                        threading.Thread(
                                            target=self._send_discord_success,
                                            args=("fingerprint", f"V√¢n tay x√°c th·ª±c: ID {result[0]}"),
                                            daemon=True
                                        ).start()
                                    
                                    self.root.after(0, lambda: self.gui.update_status("‚úÖ B∆Ø·ªöC 2/4 HO√ÄN TH√ÄNH: V√ÇN TAY ƒê√É X√ÅC TH·ª∞C!", 'lightgreen'))
                                    self.root.after(1500, self._proceed_to_rfid)
                                    return
                                else:
                                    # Template not found
                                    logger.warning(f"‚ùå Sequential fingerprint not recognized: attempt {self.auth_state.fingerprint_attempts}")
                                    
                                    details = f"Template not found | Sensor reading: {result[1]} | Sequential mode step 2"
                                    self._send_discord_failure_alert("fingerprint", self.auth_state.fingerprint_attempts, details)
                                    
                                    self.buzzer.beep("error")
                                    remaining = self.config.MAX_ATTEMPTS - self.auth_state.fingerprint_attempts
                                    if remaining > 0:
                                        self.root.after(0, lambda: self.gui.update_detail(
                                            f"V√¢n tay kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!\nC√≤n {remaining} l·∫ßn th·ª≠\nVui l√≤ng th·ª≠ l·∫°i v·ªõi ng√≥n tay ƒë√£ ƒëƒÉng k√Ω.", Colors.ERROR))
                                        time.sleep(2)
                                        scan_success = True
                                        break
                                    
                            except Exception as convert_error:
                                error_msg = str(convert_error)
                                
                                if "too few feature points" in error_msg.lower():
                                    logger.debug(f"Fingerprint quality issue (attempt {image_read_attempts}): {error_msg}")
                                    
                                    if image_read_attempts >= 3:
                                        logger.info(f"Skipping quality error after {image_read_attempts} attempts")
                                        continue
                                    
                                    self.root.after(0, lambda: self.gui.update_detail(
                                        f"Ch·∫•t l∆∞·ª£ng v√¢n tay ch∆∞a ƒë·ªß t·ªët.\nVui l√≤ng ƒë·∫∑t ng√≥n tay ch·∫Øc ch·∫Øn h∆°n.", Colors.WARNING))
                                    time.sleep(0.5)
                                    continue
                                else:
                                    logger.error(f"Real fingerprint error: {error_msg}")
                                    details = f"Hardware/processing error: {error_msg}"
                                    self._send_discord_failure_alert("fingerprint", self.auth_state.fingerprint_attempts, details)
                                    
                                    self.root.after(0, lambda: self.gui.update_detail(f"L·ªói c·∫£m bi·∫øn: {error_msg}", Colors.ERROR))
                                    time.sleep(1)
                                    break
                        
                        time.sleep(0.1)
                        
                    except Exception as read_error:
                        logger.error(f"Fingerprint read error: {read_error}")
                        break
                
                # Check timeout
                if time.time() - start_time >= timeout and not scan_success:
                    details = f"Sequential mode timeout - step 2 | Read attempts: {image_read_attempts}"
                    logger.warning(f"Sequential fingerprint timeout: attempt {self.auth_state.fingerprint_attempts}")
                    
                    self._send_discord_failure_alert("fingerprint", self.auth_state.fingerprint_attempts, details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state.fingerprint_attempts
                    if remaining > 0:
                        self.root.after(0, lambda: self.gui.update_detail(
                            f"H·∫øt th·ªùi gian qu√©t!\nC√≤n {remaining} l·∫ßn th·ª≠\nVui l√≤ng ƒë·∫∑t ng√≥n tay ƒë√∫ng c√°ch l√™n c·∫£m bi·∫øn.", Colors.WARNING))
                        time.sleep(1)
                        
            except Exception as e:
                details = f"Sequential mode fingerprint error: {str(e)}"
                logger.error(f"‚ùå Sequential fingerprint general error: {e}")
                
                self._send_discord_failure_alert("fingerprint", self.auth_state.fingerprint_attempts, details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªói c·∫£m bi·∫øn: {str(e)}", Colors.ERROR))
                time.sleep(1)
        
        # Max attempts exceeded
        if self.auth_state.fingerprint_attempts >= self.config.MAX_ATTEMPTS:
            details = f"Sequential mode - max fingerprint attempts exceeded at step 2"
            logger.critical(f"Sequential fingerprint max attempts: {self.auth_state.fingerprint_attempts}")
            
            self._send_discord_failure_alert("fingerprint", self.auth_state.fingerprint_attempts, details)
        
        logger.warning("Sequential fingerprint: Maximum attempts exceeded")
        self.root.after(0, lambda: self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 2/4 TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange'))
        self.buzzer.beep("error")
        self.root.after(3000, self.start_authentication)
    
    def _proceed_to_rfid(self):
        """Chuy·ªÉn sang b∆∞·ªõc qu√©t th·∫ª RFID"""
        logger.info("üõ°Ô∏è Sequential mode: Chuy·ªÉn sang x√°c th·ª±c th·∫ª RFID")
        self.auth_state.step = AuthStep.RFID
        self.auth_state.rfid_attempts = 0
        
        self.gui.update_step(3, "QU√âT TH·∫∫ RFID", "ƒê∆∞a th·∫ª l·∫°i g·∫ßn ƒë·∫ßu ƒë·ªçc", Colors.ACCENT)
        self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 3/4: ƒêANG CH·ªú TH·∫∫ RFID", 'lightblue')
        self.gui.update_detail("Vui l√≤ng ƒë∆∞a th·∫ª RFID l·∫°i g·∫ßn ƒë·∫ßu ƒë·ªçc.\nƒê·∫ßu ƒë·ªçc ƒëang ho·∫°t ƒë·ªông v√† qu√©t th·∫ª.", Colors.ACCENT)
        
        threading.Thread(target=self._rfid_loop, daemon=True).start()
    
    def _rfid_loop(self):
        """V√≤ng l·∫∑p x√°c th·ª±c th·∫ª RFID cho sequential mode"""
        while (self.auth_state.rfid_attempts < self.config.MAX_ATTEMPTS and 
            self.auth_state.step == AuthStep.RFID):
            
            try:
                self.auth_state.rfid_attempts += 1
                attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state.rfid_attempts}/{self.config.MAX_ATTEMPTS}"
                
                self.root.after(0, lambda: self.gui.update_step(3, "QU√âT TH·∫∫ T·ª™", attempt_msg, Colors.ACCENT))
                self.root.after(0, lambda: self.gui.update_detail(
                    f"ƒêang qu√©t th·∫ª t·ª´... (L·∫ßn th·ª≠ {self.auth_state.rfid_attempts}/{self.config.MAX_ATTEMPTS})\nGi·ªØ th·∫ª trong kho·∫£ng 2-5cm t·ª´ ƒë·∫ßu ƒë·ªçc.", 
                    Colors.ACCENT))
                
                uid = self.pn532.read_passive_target(timeout=8)
                
                if uid:
                    uid_list = list(uid)
                    logger.info(f"RFID detected in sequential mode: {uid_list}")
                    
                    # Check admin card
                    if uid_list == self.config.ADMIN_UID:
                        self.root.after(0, lambda: self._admin_authentication())
                        return
                    
                    # Check regular cards
                    valid_uids = self.admin_data.get_rfid_uids()
                    if uid_list in valid_uids:
                        # SUCCESS
                        logger.info(f"‚úÖ Sequential RFID verified: {uid_list}")
                        self.buzzer.beep("success")
                        
                        # Discord success notification
                        if self.discord_bot:
                            threading.Thread(
                                target=self._send_discord_success,
                                args=("rfid", f"Th·∫ª t·ª´ x√°c th·ª±c: {uid_list}"),
                                daemon=True
                            ).start()
                        
                        self.root.after(0, lambda: self.gui.update_status("‚úÖ B∆Ø·ªöC 3/4 HO√ÄN TH√ÄNH: TH·∫∫ T·ª™ ƒê√É X√ÅC TH·ª∞C!", 'lightgreen'))
                        self.root.after(0, lambda: self.gui.update_detail(f"X√°c th·ª±c th·∫ª t·ª´ th√†nh c√¥ng!\nM√£ th·∫ª: {uid_list}\nChuy·ªÉn ƒë·∫øn b∆∞·ªõc nh·∫≠p m·∫≠t kh·∫©u cu·ªëi c√πng.", Colors.SUCCESS))
                        self.root.after(1500, self._proceed_to_passcode)
                        return
                    else:
                        # Invalid card
                        details = f"Sequential mode - invalid RFID | UID: {uid_list} | Step 3"
                        logger.warning(f"Sequential RFID invalid: {uid_list}")
                        
                        self._send_discord_failure_alert("rfid", self.auth_state.rfid_attempts, details)
                        
                        self.buzzer.beep("error")
                        remaining = self.config.MAX_ATTEMPTS - self.auth_state.rfid_attempts
                        
                        error_msg = f"TH·∫∫ T·ª™ KH√îNG ƒê∆Ø·ª¢C PH√âP!\nM√£ th·∫ª ph√°t hi·ªán: {uid_list}\nTh·∫ª ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng\n"
                        error_msg += f"C√≤n {remaining} l·∫ßn th·ª≠" if remaining > 0 else "H·∫øt l·∫ßn th·ª≠"
                        
                        self.root.after(0, lambda: self.gui.update_detail(error_msg, Colors.ERROR))
                        
                        if remaining > 0:
                            time.sleep(3)
                        else:
                            break
                else:
                    # No card detected
                    details = f"Sequential mode - no RFID detected | Step 3 | Timeout: 8s"
                    logger.warning(f"Sequential RFID timeout: attempt {self.auth_state.rfid_attempts}")
                    
                    self._send_discord_failure_alert("rfid", self.auth_state.rfid_attempts, details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state.rfid_attempts
                    
                    timeout_msg = f"KH√îNG PH√ÅT HI·ªÜN TH·∫∫!\nH·∫øt th·ªùi gian qu√©t sau 8 gi√¢y\nVui l√≤ng ƒë∆∞a th·∫ª g·∫ßn ƒë·∫ßu ƒë·ªçc h∆°n\n"
                    timeout_msg += f"C√≤n {remaining} l·∫ßn th·ª≠" if remaining > 0 else "H·∫øt l·∫ßn th·ª≠"
                    
                    self.root.after(0, lambda: self.gui.update_detail(timeout_msg, Colors.WARNING))
                    
                    if remaining > 0:
                        time.sleep(2)
                    else:
                        break
                    
            except Exception as e:
                details = f"Sequential mode RFID hardware error: {str(e)}"
                logger.error(f"Sequential RFID error: {e}")
                
                self._send_discord_failure_alert("rfid", self.auth_state.rfid_attempts, details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"L·ªñI ƒê·∫¶U ƒê·ªåC TH·∫∫ T·ª™!\n{str(e)}\nVui l√≤ng ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng", Colors.ERROR))
                time.sleep(2)
        
        # Max attempts exceeded
        if self.auth_state.rfid_attempts >= self.config.MAX_ATTEMPTS:
            details = f"Sequential mode - max RFID attempts exceeded at step 3"
            logger.critical(f"Sequential RFID max attempts: {self.auth_state.rfid_attempts}")
            
            self._send_discord_failure_alert("rfid", self.auth_state.rfid_attempts, details)
        
        logger.warning("Sequential RFID: Maximum attempts exceeded")
        self.root.after(0, lambda: self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 3/4 TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange'))
        self.root.after(0, lambda: self.gui.update_detail(
            "X√ÅC TH·ª∞C TH·∫∫ T·ª™ TH·∫§T B·∫†I!\nƒê√£ h·∫øt t·∫•t c·∫£ {} l·∫ßn th·ª≠\nƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\nS·ª± ki·ªán b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ghi l·∫°i".format(self.config.MAX_ATTEMPTS), Colors.ERROR))
        self.buzzer.beep("error")
        self.root.after(4000, self.start_authentication)
    
    def _proceed_to_passcode(self):
        """Chuy·ªÉn sang b∆∞·ªõc cu·ªëi - nh·∫≠p m·∫≠t kh·∫©u"""
        logger.info("üõ°Ô∏è Sequential mode: Chuy·ªÉn ƒë·∫øn b∆∞·ªõc x√°c th·ª±c m·∫≠t kh·∫©u cu·ªëi c√πng")
        self.auth_state.step = AuthStep.PASSCODE
        self.auth_state.pin_attempts = 0
        
        # Discord notification v·ªÅ b∆∞·ªõc cu·ªëi
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("üõ°Ô∏è **B∆Ø·ªöC X√ÅC TH·ª∞C CU·ªêI C√ôNG**\nƒêang chuy·ªÉn ƒë·∫øn nh·∫≠p m·∫≠t kh·∫©u\nNg∆∞·ªùi d√πng ƒë√£ v∆∞·ª£t qua 3/4 l·ªõp b·∫£o m·∫≠t sequential",),
                daemon=True
            ).start()
        
        self.gui.update_step(4, "NH·∫¨P M·∫¨T KH·∫®U CU·ªêI", "Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng", Colors.SUCCESS)
        self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 4/4: NH·∫¨P M·∫¨T KH·∫®U CU·ªêI C√ôNG", 'lightgreen')
        self.gui.update_detail(
            "B∆Ø·ªöC X√ÅC TH·ª∞C CU·ªêI C√ôNG - SEQUENTIAL MODE\n‚úÖ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n‚úÖ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n‚úÖ Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\nüîÑ M·∫≠t kh·∫©u: ƒêANG CH·ªú\n\nNh·∫≠p m·∫≠t kh·∫©u s·ªë ƒë·ªÉ ho√†n t·∫•t x√°c th·ª±c 4 l·ªõp.", 
            Colors.SUCCESS)
        
        self._request_passcode()

    def _request_passcode(self):
        """Nh·∫≠p m·∫≠t kh·∫©u cho sequential mode"""
        
        if self.auth_state.pin_attempts >= self.config.MAX_ATTEMPTS:
            details = f"Sequential mode - max passcode attempts exceeded at step 4"
            logger.critical(f"Sequential passcode max attempts: {self.auth_state.pin_attempts}")
            
            self._send_discord_failure_alert("passcode", self.auth_state.pin_attempts, details)
            
            logger.warning("Sequential passcode: Maximum attempts exceeded")
            self.gui.update_status("üõ°Ô∏è B∆Ø·ªöC 4/4 TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I", 'orange')
            self.gui.update_detail(
                "X√ÅC TH·ª∞C M·∫¨T KH·∫®U TH·∫§T B·∫†I!\nƒê√£ h·∫øt t·∫•t c·∫£ {} l·∫ßn th·ª≠\nNg∆∞·ªùi d√πng ƒë√£ v∆∞·ª£t qua t·∫•t c·∫£ l·ªõp b·∫£o m·∫≠t kh√°c\nƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\nS·ª± ki·ªán b·∫£o m·∫≠t nghi√™m tr·ªçng ƒë√£ ƒë∆∞·ª£c ghi l·∫°i".format(self.config.MAX_ATTEMPTS), Colors.ERROR)
            self.buzzer.beep("error")
            self.root.after(4000, self.start_authentication)
            return
        
        self.auth_state.pin_attempts += 1
        attempt_msg = f"L·∫ßn th·ª≠ {self.auth_state.pin_attempts}/{self.config.MAX_ATTEMPTS}"
        
        self.gui.update_step(4, "NH·∫¨P M·∫¨T KH·∫®U", attempt_msg, Colors.SUCCESS)
        self.gui.update_detail(
            f"Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng... (L·∫ßn th·ª≠ {self.auth_state.pin_attempts}/{self.config.MAX_ATTEMPTS})\n‚úÖ C√°c b∆∞·ªõc tr∆∞·ªõc ƒë√£ ho√†n th√†nh th√†nh c√¥ng\nüéØ S·ª≠ d·ª•ng b√†n ph√≠m s·ªë ƒë·ªÉ nh·∫≠p m√£\n‚ö†Ô∏è ƒê√¢y l√† b∆∞·ªõc x√°c th·ª±c cu·ªëi c√πng", Colors.SUCCESS)
        
        # Force focus
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(
            self.root, 
            "üõ°Ô∏è X√ÅC TH·ª∞C CU·ªêI C√ôNG - SEQUENTIAL",
            f"Nh·∫≠p m·∫≠t kh·∫©u h·ªá th·ªëng (L·∫ßn th·ª≠ {self.auth_state.pin_attempts}/{self.config.MAX_ATTEMPTS}):", 
            True, 
            self.buzzer
        )
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        entered_pin = dialog.show()
        
        if entered_pin is None:
            logger.info("Sequential passcode cancelled by user")
            self.gui.update_detail("‚ùå Vi·ªác nh·∫≠p m·∫≠t kh·∫©u ƒë√£ b·ªã h·ªßy\nüîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i x√°c th·ª±c...", Colors.WARNING)
            self.buzzer.beep("click")
            self.root.after(2000, self.start_authentication)
            return
        
        correct_passcode = self.admin_data.get_passcode()
        
        if entered_pin == correct_passcode:
            # SUCCESS
            logger.info("‚úÖ Sequential passcode verified - ALL 4 LAYERS COMPLETED!")
            self.gui.update_status("üõ°Ô∏è X√ÅC TH·ª∞C 4 L·ªöP HO√ÄN T·∫§T! ƒêANG M·ªû KH√ìA C·ª¨A", 'lightgreen')
            self.gui.update_detail(
                "üéâ X√ÅC TH·ª∞C SEQUENTIAL TH√ÄNH C√îNG!\n‚úÖ T·∫•t c·∫£ 4 l·ªõp b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c x√°c minh:\n  üë§ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n  üëÜ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n  üì± Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\n  üîë M·∫≠t kh·∫©u: TH√ÄNH C√îNG\n\nüîì ƒêang m·ªü kh√≥a c·ª≠a...", Colors.SUCCESS)
            self.buzzer.beep("success")
            
            # Discord success notification
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_success,
                    args=("passcode", "M·∫≠t kh·∫©u x√°c th·ª±c - Ho√†n th√†nh sequential mode"),
                    daemon=True
                ).start()
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üõ°Ô∏è **X√ÅC TH·ª∞C SEQUENTIAL HO√ÄN T·∫§T** - T·∫•t c·∫£ 4 l·ªõp ƒë√£ ƒë∆∞·ª£c x√°c minh th√†nh c√¥ng!",),
                    daemon=True
                ).start()
            
            self._unlock_door()
            
        else:
            # FAILURE
            remaining = self.config.MAX_ATTEMPTS - self.auth_state.pin_attempts
            
            details = f"Sequential mode - incorrect passcode | Expected length: {len(correct_passcode)}, Got: {len(entered_pin)} | Step 4 final"
            logger.warning(f"Sequential passcode incorrect: attempt {self.auth_state.pin_attempts}")
            
            self._send_discord_failure_alert("passcode", self.auth_state.pin_attempts, details)
            
            self.buzzer.beep("error")
            
            if remaining > 0:
                error_msg = f"M·∫¨T KH·∫®U KH√îNG ƒê√öNG!\nüî¢ M·∫≠t kh·∫©u kh√¥ng kh·ªõp v·ªõi h·ªì s∆° h·ªá th·ªëng\nüîÑ C√≤n {remaining} l·∫ßn th·ª≠\n‚ö†Ô∏è Vui l√≤ng x√°c minh m·∫≠t kh·∫©u v√† th·ª≠ l·∫°i\nüõ°Ô∏è L·∫ßn th·ª≠ n√†y ƒë√£ ƒë∆∞·ª£c ghi l·∫°i"
                
                self.gui.update_detail(error_msg, Colors.ERROR)
                self.root.after(2500, self._request_passcode)
            else:
                final_error_msg = f"üö´ X√ÅC TH·ª∞C M·∫¨T KH·∫®U TH·∫§T B·∫†I!\n‚ùå ƒê√£ h·∫øt t·∫•t c·∫£ {self.config.MAX_ATTEMPTS} l·∫ßn th·ª≠\n‚ö†Ô∏è Ng∆∞·ªùi d√πng ƒë√£ ho√†n th√†nh 3/4 l·ªõp b·∫£o m·∫≠t nh∆∞ng th·∫•t b·∫°i ·ªü b∆∞·ªõc cu·ªëi\nüîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i to√†n b·ªô quy tr√¨nh x√°c th·ª±c...\nüõ°Ô∏è Vi ph·∫°m b·∫£o m·∫≠t nghi√™m tr·ªçng ƒë√£ ƒë∆∞·ª£c ghi l·∫°i"
                
                self.gui.update_status("üõ°Ô∏è M·∫¨T KH·∫®U TH·∫§T B·∫†I - KH·ªûI ƒê·ªòNG L·∫†I X√ÅC TH·ª∞C", 'orange')
                self.gui.update_detail(final_error_msg, Colors.ERROR)
                self.root.after(4000, self.start_authentication)

    def _admin_authentication(self):
        """X√°c th·ª±c qu·∫£n tr·ªã n√¢ng cao qua th·∫ª t·ª´"""
        # Discord notification v·ªÅ vi·ªác truy c·∫≠p admin
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("üîß **PH√ÅT HI·ªÜN TH·∫∫ QU·∫¢N TR·ªä**\nTh·∫ª qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c qu√©t - y√™u c·∫ßu x√°c th·ª±c m·∫≠t kh·∫©u",),
                daemon=True
            ).start()
        
        # Stop all auth threads if in any mode
        if self.auth_state.is_any_mode():
            self._stop_all_auth_threads()
        
        # Force focus
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(
            self.root, 
            "üîß TRUY C·∫¨P QU·∫¢N TR·ªä VIA TH·∫∫ T·ª™",
            "ƒê√£ ph√°t hi·ªán th·∫ª qu·∫£n tr·ªã. Nh·∫≠p m·∫≠t kh·∫©u qu·∫£n tr·ªã:", 
            True, 
            self.buzzer
        )
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            # Admin auth success
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(f"‚úÖ **C·∫§P QUY·ªÄN TRUY C·∫¨P QU·∫¢N TR·ªä**\nQu·∫£n tr·ªã vi√™n ƒë√£ x√°c th·ª±c th√†nh c√¥ng qua th·∫ª t·ª´ + m·∫≠t kh·∫©u\nƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã v2.3.2",),
                    daemon=True
                ).start()
            
            logger.info("‚úÖ Admin authentication via RFID successful")
            self.gui.update_status("TH·∫∫ QU·∫¢N TR·ªä ƒê√É X√ÅC TH·ª∞C! ƒêANG M·ªû B·∫¢NG ƒêI·ªÄU KHI·ªÇN", 'lightgreen')
            self.gui.update_detail(
                "üîß X√ÅC TH·ª∞C QU·∫¢N TR·ªä TH√ÄNH C√îNG!\n‚úÖ Th·∫ª t·ª´ qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\n‚úÖ M·∫≠t kh·∫©u qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\nüéõÔ∏è ƒêang m·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã...", Colors.SUCCESS)
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
            
        elif password is not None:
            # Wrong admin password
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("‚ùå **T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä**\nTh·∫ª qu·∫£n tr·ªã ƒë√∫ng nh∆∞ng m·∫≠t kh·∫©u sai\n‚ö†Ô∏è C√≥ th·ªÉ c√≥ h√†nh vi truy c·∫≠p tr√°i ph√©p",),
                    daemon=True
                ).start()
            
            logger.warning("‚ùå Admin card detected but wrong password")
            self.gui.update_status("M·∫¨T KH·∫®U QU·∫¢N TR·ªä KH√îNG ƒê√öNG", 'orange')
            self.gui.update_detail(
                "‚ùå T·ª™ CH·ªêI TRUY C·∫¨P QU·∫¢N TR·ªä!\n‚úÖ Th·∫ª t·ª´ qu·∫£n tr·ªã ƒë√£ ƒë∆∞·ª£c x√°c minh\n‚ùå M·∫≠t kh·∫©u qu·∫£n tr·ªã kh√¥ng ƒë√∫ng\n‚ö†Ô∏è Vi ph·∫°m b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ghi l·∫°i\nüîÑ ƒêang quay v·ªÅ x√°c th·ª±c...", Colors.ERROR)
            self.buzzer.beep("error")
            time.sleep(3)
            self.start_authentication()
        else:
            # Admin cancelled
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üîÑ **H·ª¶Y TRUY C·∫¨P QU·∫¢N TR·ªä**\nQu·∫£n tr·ªã vi√™n ƒë√£ h·ªßy vi·ªác nh·∫≠p m·∫≠t kh·∫©u\nƒêang quay v·ªÅ x√°c th·ª±c b√¨nh th∆∞·ªùng",),
                    daemon=True
                ).start()
            
            logger.info("Admin access cancelled")
            self.gui.update_detail("üîÑ Truy c·∫≠p qu·∫£n tr·ªã ƒë√£ b·ªã h·ªßy\nƒêang quay v·ªÅ x√°c th·ª±c...", Colors.WARNING)
            self.start_authentication()
    
    # ==== ENHANCED HELPER METHODS ====
    
    def _send_discord_failure_alert(self, step, attempts, details=""):
        """ENHANCED: G·ª≠i Discord alert v·ªõi mode context"""
        def send_alert():
            try:
                if self.discord_bot and self.discord_bot.bot:
                    # Add mode context to details
                    mode_context = f"Auth Mode: {self.auth_state.auth_mode} | "
                    enhanced_details = mode_context + details
                    
                    asyncio.run(
                        self.discord_bot.send_authentication_failure_alert(step, attempts, enhanced_details)
                    )
                    logger.info(f"‚úÖ Discord failure alert sent: {step} (mode: {self.auth_state.auth_mode})")
                else:
                    logger.warning("Discord bot not available")
            except Exception as e:
                logger.error(f"Discord alert error: {e}")
        
        threading.Thread(target=send_alert, daemon=True).start()

    def _send_discord_success(self, step, details=""):
        """Enhanced helper function ƒë·ªÉ g·ª≠i Discord success notification"""
        def send_success():
            try:
                if self.discord_bot:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # Record the success
                    loop.run_until_complete(
                        self.discord_bot.record_authentication_success(step)
                    )
                    
                    # Send additional success notification with mode context
                    if details:
                        mode_info = f"Mode: {self.auth_state.auth_mode.upper()}"
                        success_message = f"‚úÖ **{step.upper()} X√ÅC TH·ª∞C TH√ÄNH C√îNG**\n{details}\nüîß {mode_info}"
                        loop.run_until_complete(
                            self.discord_bot.send_security_notification(success_message, "SUCCESS")
                        )
                    
                    loop.close()
                    logger.info(f"Discord success notification sent for {step} (mode: {self.auth_state.auth_mode})")
                    
            except Exception as e:
                logger.error(f"Discord success notification error for {step}: {e}")
        
        threading.Thread(target=send_success, daemon=True).start()

    def _unlock_door(self):
        """Enhanced door unlock v·ªõi mode-aware Discord notifications"""
        try:
            current_mode = self.auth_state.auth_mode
            logger.info(f"üîì ƒêang m·ªü kh√≥a c·ª≠a - Mode: {current_mode} - Duration: {self.config.LOCK_OPEN_DURATION}s")
            
            # Enhanced Discord notification v·ªõi mode info
            if self.discord_bot:
                if current_mode == "sequential":
                    unlock_message = f"üõ°Ô∏è **C·ª¨A ƒê√É M·ªû KH√ìA - SEQUENTIAL MODE**\n"
                    unlock_message += f"üéâ Ho√†n th√†nh x√°c th·ª±c 4 l·ªõp tu·∫ßn t·ª±:\n"
                    unlock_message += f"  ‚úÖ Nh·∫≠n di·ªán khu√¥n m·∫∑t: TH√ÄNH C√îNG\n"
                    unlock_message += f"  ‚úÖ Qu√©t v√¢n tay: TH√ÄNH C√îNG\n"
                    unlock_message += f"  ‚úÖ Qu√©t th·∫ª t·ª´: TH√ÄNH C√îNG\n"
                    unlock_message += f"  ‚úÖ M·∫≠t kh·∫©u: TH√ÄNH C√îNG\n\n"
                    unlock_message += f"üõ°Ô∏è ƒê·ªô b·∫£o m·∫≠t: CAO NH·∫§T (4 l·ªõp)\n"
                else:
                    unlock_message = f"‚ö° **C·ª¨A ƒê√É M·ªû KH√ìA - ANY MODE**\n"
                    unlock_message += f"üéØ X√°c th·ª±c ƒë∆°n l·∫ª th√†nh c√¥ng:\n"
                    for success in self.auth_state.any_mode_successes:
                        method_name = {
                            "face": "üë§ Khu√¥n m·∫∑t",
                            "fingerprint": "üëÜ V√¢n tay", 
                            "rfid": "üì± Th·∫ª t·ª´",
                            "passcode": "üîë M·∫≠t kh·∫©u"
                        }.get(success["method"], success["method"])
                        unlock_message += f"  ‚úÖ {method_name}: {success['identifier']}\n"
                    unlock_message += f"\n‚ö° ƒê·ªô b·∫£o m·∫≠t: TRUNG B√åNH (1 l·ªõp)\n"
                
                unlock_message += f"üïê C·ª≠a s·∫Ω t·ª± ƒë·ªông kh√≥a l·∫°i sau {self.config.LOCK_OPEN_DURATION} gi√¢y\n"
                unlock_message += f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(unlock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_step(4, "HO√ÄN T·∫§T", "C·ª¨A ƒê√É M·ªû KH√ìA", Colors.SUCCESS)
            self.gui.update_status(f"C·ª¨A ƒêANG M·ªû - T·ª∞ ƒê·ªòNG KH√ìA SAU {self.config.LOCK_OPEN_DURATION} GI√ÇY", 'lightgreen')
            
            # M·ªü kh√≥a c·ª≠a
            self.relay.off()  # Unlock door
            self.buzzer.beep("success")
            
            # ƒê·∫øm ng∆∞·ª£c v·ªõi hi·ªáu ·ª©ng h√¨nh ·∫£nh
            for i in range(self.config.LOCK_OPEN_DURATION, 0, -1):
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000, 
                            lambda t=i: self.gui.update_detail(
                                f"üîì C·ª¨A ƒêANG M·ªû\n‚è∞ T·ª± ƒë·ªông kh√≥a sau {t} gi√¢y\nüö∂ Vui l√≤ng v√†o v√† ƒë√≥ng c·ª≠a\nüîß Ch·∫ø ƒë·ªô: {current_mode.upper()}\nüõ°Ô∏è T·∫•t c·∫£ h·ªá th·ªëng b·∫£o m·∫≠t ƒëang ho·∫°t ƒë·ªông", Colors.SUCCESS))
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                            lambda t=i: self.gui.update_status(f"C·ª¨A M·ªû - KH√ìA SAU {t} GI√ÇY", 'lightgreen'))
                
                # Ti·∫øng b√≠p ƒë·∫øm ng∆∞·ª£c cho 3 gi√¢y cu·ªëi
                if i <= 3:
                    self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                                lambda: self.buzzer.beep("click"))
            
            # L√™n l·ªãch t·ª± ƒë·ªông kh√≥a
            self.root.after(self.config.LOCK_OPEN_DURATION * 1000, self._lock_door)
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói m·ªü kh√≥a c·ª≠a: {e}")
            
            # Enhanced error notification
            if self.discord_bot:
                error_message = f"‚ùå **L·ªñI M·ªû KH√ìA C·ª¨A**\n"
                error_message += f"üîß Mode: {self.auth_state.auth_mode}\n"
                error_message += f"üí• L·ªói: {str(e)}\n"
                error_message += f"‚ö†Ô∏è C√≥ th·ªÉ c·∫ßn can thi·ªáp th·ªß c√¥ng"
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(error_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üîß L·ªñI M·ªû KH√ìA C·ª¨A!\n{str(e)}\nVui l√≤ng ki·ªÉm tra ph·∫ßn c·ª©ng", Colors.ERROR)
            self.buzzer.beep("error")

    def _lock_door(self):
        """Enhanced door lock v·ªõi mode-aware notifications"""
        try:
            current_mode = self.auth_state.auth_mode
            logger.info(f"üîí ƒêang kh√≥a c·ª≠a v√† ƒë·∫∑t l·∫°i h·ªá th·ªëng - Mode: {current_mode}")
            
            # Kh√≥a c·ª≠a
            self.relay.on()  # Lock door
            
            # Enhanced Discord notification v·ªõi mode context
            if self.discord_bot:
                lock_message = f"üîí **C·ª¨A ƒê√É T·ª∞ ƒê·ªòNG KH√ìA**\n"
                lock_message += f"‚úÖ C·ª≠a ƒë√£ ƒë∆∞·ª£c b·∫£o m·∫≠t sau {self.config.LOCK_OPEN_DURATION} gi√¢y\n"
                lock_message += f"üîß Mode ƒë∆∞·ª£c s·ª≠ d·ª•ng: {current_mode.upper()}\n"
                lock_message += f"üîÑ H·ªá th·ªëng s·∫µn s√†ng cho ng∆∞·ªùi d√πng ti·∫øp theo\n"
                lock_message += f"üõ°Ô∏è T·∫•t c·∫£ l·ªõp b·∫£o m·∫≠t ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i\n"
                lock_message += f"üìÖ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(lock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_status("C·ª¨A ƒê√É KH√ìA - H·ªÜ TH·ªêNG S·∫¥N S√ÄNG CHO NG∆Ø·ªúI D√ôNG TI·∫æP THEO", 'white')
            self.gui.update_detail(
                "üîí C·ª¨A ƒê√É T·ª∞ ƒê·ªòNG KH√ìA\n‚úÖ H·ªá th·ªëng b·∫£o m·∫≠t ƒë√£ ƒë·∫∑t l·∫°i\nüîß Ch·∫ø ƒë·ªô hi·ªán t·∫°i: {}\nüîÑ S·∫µn s√†ng cho chu k·ª≥ x√°c th·ª±c ti·∫øp theo\nüõ°Ô∏è T·∫•t c·∫£ c·∫£m bi·∫øn ƒëang ho·∫°t ƒë·ªông v√† gi√°m s√°t".format(current_mode.upper()), Colors.PRIMARY)
            self.buzzer.beep("click")
            
            # Reset detection stats
            self.gui.detection_stats = {"total": 0, "recognized": 0}
            
            # Reset authentication state ho√†n to√†n
            self.auth_state.reset()
            
            # Stop any remaining threads for any mode
            if current_mode == "any":
                self._stop_all_auth_threads()
            
            # B·∫Øt ƒë·∫ßu chu k·ª≥ x√°c th·ª±c m·ªõi
            self.root.after(3000, self.start_authentication)
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√≥a c·ª≠a: {e}")
            
            # Enhanced critical error notification
            if self.discord_bot:
                critical_message = f"üö® **NGHI√äM TR·ªåNG: L·ªñI KH√ìA C·ª¨A**\n"
                critical_message += f"‚ùå Kh√¥ng th·ªÉ kh√≥a c·ª≠a: {str(e)}\n"
                critical_message += f"üîß Mode ƒëang ch·∫°y: {self.auth_state.auth_mode}\n"
                critical_message += f"‚ö†Ô∏è NGUY C∆† VI PH·∫†M B·∫¢O M·∫¨T\n"
                critical_message += f"üîß C·∫¶N CAN THI·ªÜP TH·ª¶ C√îNG NGAY L·∫¨P T·ª®C"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(critical_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üö® NGHI√äM TR·ªåNG: L·ªñI KH√ìA C·ª¨A!\n{str(e)}\n‚ö†Ô∏è C·∫ßn can thi·ªáp th·ªß c√¥ng", Colors.ERROR)
            self.buzzer.beep("error")
    
    def run(self):
        """Ch·∫°y h·ªá th·ªëng ch√≠nh v·ªõi enhanced dual mode support"""
        try:
            logger.info("üöÄ ƒêang kh·ªüi ƒë·ªông H·ªá th·ªëng Kh√≥a C·ª≠a Th√¥ng minh v2.3.2")

            if self.discord_bot:
                logger.info("ƒêang kh·ªüi ƒë·ªông Discord bot...")
                if self.discord_bot.start_bot():
                    logger.info("‚úÖ Discord bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
                else:
                    logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Discord bot")

            # Enhanced startup effects
            current_mode = self.admin_data.get_authentication_mode()
            mode_display = self.admin_data.get_mode_display_name()
            
            self.gui.update_status("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH v2.3.2 - S·∫¥N S√ÄNG!", 'lightgreen')
            self.gui.update_detail(f"H·ªá th·ªëng nh·∫≠n di·ªán ƒë√£ t·∫£i v√† s·∫µn s√†ng\nüîß Ch·∫ø ƒë·ªô x√°c th·ª±c: {mode_display}\nüõ°Ô∏è H·ªá th·ªëng b·∫£o m·∫≠t ƒëa l·ªõp ƒëang ho·∫°t ƒë·ªông\nüì± T√≠ch h·ª£p Discord bot ƒë√£ ƒë∆∞·ª£c b·∫≠t\n‚ö° Hi·ªáu su·∫•t n√¢ng cao cho Raspberry Pi 5", Colors.SUCCESS)
            
            self.buzzer.beep("startup")
            
            # Enhanced system info v·ªõi mode details
            face_info = self.face_recognizer.get_database_info()
            self.gui.update_detail(f"Tr·∫°ng th√°i h·ªá th·ªëng v2.3.2:\nüë§ Khu√¥n m·∫∑t ƒë√£ ƒëƒÉng k√Ω: {face_info['total_people']}\nüëÜ V√¢n tay: {len(self.admin_data.get_fingerprint_ids())}\nüì± Th·∫ª t·ª´: {len(self.admin_data.get_rfid_uids())}\nüîß Ch·∫ø ƒë·ªô: {mode_display}\nüéØ Tr·∫°ng th√°i nh·∫≠n di·ªán: S·∫µn s√†ng", Colors.SUCCESS)
            
            # Enhanced Discord startup notification
            if self.discord_bot:
                startup_msg = f"üöÄ **H·ªÜ TH·ªêNG KH√ìA C·ª¨A v2.3.2 ƒê√É KH·ªûI ƒê·ªòNG**\n"
                startup_msg += f"üîß **Ch·∫ø ƒë·ªô x√°c th·ª±c**: {mode_display}\n"
                startup_msg += f"üë§ **Khu√¥n m·∫∑t**: {face_info['total_people']} ng∆∞·ªùi\n"
                startup_msg += f"üëÜ **V√¢n tay**: {len(self.admin_data.get_fingerprint_ids())} m·∫´u\n"
                startup_msg += f"üì± **Th·∫ª t·ª´**: {len(self.admin_data.get_rfid_uids())} th·∫ª\n"
                startup_msg += f"üïê **Th·ªùi gian**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                startup_msg += f"üõ°Ô∏è **Tr·∫°ng th√°i**: S·∫µn s√†ng ho·∫°t ƒë·ªông"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(startup_msg,),
                    daemon=True
                ).start()
            
            # B·∫Øt ƒë·∫ßu x√°c th·ª±c sau 3 gi√¢y
            self.root.after(3000, self.start_authentication)
            
            # Setup cleanup
            self.root.protocol("WM_DELETE_WINDOW", self.cleanup)
            
            # Enhanced log
            logger.info(f"‚úÖ Main loop starting - Mode: {current_mode}")
            
            # B·∫Øt ƒë·∫ßu main loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            logger.info("H·ªá th·ªëng d·ª´ng theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Enhanced cleanup v·ªõi dual mode support"""
        logger.info("üßπ ƒêang d·ªçn d·∫πp t√†i nguy√™n h·ªá th·ªëng...")
        self.running = False
        
        try:
            # Stop all auth threads
            if hasattr(self, 'auth_state') and self.auth_state.is_any_mode():
                self._stop_all_auth_threads()
            
            # CLEANUP DISCORD BOT
            if hasattr(self, 'discord_bot') and self.discord_bot:
                # Send shutdown notification
                if self.discord_bot.bot:
                    shutdown_msg = f"üî¥ **H·ªÜ TH·ªêNG ƒêANG T·∫ÆT**\n"
                    shutdown_msg += f"üïê Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    shutdown_msg += f"üîß Ch·∫ø ƒë·ªô cu·ªëi: {getattr(self.auth_state, 'auth_mode', 'unknown')}\n"
                    shutdown_msg += f"üìä Phi√™n l√†m vi·ªác: K·∫øt th√∫c\n"
                    shutdown_msg += f"üîí Tr·∫°ng th√°i c·ª≠a: ƒê√£ kh√≥a an to√†n"
                    
                    try:
                        threading.Thread(
                            target=self._send_discord_notification,
                            args=(shutdown_msg,),
                            daemon=True
                        ).start()
                        time.sleep(1)  # Allow time for notification
                    except:
                        pass
                
                self.discord_bot.stop_bot()
                logger.info("Discord bot ƒë√£ d·ª´ng")
            
            if hasattr(self, 'picam2'):
                self.picam2.stop()
                logger.info("Camera ƒë√£ d·ª´ng")
                
            if hasattr(self, 'relay'):
                self.relay.on()  # Ensure door is locked
                logger.info("C·ª≠a ƒë√£ kh√≥a")
                
            if hasattr(self, 'buzzer') and hasattr(self.buzzer, 'buzzer') and self.buzzer.buzzer:
                self.buzzer.buzzer.off()
                logger.info("Buzzer ƒë√£ d·ª´ng")
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói cleanup: {e}")
        
        if hasattr(self, 'root'):
            self.root.quit()
        
        logger.info("‚úÖ Cleanup ho√†n t·∫•t - Dual mode system shutdown complete")

# ==== MAIN EXECUTION ====
if __name__ == "__main__":
    try:
        print("=" * 100)
        print("H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH 4 L·ªöP B·∫¢O M·∫¨T v2.3.2 - ENHANCED GUI INTERFACE")
        print("   üë§ T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp")
        print("   üìÖ Ng√†y c·∫≠p nh·∫≠t: 2025-07-04 09:24:13 UTC")
        print("   üßë‚Äçüíª C·∫≠p nh·∫≠t b·ªüi: Mautandew89")
        print("   üé® C·∫£i thi·ªán: Giao di·ªán g·ªçn g√†ng, √≠t ti·∫øng Anh, th√¥ng tin t·ªëi ∆∞u")
        print("=" * 100)
        print()
        print("üé® C·∫¢I THI·ªÜN HO√ÄN CH·ªàNH v2.3.2:")
        print("   ‚úì PH·∫¶N 1: Enhanced Components - Fixed admin selection dialog")
        print("   ‚úì PH·∫¶N 2: Simplified GUI interface - Vietnamese optimization")
        print("   ‚úì PH·∫¶N 3: Complete sequential + any mode implementation")
        print("   ‚úì Enhanced Discord integration v·ªõi mode-aware notifications")
        print("   ‚úì Improved error handling v√† logging")
        print("   ‚úì Optimized detection info display")
        print("   ‚úì Universal keyboard support")
        print("   ‚úì Backward compatibility 100%")
        print()
        print("üîß TECHNICAL IMPROVEMENTS:")
        print("   ‚úì AuthenticationState class v·ªõi dual mode support")
        print("   ‚úì Thread-safe concurrent authentication")
        print("   ‚úì Enhanced AdminDataManager v·ªõi mode persistence")
        print("   ‚úì Simplified GUI elements v√† reduced English text")
        print("   ‚úì Performance optimizations")
        print("   ‚úì Better focus management")
        print("   ‚úì Enhanced numpad support")
        print()
        print("4 L·ªöP B·∫¢O M·∫¨T (Sequential Mode):")
        print("   1. üë§ Nh·∫≠n di·ªán khu√¥n m·∫∑t (Camera AI)")
        print("   2. üëÜ Sinh tr·∫Øc h·ªçc v√¢n tay (AS608)")
        print("   3. üì± Th·∫ª t·ª´/NFC (PN532)")
        print("   4. üîë M·∫≠t kh·∫©u s·ªë (Numpad)")
        print()
        print("‚ö° X√ÅC TH·ª∞C ƒê∆†N L·∫∫ (Any Mode):")
        print("   ‚Ä¢ B·∫•t k·ª≥ 1 trong 4 ph∆∞∆°ng th·ª©c th√†nh c√¥ng ‚Üí M·ªü kh√≥a ngay")
        print("   ‚Ä¢ T·∫•t c·∫£ sensors ho·∫°t ƒë·ªông ƒë·ªìng th·ªùi")
        print("   ‚Ä¢ Truy c·∫≠p nhanh cho m√¥i tr∆∞·ªùng an to√†n")
        print()
        print("ƒêI·ªÄU KHI·ªÇN N√ÇNG CAO:")
        print("   * ho·∫∑c KP_* = Ch·∫ø ƒë·ªô qu·∫£n tr·ªã")
        print("   # ho·∫∑c KP_+ = B·∫Øt ƒë·∫ßu x√°c th·ª±c")
        print("   # (trong Any mode) = Nh·∫≠p m·∫≠t kh·∫©u nhanh")
        print("   ESC = Tho√°t h·ªá th·ªëng")
        print("   F11 = Chuy·ªÉn ƒë·ªïi to√†n m√†n h√¨nh")
        print("   F1 (trong admin) = Quick mode toggle")
        print()
        print("KI·ªÇM TRA PH·∫¶N C·ª®NG:")
        
        hardware_components = [
            ("CAM", "Camera Raspberry Pi Module 2"),
            ("VT", "C·∫£m bi·∫øn v√¢n tay AS608 (USB/UART)"),
            ("TH·∫∫", "ƒê·∫ßu ƒë·ªçc th·∫ª t·ª´ PN532 (I2C)"),
            ("KH√ìA", "Kh√≥a ƒëi·ªán t·ª´ + Relay 4 k√™nh"),
            ("BUZZER", "Buzzer n√¢ng cao (GPIO PWM)"),
            ("PH√çM", "B√†n ph√≠m s·ªë USB"),
            ("GUI", "Enhanced interface v2.3.2 - Vietnamese optimized"),
            ("AI", "Database khu√¥n m·∫∑t + authentication mode")
        ]
        
        for prefix, component in hardware_components:
            print(f"   {prefix}: {component}")
            time.sleep(0.2)
        
        print()
        print("ƒêANG KH·ªûI T·∫†O H·ªÜ TH·ªêNG v2.3.2 ...")
        print("=" * 100)
        
        # Kh·ªüi t·∫°o v√† ch·∫°y h·ªá th·ªëng
        system = VietnameseSecuritySystem()
        
        print()
        print("‚úÖ T·∫§T C·∫¢ TH√ÄNH PH·∫¶N ƒê√É S·∫¥N S√ÄNG!")
        print("‚úÖ Enhanced GUI interface loaded!")
        print("‚úÖ K·∫øt n·ªëi ph·∫ßn c·ª©ng th√†nh c√¥ng!")
        print("‚úÖ M√¥ h√¨nh AI v√† c·∫•u h√¨nh mode ƒë√£ ƒë∆∞·ª£c t·∫£i!")
        print("‚úÖ Discord integration active!")
        print("‚úÖ Vietnamese optimization complete!")
        print("=" * 100)
        print("üöÄ H·ªÜ TH·ªêNG v2.3.2 S·∫¥N S√ÄNG! B·∫ÆT ƒê·∫¶U S·ª¨ D·ª§NG...")
        print("=" * 100)
        
        system.run()
        
    except Exception as e:
        print()
        print("=" * 100)
        print(f"‚ùå L·ªñI KH·ªûI ƒê·ªòNG NGHI√äM TR·ªåNG v2.3.2: {e}")
        print()
        print("DANH S√ÅCH KI·ªÇM TRA KH·∫ÆC PH·ª§C:")
        
        troubleshooting_items = [
            ("HW", "Ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng v√† ngu·ªìn ƒëi·ªán"),
            ("MODEL", "ƒê·∫£m b·∫£o c√°c file m√¥ h√¨nh AI t·ªìn t·∫°i trong th∆∞ m·ª•c models/"),
            ("DATA", "Ki·ªÉm tra quy·ªÅn truy c·∫≠p th∆∞ m·ª•c face_data/ v√† admin_data.json"),
            ("CAM", "X√°c minh camera module ƒë∆∞·ª£c k·∫øt n·ªëi ƒë√∫ng"),
            ("VT", "C·∫£m bi·∫øn v√¢n tay AS608 tr√™n c·ªïng USB/UART"),
            ("TH·∫∫", "ƒê·∫ßu ƒë·ªçc PN532 tr√™n I2C (SCL/SDA)"),
            ("KH√ìA", "Relay module v√† kh√≥a ƒëi·ªán t·ª´"),
            ("BUZZER", "Buzzer PWM tr√™n GPIO 17"),
            ("NET", "K·∫øt n·ªëi m·∫°ng cho Discord integration"),
            ("MODE", "C·∫•u h√¨nh authentication mode trong admin_data.json"),
            ("GUI", "Tkinter v√† PIL dependencies cho enhanced interface"),
            ("PERM", "Quy·ªÅn sudo cho GPIO v√† hardware access"),
            ("LIB", "Th∆∞ vi·ªán Python: opencv, picamera2, gpiozero, pyfingerprint...")
        ]
        
        for prefix, item in troubleshooting_items:
            print(f"   [{prefix}] {item}")
        
        print()
        print("üîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("   1. Ch·∫°y: sudo python3 -m pip install -r requirements.txt")
        print("   2. Ki·ªÉm tra: sudo raspi-config ‚Üí Interface Options ‚Üí Enable I2C, SPI, Camera")
        print("   3. Ph·∫ßn c·ª©ng: ƒê·∫£m b·∫£o t·∫•t c·∫£ module ƒë∆∞·ª£c k·∫øt n·ªëi ƒë√∫ng v√† c√≥ ngu·ªìn")
        print("   4. Quy·ªÅn: Ch·∫°y v·ªõi sudo ho·∫∑c th√™m user v√†o group gpio, i2c")
        print("   5. C·∫•u h√¨nh: Ki·ªÉm tra file admin_data.json c√≥ authentication_mode")
        print("   6. GUI: Verify tkinter v√† PIL dependencies")
        print("   7. Testing: Ch·∫°y t·ª´ng module ri√™ng l·∫ª ƒë·ªÉ x√°c ƒë·ªãnh l·ªói c·ª• th·ªÉ")
        print()
        print("üìû H·ªñ TR·ª¢:")
        print("   üìß Email: support@khoisecurity.local")
        print("   üí¨ Discord: Check system logs v√† Discord bot status")
        print("   üìù Logs: /home/khoi/Desktop/KHOI_LUANAN/system.log")
        print("   üêõ Debug: Ch·∫°y v·ªõi logging.DEBUG ƒë·ªÉ xem chi ti·∫øt")
        print("   üé® GUI: Enhanced interface v2.3.2 troubleshooting")
        print()
        print("üîÑ TH·ª¨ L·∫†I:")
        print("   ‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i Raspberry Pi")
        print("   ‚Ä¢ Ch·∫°y: sudo systemctl restart khoi-security")
        print("   ‚Ä¢ Ho·∫∑c: python3 KETHOP2_AI_ENHANCED.py (manual)")
        print("   ‚Ä¢ Test GUI: python3 -c \"import tkinter; tkinter.Tk().mainloop()\"")
        print()
        
        import traceback
        print("STACK TRACE CHI TI·∫æT:")
        print("-" * 80)
        traceback.print_exc()
        print("-" * 80)
        
        print()
        print("‚ùå H·ªÜ TH·ªêNG v2.3.2 KH√îNG TH·ªÇ KH·ªûI ƒê·ªòNG!")
        print("‚ö†Ô∏è Vui l√≤ng ki·ªÉm tra v√† kh·∫Øc ph·ª•c c√°c l·ªói tr√™n tr∆∞·ªõc khi th·ª≠ l·∫°i.")
        print("üé® Enhanced GUI interface c√≥ th·ªÉ c·∫ßn dependencies b·ªï sung.")
        print("=" * 100)
        
        # Enhanced error logging
        logger.error(f"üí• CRITICAL SYSTEM STARTUP FAILURE v2.3.2: {e}")
        logger.error("üîß Enhanced GUI system failed to initialize")
        logger.error(f"üìÖ Failure timestamp: 2025-07-04 09:28:33 UTC")
        logger.error(f"üë§ User context: Mautandew89")
        logger.error("üìä Error context: Enhanced GUI dual authentication mode system")
        
        # Try to send Discord error notification if possible
        try:
            if 'system' in locals() and hasattr(system, 'discord_bot') and system.discord_bot:
                error_msg = f"üí• **CRITICAL SYSTEM FAILURE v2.3.2**\n"
                error_msg += f"‚ùå **Error**: {str(e)}\n"
                error_msg += f"üïê **Time**: 2025-07-04 09:28:33 UTC\n"
                error_msg += f"üë§ **User**: Mautandew89\n"
                error_msg += f"üîß **Context**: Enhanced GUI dual auth mode system startup\n"
                error_msg += f"üé® **GUI**: v2.3.2 interface initialization failure\n"
                error_msg += f"‚ö†Ô∏è **Status**: System offline - manual intervention required"
                
                # Try emergency Discord notification
                import asyncio
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(
                        system.discord_bot.send_security_notification(error_msg, "CRITICAL")
                    )
                    loop.close()
                    print("üì± Emergency Discord notification sent")
                except:
                    print("üì± Could not send Discord emergency notification")
        except:
            pass  # Ignore Discord errors during system failure
        
        exit(1)
    
    except KeyboardInterrupt:
        print()
        print("=" * 100)
        print("üõë H·ªÜ TH·ªêNG v2.3.2 D·ª™NG THEO Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG")
        print("üìÖ Th·ªùi gian d·ª´ng: 2025-07-04 09:28:33 UTC")
        print("üë§ Ng∆∞·ªùi d√πng: Mautandew89")
        print("üîß Tr·∫°ng th√°i: T·∫Øt an to√†n - Enhanced GUI")
        print("=" * 100)
        
        # Graceful shutdown logging
        logger.info("üõë User requested system shutdown via KeyboardInterrupt")
        logger.info("‚úÖ Enhanced GUI graceful shutdown sequence initiated")
        
        # Try to send shutdown notification
        try:
            if 'system' in locals() and hasattr(system, 'discord_bot') and system.discord_bot:
                shutdown_msg = f"üõë **H·ªÜ TH·ªêNG D·ª™NG AN TO√ÄN v2.3.2**\n"
                shutdown_msg += f"üë§ **Ng∆∞·ªùi d√πng**: Mautandew89\n"
                shutdown_msg += f"üïê **Th·ªùi gian**: 2025-07-04 09:28:33 UTC\n"
                shutdown_msg += f"üîß **L√Ω do**: Manual shutdown (Ctrl+C)\n"
                shutdown_msg += f"üé® **GUI**: Enhanced interface v2.3.2\n"
                shutdown_msg += f"‚úÖ **Tr·∫°ng th√°i**: Clean shutdown - Kh√¥ng m·∫•t d·ªØ li·ªáu"
                
                import asyncio
                try:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(
                        system.discord_bot.send_security_notification(shutdown_msg, "INFO")
                    )
                    loop.close()
                    print("üì± Shutdown notification sent to Discord")
                except:
                    pass
        except:
            pass
        
        print("‚úÖ T·∫Øt h·ªá th·ªëng enhanced GUI ho√†n t·∫•t an to√†n!")
        exit(0)
    
    finally:
        # Final cleanup regardless of how program exits
        try:
            if 'system' in locals():
                print("üßπ Th·ª±c hi·ªán cleanup cu·ªëi c√πng enhanced GUI...")
                system.cleanup()
                print("‚úÖ Enhanced GUI cleanup ho√†n t·∫•t")
        except:
            pass
        
        print()
        print("=" * 100)
        print("üèÅ H·ªÜ TH·ªêNG KH√ìA C·ª¨A TH√îNG MINH v2.3.2 - K·∫æT TH√öC")
        print("   üìÖ K·∫øt th√∫c: 2025-07-04 09:28:33 UTC")
        print("   üë§ Session user: Mautandew89")
        print("   üîß Version: Enhanced GUI Dual Authentication Mode")
        print("   üé® Interface: Vietnamese Optimized v2.3.2")
        print("   üìä Status: Program terminated")
        print("=" * 100)
        print("üôè C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng b·∫£o m·∫≠t Enhanced GUI c·ªßa Khoi!")
        print("üìß Ph·∫£n h·ªìi v√† g√≥p √Ω: support@khoisecurity.local")
        print("üéì Lu·∫≠n √°n t·ªët nghi·ªáp - ƒê·∫°i h·ªçc C√¥ng ngh·ªá Th√¥ng tin")
        print("üé® Enhanced GUI Interface - Optimized for Vietnamese users")
        print("=" * 100)
