#!/usr/bin/env python3
"""
H·ªÜ TH·ªêNG KH√ìA B·∫¢O M·∫¨T 4 L·ªöP - AI ENHANCED VERSION (FIXED)
T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp
Ng√†y c·∫≠p nh·∫≠t: 2025-01-16
Phi√™n b·∫£n: v2.1 - Fixed Focus Issues & Removed Icons
"""

import cv2
import time
import json
import os
import logging
import threading
import tkinter as tk
from tkinter import ttk, font
from PIL import Image, ImageTk
from datetime import datetime
from typing import Optional, List, Dict, Any
from dataclasses import dataclass
from enum import Enum
import sys
import numpy as np
import asyncio

# Import modules c·ªßa d·ª± √°n
try:
    from improved_face_recognition import ImprovedFaceRecognition, FaceDetectionResult
    from enhanced_components import (
        Colors, EnhancedBuzzerManager, EnhancedNumpadDialog, 
        EnhancedMessageBox, AdminDataManager, ImprovedAdminGUI
    )
    from discord_integration import DiscordSecurityBot  # TH√äM D√íNG N√ÄY
except ImportError as e:
    print(f"‚ùå L·ªói import modules: {e}")
    print("üîß ƒê·∫£m b·∫£o c√°c file sau t·ªìn t·∫°i:")
    print("   - improved_face_recognition.py")
    print("   - enhanced_components.py")
    print("   - discord_integration.py")  # TH√äM D√íNG N√ÄY
    sys.exit(1)

# Hardware imports
try:
    from picamera2 import Picamera2
    from gpiozero import LED, PWMOutputDevice
    from pyfingerprint.pyfingerprint import PyFingerprint
    import board
    import busio
    from adafruit_pn532.i2c import PN532_I2C
except ImportError as e:
    logging.error(f"Kh√¥ng th·ªÉ import th∆∞ vi·ªán ph·∫ßn c·ª©ng: {e}")
    print("‚ö†Ô∏è Hardware import failed - running in simulation mode")
    
    # Mock hardware classes for testing
    class MockPicamera2:
        def configure(self, config): pass
        def start(self): pass
        def stop(self): pass
        def capture_array(self): 
            return np.zeros((600, 800, 3), dtype=np.uint8)
    
    class MockLED:
        def __init__(self, pin): self.state = True
        def on(self): self.state = True
        def off(self): self.state = False
    
    class MockPN532:
        def SAM_configuration(self): pass
        def read_passive_target(self, timeout=1): return None
    
    class MockFingerprint:
        def verifyPassword(self): return True
        def readImage(self): return False
        def convertImage(self, slot): pass
        def searchTemplate(self): return (-1, 0)
        def createTemplate(self): pass
        def storeTemplate(self, pos, slot): pass
        def deleteTemplate(self, pos): pass
        def loadTemplate(self, pos, slot): pass
    
    # Use mock classes
    Picamera2 = MockPicamera2
    LED = MockLED
    
    # Mock board and busio
    class MockBoard:
        SCL = None
        SDA = None
    
    class MockBusIO:
        def I2C(self, scl, sda): return None
    
    board = MockBoard()
    busio = MockBusIO()
    PN532_I2C = lambda i2c, debug=False: MockPN532()
    PyFingerprint = lambda *args, **kwargs: MockFingerprint()

# ==== CONFIGURATION ====
@dataclass
class Config:
    # Paths
    PROJECT_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    MODELS_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/models"
    FACE_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN/face_data"
    ADMIN_DATA_PATH: str = "/home/khoi/Desktop/KHOI_LUANAN"
    
    # GPIO
    BUZZER_GPIO: int = 17
    RELAY_GPIO: int = 5
    
    # Face Recognition - AI Enhanced
    FACE_CONFIDENCE_THRESHOLD: float = 0.5
    FACE_RECOGNITION_THRESHOLD: float = 85.0
    FACE_REQUIRED_CONSECUTIVE: int = 5
    FACE_DETECTION_INTERVAL: float = 0.03  # ~33 FPS
    
    # Camera - Enhanced Quality
    CAMERA_WIDTH: int = 800
    CAMERA_HEIGHT: int = 600
    DISPLAY_WIDTH: int = 650
    DISPLAY_HEIGHT: int = 490
    
    # Admin
    ADMIN_UID: List[int] = None
    ADMIN_PASS: str = "0809"
    
    # Timing
    LOCK_OPEN_DURATION: int = 3
    MAX_ATTEMPTS: int = 5
    
    def __post_init__(self):
        if self.ADMIN_UID is None:
            self.ADMIN_UID = [0xe5, 0xa8, 0xbd, 0x2]
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        for path in [self.MODELS_PATH, self.FACE_DATA_PATH, self.ADMIN_DATA_PATH]:
            os.makedirs(path, exist_ok=True)

class AuthStep(Enum):
    FACE = "face"
    FINGERPRINT = "fingerprint"
    RFID = "rfid"
    PASSCODE = "passcode"
    ADMIN = "admin"

# ==== LOGGING SETUP ====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/home/khoi/Desktop/KHOI_LUANAN/system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==== ENHANCED GUI - FIXED FOCUS & NO ICONS ====
class AIEnhancedSecurityGUI:
    def __init__(self, root):
        self.root = root
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.current_fps = 0
        self.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
        
        self._setup_window()
        self._create_widgets()
        self._setup_bindings()
    
    def _setup_window(self):
        self.root.title("HE THONG KHOA BAO MAT AI - PHIEN BAN 2.1")  # X√ìA ICON
        self.root.geometry("1500x900")
        self.root.configure(bg=Colors.DARK_BG)
        self.root.attributes('-fullscreen', True)
        self.root.minsize(1200, 800)
    
    def _create_widgets(self):
        # Main container
        main_container = tk.Frame(self.root, bg=Colors.DARK_BG)
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        main_container.grid_columnconfigure(0, weight=2)  # Camera gets more space
        main_container.grid_columnconfigure(1, weight=1)
        main_container.grid_rowconfigure(0, weight=1)
        
        # LEFT - AI CAMERA PANEL
        self._create_ai_camera_panel(main_container)
        
        # RIGHT - STATUS PANEL
        self._create_status_panel(main_container)
        
        # BOTTOM - STATUS BAR
        self._create_status_bar()
    
    def _create_ai_camera_panel(self, parent):
        camera_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        camera_panel.grid(row=0, column=0, padx=(0,10), pady=0, sticky="nsew")
        
        # Header - X√ìA ICON
        header = tk.Frame(camera_panel, bg=Colors.PRIMARY, height=100)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        # Left side - title - X√ìA ICON
        header_left = tk.Frame(header, bg=Colors.PRIMARY)
        header_left.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(header_left, text="AI FACE DETECTION SYSTEM",  # X√ìA ICON ü§ñ
                font=('Arial', 26, 'bold'), fg='white', bg=Colors.PRIMARY,
                anchor='w').pack(side=tk.LEFT, padx=20, expand=True, fill=tk.X)
        
        # Right side - stats
        stats_frame = tk.Frame(header, bg=Colors.PRIMARY)
        stats_frame.pack(side=tk.RIGHT, padx=20)
        
        self.fps_label = tk.Label(stats_frame, text="FPS: --", 
                                 font=('Arial', 16, 'bold'), fg='white', bg=Colors.PRIMARY)
        self.fps_label.pack()
        
        self.detection_count_label = tk.Label(stats_frame, text="Detected: 0", 
                                            font=('Arial', 14), fg='white', bg=Colors.PRIMARY)
        self.detection_count_label.pack()
        
        # Camera display - MUCH LARGER
        self.camera_frame = tk.Frame(camera_panel, bg='black', relief=tk.SUNKEN, bd=4)
        self.camera_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # X√ìA ICON TRONG CAMERA LABEL
        self.camera_label = tk.Label(self.camera_frame, 
                                   text="ƒêang kh·ªüi ƒë·ªông AI Camera System...\n\nOpenCV DNN Loading...",  # X√ìA ICON
                                   font=('Arial', 22), fg='white', bg='black')
        self.camera_label.pack(expand=True)
        
        # AI Status bar - X√ìA ICON
        ai_status_frame = tk.Frame(camera_panel, bg=Colors.CARD_BG, height=80)
        ai_status_frame.pack(fill=tk.X, pady=10)
        ai_status_frame.pack_propagate(False)
        
        self.ai_status = tk.Label(ai_status_frame, text="AI System Initializing...",  # X√ìA ICON ü§ñ
                                 font=('Arial', 18, 'bold'), 
                                 fg=Colors.PRIMARY, bg=Colors.CARD_BG)
        self.ai_status.pack(expand=True)
        
        self.detection_info = tk.Label(ai_status_frame, text="Preparing neural networks...",  # X√ìA ICON üîç
                                      font=('Arial', 16), 
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.detection_info.pack()
    
    def _create_status_panel(self, parent):
        status_panel = tk.Frame(parent, bg=Colors.CARD_BG, relief=tk.RAISED, bd=4)
        status_panel.grid(row=0, column=1, padx=(10,0), pady=0, sticky="nsew")
        
        # Header - X√ìA ICON
        header = tk.Frame(status_panel, bg=Colors.SUCCESS, height=100)
        header.pack(fill=tk.X, padx=4, pady=4)
        header.pack_propagate(False)
        
        tk.Label(header, text="TRANG THAI AUTHENTICATION",  # X√ìA ICON üìä
                font=('Arial', 22, 'bold'), fg='white', bg=Colors.SUCCESS).pack(expand=True)
        
        # Current step - LARGER
        self.step_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        self.step_frame.pack(fill=tk.X, padx=25, pady=25)
        
        self.step_number = tk.Label(self.step_frame, text="1", 
                                   font=('Arial', 52, 'bold'),
                                   fg='white', bg=Colors.PRIMARY,
                                   width=2, relief=tk.RAISED, bd=5)
        self.step_number.pack(side=tk.LEFT, padx=(0,25))
        
        step_info = tk.Frame(self.step_frame, bg=Colors.CARD_BG)
        step_info.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        self.step_title = tk.Label(step_info, text="AI FACE RECOGNITION",  # X√ìA ICON ü§ñ
                                  font=('Arial', 30, 'bold'),
                                  fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                                  anchor='w')
        self.step_title.pack(fill=tk.X)
        
        self.step_subtitle = tk.Label(step_info, text="Neural network ƒëang ph√¢n t√≠ch...",
                                     font=('Arial', 20),
                                     fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG,
                                     anchor='w')
        self.step_subtitle.pack(fill=tk.X)
        
        # Progress indicators - X√ìA ICON
        progress_frame = tk.Frame(status_panel, bg=Colors.CARD_BG)
        progress_frame.pack(fill=tk.X, padx=25, pady=20)
        
        tk.Label(progress_frame, text="TIEN TRINH XAC THUC:",  # X√ìA ICON üîÑ
                font=('Arial', 22, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG).pack(anchor='w')
        
        steps_frame = tk.Frame(progress_frame, bg=Colors.CARD_BG)
        steps_frame.pack(fill=tk.X, pady=15)
        
        self.step_indicators = {}
        # X√ìA T·∫§T C·∫¢ ICON
        names = ["AI RECOGNITION", "FINGERPRINT", "RFID CARD", "PASSCODE"]
        
        for i, name in enumerate(names):
            container = tk.Frame(steps_frame, bg=Colors.CARD_BG)
            container.pack(fill=tk.X, pady=8)
            
            circle = tk.Label(container, text=f"{i+1}",
                             font=('Arial', 22, 'bold'),
                             fg='white', bg=Colors.TEXT_SECONDARY,
                             width=3, relief=tk.RAISED, bd=4)
            circle.pack(side=tk.LEFT, padx=(0,20))
            
            label = tk.Label(container, text=name,  # CH·ªà TEXT, KH√îNG ICON
                            font=('Arial', 20, 'bold'),
                            fg=Colors.TEXT_PRIMARY, bg=Colors.CARD_BG,
                            anchor='w')
            label.pack(side=tk.LEFT, fill=tk.X, expand=True)
            
            self.step_indicators[i+1] = {
                'circle': circle,
                'label': label
            }
        
        # AI Details area - X√ìA ICON
        msg_frame = tk.Frame(status_panel, bg=Colors.BACKGROUND, relief=tk.SUNKEN, bd=4)
        msg_frame.pack(fill=tk.X, padx=25, pady=20)
        
        tk.Label(msg_frame, text="AI ANALYSIS DETAILS:",  # X√ìA ICON üß†
                font=('Arial', 18, 'bold'),
                fg=Colors.TEXT_PRIMARY, bg=Colors.BACKGROUND).pack(anchor='w', padx=20, pady=(15,8))
        
        self.detail_message = tk.Label(msg_frame, text="Kh·ªüi ƒë·ªông neural networks...\nLoading OpenCV DNN models...",  # X√ìA ICON
                                      font=('Arial', 16),
                                      fg=Colors.TEXT_SECONDARY, bg=Colors.BACKGROUND,
                                      wraplength=450, justify=tk.LEFT, anchor='w')
        self.detail_message.pack(fill=tk.X, padx=20, pady=(0,15))
        
        # Time display - X√ìA ICON
        self.time_label = tk.Label(status_panel, text="",
                                  font=('Arial', 16),
                                  fg=Colors.TEXT_SECONDARY, bg=Colors.CARD_BG)
        self.time_label.pack(side=tk.BOTTOM, pady=10)
        
        self._update_time()
    
    def _create_status_bar(self):
        status_bar = tk.Frame(self.root, bg=Colors.PRIMARY, height=90)
        status_bar.pack(fill=tk.X, side=tk.BOTTOM, padx=20, pady=(0,20))
        status_bar.pack_propagate(False)
        
        # X√ìA ICON TRONG STATUS BAR
        self.main_status = tk.Label(status_bar, 
                                   text="AI ENHANCED SECURITY SYSTEM v2.1 - INITIALIZING...",  # X√ìA ICON ü§ñ
                                   font=('Arial', 22, 'bold'),
                                   fg='white', bg=Colors.PRIMARY)
        self.main_status.pack(expand=True)
    
    def _setup_bindings(self):
        self.root.bind('<Key>', self._on_key)
        self.root.bind('<F11>', lambda e: self.root.attributes('-fullscreen', 
                                                              not self.root.attributes('-fullscreen')))
        self.root.focus_set()
    
    def _on_key(self, event):
        key = event.keysym
        if key == 'asterisk' or key == 'KP_Multiply':
            if hasattr(self, 'system_ref'):
                self.system_ref._force_admin_mode()
        elif key == 'numbersign' or key == 'KP_Add':
            if hasattr(self, 'system_ref'):
                self.system_ref.start_authentication()
        elif key == 'Escape':
            if hasattr(self, 'system_ref') and hasattr(self.system_ref, 'buzzer'):
                if EnhancedMessageBox.ask_yesno(self.root, "Tho√°t h·ªá th·ªëng", 
                                            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?", self.system_ref.buzzer):
                    self.root.quit()
    
    def _update_time(self):
        # X√ìA ICON TRONG TIME
        current_time = datetime.now().strftime("%H:%M:%S - %d/%m/%Y")
        self.time_label.config(text=current_time)
        self.root.after(1000, self._update_time)
    
    def update_camera(self, frame: np.ndarray, detection_result: Optional[FaceDetectionResult] = None):
        """Update camera display v·ªõi AI feedback n√¢ng cao"""
        try:
            # Calculate FPS
            self.fps_counter += 1
            current_time = time.time()
            if current_time - self.fps_start_time >= 1.0:
                self.current_fps = self.fps_counter
                self.fps_counter = 0
                self.fps_start_time = current_time
                self.fps_label.config(text=f"FPS: {self.current_fps}")
            
            # Update detection statistics
            if detection_result:
                self.detection_stats["total"] += 1
                if detection_result.recognized:
                    self.detection_stats["recognized"] += 1
                elif detection_result.detected:
                    self.detection_stats["unknown"] += 1
                
                self.detection_count_label.config(
                    text=f"Total: {self.detection_stats['total']} | OK: {self.detection_stats['recognized']}"
                )
            
            # Resize frame for display
            height, width = frame.shape[:2]
            display_height = Config.DISPLAY_HEIGHT
            display_width = int(width * display_height / height)
            
            img = cv2.resize(frame, (display_width, display_height))
            rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            img_pil = Image.fromarray(rgb_img)
            img_tk = ImageTk.PhotoImage(img_pil)
            
            self.camera_label.config(image=img_tk, text="")
            self.camera_label.image = img_tk
            
            # Update AI status based on detection result - X√ìA ICON
            if detection_result:
                if detection_result.detected:
                    if detection_result.recognized:
                        self.ai_status.config(
                            text=f"AI CONFIRMED: {detection_result.person_name}",  # X√ìA ICON ‚úÖ
                            fg=Colors.SUCCESS
                        )
                        self.detection_info.config(
                            text=f"Confidence: {detection_result.confidence:.1f} | Status: AUTHORIZED",  # X√ìA ICON üéØ
                            fg=Colors.SUCCESS
                        )
                    else:
                        self.ai_status.config(
                            text="AI DETECTED: UNAUTHORIZED FACE",  # X√ìA ICON ‚ùå
                            fg=Colors.ERROR
                        )
                        self.detection_info.config(
                            text="Face detected but not in database | Access denied",  # X√ìA ICON ‚ö†Ô∏è
                            fg=Colors.ERROR
                        )
                else:
                    self.ai_status.config(
                        text="AI SCANNING: Searching for faces...",  # X√ìA ICON üîç
                        fg=Colors.WARNING
                    )
                    self.detection_info.config(
                        text="Neural networks analyzing video stream...",  # X√ìA ICON üëÅÔ∏è
                        fg=Colors.TEXT_SECONDARY
                    )
            
        except Exception as e:
            logger.error(f"Error updating camera: {e}")
    
    def update_step(self, step_num, title, subtitle, color=None):
        if color is None:
            color = Colors.PRIMARY
            
        self.step_number.config(text=str(step_num), bg=color)
        self.step_title.config(text=title)
        self.step_subtitle.config(text=subtitle)
        
        # Update progress indicators
        for i in range(1, 5):
            indicator = self.step_indicators[i]
            if i < step_num:
                indicator['circle'].config(bg=Colors.SUCCESS)
                indicator['label'].config(fg=Colors.TEXT_PRIMARY)
            elif i == step_num:
                indicator['circle'].config(bg=color)
                indicator['label'].config(fg=Colors.TEXT_PRIMARY)
            else:
                indicator['circle'].config(bg=Colors.TEXT_SECONDARY)
                indicator['label'].config(fg=Colors.TEXT_SECONDARY)
    
    def update_status(self, message, color=None):
        if color is None:
            color = 'white'
        # X√ìA ICON TRONG STATUS
        self.main_status.config(text=message, fg=color)
    
    def update_detail(self, message, color=None):
        if color is None:
            color = Colors.TEXT_SECONDARY
        self.detail_message.config(text=message, fg=color)
    
    def set_system_reference(self, system):
        self.system_ref = system

# ==== AI ENHANCED SECURITY SYSTEM - FIXED FOCUS ====
class AIEnhancedSecuritySystem:
    
    def _init_discord_bot(self):
        """Kh·ªüi t·∫°o Discord bot integration"""
        try:
            logger.info("Kh·ªüi t·∫°o Discord bot integration...")
            
            self.discord_bot = DiscordSecurityBot(self)
            
            logger.info("Discord bot integration ƒë√£ s·∫µn s√†ng")
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o Discord bot: {e}")
            logger.info("Ti·∫øp t·ª•c ch·∫°y m√† kh√¥ng c√≥ Discord bot...")
            self.discord_bot = None
    def _send_discord_notification(self, message):
        """Helper function ƒë·ªÉ g·ª≠i Discord notification t·ª´ sync context"""
        try:
            if self.discord_bot and self.discord_bot.bot:
                # T·∫°o event loop m·ªõi cho thread n√†y
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Ch·∫°y notification
                loop.run_until_complete(self.discord_bot.send_notification(message))
                loop.close()
                
        except Exception as e:
            logger.error(f"Discord notification error: {e}")       
    def __init__(self):
        self.config = Config()
        logger.info("Kh·ªüi t·∫°o AI Enhanced Security System...")  # X√ìA ICON ü§ñ
        
        self._init_hardware()
        self._init_components()
        self._init_gui()

        self._init_discord_bot()

        
        self.auth_state = {
            "step": AuthStep.FACE,
            "consecutive_face_ok": 0,
            "fingerprint_attempts": 0,
            "rfid_attempts": 0,
            "pin_attempts": 0
        }

        self.failed_attempts = {
        "face": 0,
        "fingerprint": 0, 
        "rfid": 0,
        "pin": 0,
        "total_today": 0
        }
        
        self.running = True
        self.face_thread = None
        
        logger.info("AI Enhanced Security System kh·ªüi t·∫°o th√†nh c√¥ng!")  # X√ìA ICON ‚úÖ
    
    def _init_hardware(self):
        """Kh·ªüi t·∫°o ph·∫ßn c·ª©ng"""
        try:
            logger.info("Kh·ªüi t·∫°o ph·∫ßn c·ª©ng...")  # X√ìA ICON üîß
            
            # Buzzer (v·ªõi mock n·∫øu c·∫ßn)
            try:
                self.buzzer = EnhancedBuzzerManager(self.config.BUZZER_GPIO)
            except:
                logger.warning("Buzzer mock mode")  # X√ìA ICON ‚ö†Ô∏è
                self.buzzer = type('MockBuzzer', (), {'beep': lambda x, y: None})()
            
            # Camera
            self.picam2 = Picamera2()
            if hasattr(self.picam2, 'configure'):
                self.picam2.configure(self.picam2.create_video_configuration(
                    main={"format": 'XRGB8888', "size": (self.config.CAMERA_WIDTH, self.config.CAMERA_HEIGHT)}
                ))
                self.picam2.start()
                time.sleep(2)
            
            # Relay (Door lock)
            self.relay = LED(self.config.RELAY_GPIO)
            self.relay.on()  # Locked by default
            
            # RFID
            i2c = busio.I2C(board.SCL, board.SDA)
            self.pn532 = PN532_I2C(i2c, debug=False)
            self.pn532.SAM_configuration()
            
            # Fingerprint sensor
            self.fingerprint = PyFingerprint('/dev/ttyUSB0', 57600, 0xFFFFFFFF, 0x00000000)
            if not self.fingerprint.verifyPassword():
                logger.warning("Fingerprint sensor simulation mode")  # X√ìA ICON ‚ö†Ô∏è
            
            logger.info("T·∫•t c·∫£ ph·∫ßn c·ª©ng ƒë√£ s·∫µn s√†ng")  # X√ìA ICON ‚úÖ
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o ph·∫ßn c·ª©ng: {e}")  # X√ìA ICON ‚ùå
            logger.info("Continuing in simulation mode...")  # X√ìA ICON üîÑ
    
    def _init_components(self):
        """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn AI v√† data"""
        try:
            logger.info("Kh·ªüi t·∫°o AI components...")  # X√ìA ICON üß†
            
            # Admin data manager
            self.admin_data = AdminDataManager(self.config.ADMIN_DATA_PATH)
            
            # AI Face Recognition - Enhanced
            self.face_recognizer = ImprovedFaceRecognition(
                models_path=self.config.MODELS_PATH,
                face_data_path=self.config.FACE_DATA_PATH,
                confidence_threshold=self.config.FACE_CONFIDENCE_THRESHOLD,
                recognition_threshold=self.config.FACE_RECOGNITION_THRESHOLD
            )
            
            logger.info("AI components ƒë√£ s·∫µn s√†ng")  # X√ìA ICON ‚úÖ
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o AI components: {e}")  # X√ìA ICON ‚ùå
            raise
    
    def _init_gui(self):
        """Kh·ªüi t·∫°o giao di·ªán"""
        try:
            logger.info("Kh·ªüi t·∫°o GUI...")  # X√ìA ICON üé®
            
            self.root = tk.Tk()
            self.gui = AIEnhancedSecurityGUI(self.root)
            self.gui.set_system_reference(self)
            
            # Admin GUI
            self.admin_gui = ImprovedAdminGUI(self.root, self)
            
            logger.info("GUI ƒë√£ s·∫µn s√†ng")  # X√ìA ICON ‚úÖ
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o GUI: {e}")  # X√ìA ICON ‚ùå
            raise
    
    def _force_admin_mode(self):
        """Ch·∫ø ƒë·ªô admin nhanh b·∫±ng ph√≠m * - FIXED FOCUS"""
        # FORCE FOCUS TR∆Ø·ªöC KHI M·ªû DIALOG
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(self.root, "ADMIN ACCESS",  # X√ìA ICON üîß
                                    "Nh·∫≠p m·∫≠t kh·∫©u admin:", True, self.buzzer)
        
        # FORCE FOCUS CHO DIALOG NGAY SAU KHI T·∫†O
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            self.gui.update_status("AI ADMIN MODE ACTIVATED", 'lightgreen')
            self.gui.update_detail("Admin authentication successful! Opening control panel...", Colors.SUCCESS)  # X√ìA ICON ‚úÖ
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
        elif password is not None:
            self.gui.update_status("ADMIN ACCESS DENIED", 'orange')
            self.gui.update_detail("Incorrect admin password!", Colors.ERROR)  # X√ìA ICON ‚ùå
            self.buzzer.beep("error")
    
    def start_authentication(self):
        """B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c AI"""
        logger.info("B·∫Øt ƒë·∫ßu quy tr√¨nh x√°c th·ª±c AI")  # X√ìA ICON üöÄ
        
        self.auth_state = {
            "step": AuthStep.FACE,
            "consecutive_face_ok": 0,
            "fingerprint_attempts": 0,
            "rfid_attempts": 0,
            "pin_attempts": 0
        }
        
        # X√ìA ICON TRONG C√ÅC STEP
        self.gui.update_step(1, "AI FACE RECOGNITION", "Neural network ƒëang ph√¢n t√≠ch...", Colors.PRIMARY)
        self.gui.update_status("AI ANALYZING FACES - PLEASE LOOK AT CAMERA", 'white')
        self.gui.update_detail("AI neural networks ƒëang qu√©t v√† ph√¢n t√≠ch khu√¥n m·∫∑t.\nNh√¨n th·∫≥ng v√†o camera v√† gi·ªØ nguy√™n v·ªã tr√≠.", Colors.PRIMARY)
        
        # Reset detection stats
        self.gui.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
        
        if self.face_thread and self.face_thread.is_alive():
            return
        
        self.face_thread = threading.Thread(target=self._ai_face_loop, daemon=True)
        self.face_thread.start()
    
    def _ai_face_loop(self):
        """AI Face recognition loop v·ªõi enhanced performance"""
        logger.info("B·∫Øt ƒë·∫ßu AI face recognition loop")  # X√ìA ICON üëÅÔ∏è
        consecutive_count = 0
        
        while self.running and self.auth_state["step"] == AuthStep.FACE:
            try:
                # Capture frame
                frame = self.picam2.capture_array()
                if frame is None:
                    continue
                
                # AI Processing
                annotated_frame, result = self.face_recognizer.process_frame(frame)
                
                # Update GUI v·ªõi k·∫øt qu·∫£ AI
                self.root.after(0, lambda: self.gui.update_camera(annotated_frame, result))
                
                if result.recognized:
                    consecutive_count += 1
                    self.auth_state["consecutive_face_ok"] = consecutive_count
                    
                    progress = consecutive_count / self.config.FACE_REQUIRED_CONSECUTIVE * 100
                    msg = f"AI confirmed ({consecutive_count}/{self.config.FACE_REQUIRED_CONSECUTIVE}) - {progress:.0f}%"
                    
                    # X√ìA ICON TRONG STEP UPDATE
                    self.root.after(0, lambda: self.gui.update_step(1, "AI RECOGNITION", msg, Colors.SUCCESS))
                    self.root.after(0, lambda: self.gui.update_detail(
                        f"Identity: {result.person_name}\n"
                        f"Verifying... {self.config.FACE_REQUIRED_CONSECUTIVE - consecutive_count} more confirmations needed\n"
                        f"Confidence: {result.confidence:.1f}/100", 
                        Colors.SUCCESS))
                    
                    if consecutive_count >= self.config.FACE_REQUIRED_CONSECUTIVE:
                        logger.info(f"AI Face recognition th√†nh c√¥ng: {result.person_name}")  # X√ìA ICON ‚úÖ
                        self.buzzer.beep("success")
                        self.root.after(0, lambda: self.gui.update_status(f"AI FACE VERIFIED: {result.person_name.upper()}!", 'lightgreen'))
                        self.root.after(1500, self._proceed_to_fingerprint)
                        break
                        
                elif result.detected:
                    # Ph√°t hi·ªán khu√¥n m·∫∑t nh∆∞ng kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
                    consecutive_count = 0
                    self.auth_state["consecutive_face_ok"] = 0
                    # X√ìA ICON TRONG UPDATE
                    self.root.after(0, lambda: self.gui.update_step(1, "AI DETECTION", "Unknown face detected", Colors.WARNING))
                    self.root.after(0, lambda: self.gui.update_detail(
                        "AI detected a face but it's not in the authorized database.\n"
                        f"Detection confidence: {result.confidence:.1f}\n"
                        "Please ensure you are registered in the system.", 
                        Colors.WARNING))
                else:
                    # Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t
                    consecutive_count = 0
                    self.auth_state["consecutive_face_ok"] = 0
                    # X√ìA ICON
                    self.root.after(0, lambda: self.gui.update_step(1, "AI SCANNING", "Searching for faces...", Colors.PRIMARY))
                
                time.sleep(self.config.FACE_DETECTION_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói AI face loop: {e}")  # X√ìA ICON ‚ùå
                self.root.after(0, lambda: self.gui.update_detail(f"AI Error: {str(e)}", Colors.ERROR))
                time.sleep(1)
    
    def _proceed_to_fingerprint(self):
        """Chuy·ªÉn sang b∆∞·ªõc v√¢n tay"""
        logger.info("Chuy·ªÉn sang x√°c th·ª±c v√¢n tay")  # X√ìA ICON üëÜ
        self.auth_state["step"] = AuthStep.FINGERPRINT
        self.auth_state["fingerprint_attempts"] = 0
        
        # X√ìA ICON TRONG UPDATE
        self.gui.update_step(2, "FINGERPRINT SCAN", "Place finger on sensor", Colors.WARNING)
        self.gui.update_status("WAITING FOR FINGERPRINT...", 'yellow')
        self.gui.update_detail("Please place your registered finger on the biometric sensor.\nSensor is ready for scanning.", Colors.WARNING)
        
        threading.Thread(target=self._fingerprint_loop, daemon=True).start()
    
    def _fingerprint_loop(self):
        """FIXED: Fingerprint loop v·ªõi Discord alerts"""
        while (self.auth_state["fingerprint_attempts"] < self.config.MAX_ATTEMPTS and 
            self.auth_state["step"] == AuthStep.FINGERPRINT):
            
            try:
                self.auth_state["fingerprint_attempts"] += 1
                attempt_msg = f"Attempt {self.auth_state['fingerprint_attempts']}/{self.config.MAX_ATTEMPTS}"
                
                self.root.after(0, lambda: self.gui.update_step(2, "FINGERPRINT", attempt_msg, Colors.WARNING))
                
                timeout = 10
                start_time = time.time()
                
                while time.time() - start_time < timeout:
                    if self.fingerprint.readImage():
                        self.fingerprint.convertImage(0x01)
                        result = self.fingerprint.searchTemplate()
                        
                        if result[0] != -1:
                            # SUCCESS
                            logger.info(f"Fingerprint verified: ID {result[0]}")
                            self.buzzer.beep("success")
                            self.root.after(0, lambda: self.gui.update_status("FINGERPRINT VERIFIED! PROCEEDING TO RFID...", 'lightgreen'))
                            self.root.after(1500, self._proceed_to_rfid)
                            return
                        else:
                            # FAILURE - Send Discord alert
                            details = f"Template not found | Sensor reading: {result[1]}"
                            logger.warning(f"Fingerprint not recognized: attempt {self.auth_state['fingerprint_attempts']}")
                            
                            # Send Discord alert
                            self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                            
                            self.buzzer.beep("error")
                            remaining = self.config.MAX_ATTEMPTS - self.auth_state["fingerprint_attempts"]
                            if remaining > 0:
                                self.root.after(0, lambda: self.gui.update_detail(
                                    f"Fingerprint not recognized!\n{remaining} attempts remaining\nPlease try again with a registered finger.", Colors.ERROR))
                                time.sleep(2)
                                break
                    time.sleep(0.1)
                
                if time.time() - start_time >= timeout:
                    # TIMEOUT - Send Discord alert
                    details = f"Scan timeout - no finger detected ({timeout}s)"
                    logger.warning(f"Fingerprint timeout: attempt {self.auth_state['fingerprint_attempts']}")
                    
                    # Send Discord alert
                    self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state["fingerprint_attempts"]
                    if remaining > 0:
                        self.root.after(0, lambda: self.gui.update_detail(
                            f"Scan timeout!\n{remaining} attempts remaining\nPlease place finger properly on sensor.", Colors.WARNING))
                        time.sleep(1)
                    
            except Exception as e:
                # HARDWARE ERROR - Send Discord alert
                details = f"Hardware error: {str(e)}"
                logger.error(f"Fingerprint error: {e}")
                
                # Send Discord alert
                self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"Sensor error: {str(e)}", Colors.ERROR))
                time.sleep(1)
        
        # OUT OF ATTEMPTS
        if self.auth_state["fingerprint_attempts"] >= self.config.MAX_ATTEMPTS:
            details = f"Maximum fingerprint attempts exceeded ({self.config.MAX_ATTEMPTS})"
            logger.critical(f"Fingerprint max attempts exceeded: {self.auth_state['fingerprint_attempts']}")
            
            # Send critical Discord alert
            self._send_discord_failure_alert("fingerprint", self.auth_state['fingerprint_attempts'], details)
        
        logger.warning("Fingerprint: Maximum attempts exceeded")
        self.root.after(0, lambda: self.gui.update_status("FINGERPRINT FAILED - RESTARTING AUTHENTICATION", 'orange'))
        self.buzzer.beep("error")
        self.root.after(3000, self.start_authentication)
    
    def _proceed_to_rfid(self):
        """Chuy·ªÉn sang b∆∞·ªõc RFID"""
        logger.info("Chuy·ªÉn sang x√°c th·ª±c RFID")  # X√ìA ICON üì±
        self.auth_state["step"] = AuthStep.RFID
        self.auth_state["rfid_attempts"] = 0
        
        # X√ìA ICON
        self.gui.update_step(3, "RFID SCAN", "Present card to reader", Colors.ACCENT)
        self.gui.update_status("WAITING FOR RFID CARD...", 'lightblue')
        self.gui.update_detail("Please present your RFID card near the reader.\nReader is active and scanning for cards.", Colors.ACCENT)
        
        threading.Thread(target=self._rfid_loop, daemon=True).start()
    
    def _rfid_loop(self):
        """RFID verification loop v·ªõi FIXED Discord alerts"""
        while (self.auth_state["rfid_attempts"] < self.config.MAX_ATTEMPTS and 
            self.auth_state["step"] == AuthStep.RFID):
            
            try:
                self.auth_state["rfid_attempts"] += 1
                attempt_msg = f"Attempt {self.auth_state['rfid_attempts']}/{self.config.MAX_ATTEMPTS}"
                
                # Update GUI
                self.root.after(0, lambda: self.gui.update_step(3, "RFID SCAN", attempt_msg, Colors.ACCENT))
                self.root.after(0, lambda: self.gui.update_detail(
                    f"Scanning for RFID card... (Attempt {self.auth_state['rfid_attempts']}/{self.config.MAX_ATTEMPTS})\n"
                    "Hold card within 2-5cm of reader.", 
                    Colors.ACCENT))
                
                # Scan for RFID card
                uid = self.pn532.read_passive_target(timeout=8)
                
                if uid:
                    uid_list = list(uid)
                    logger.info(f"RFID detected: {uid_list}")
                    
                    # Check admin card
                    if uid_list == self.config.ADMIN_UID:
                        self.root.after(0, lambda: self._admin_authentication())
                        return
                    
                    # Check regular cards
                    valid_uids = self.admin_data.get_rfid_uids()
                    if uid_list in valid_uids:
                        # SUCCESS
                        logger.info(f"RFID verified: {uid_list}")
                        self.buzzer.beep("success")
                        self.root.after(0, lambda: self.gui.update_status("RFID VERIFIED! ENTER PASSCODE...", 'lightgreen'))
                        self.root.after(0, lambda: self.gui.update_detail(f"RFID card authentication successful!\nCard UID: {uid_list}\nProceeding to final passcode step.", Colors.SUCCESS))
                        self.root.after(1500, self._proceed_to_passcode)
                        return
                    else:
                        # FAILURE - Unauthorized card - SEND DISCORD ALERT
                        details = f"Unauthorized card | UID: {uid_list} | Not in database"
                        logger.warning(f"RFID unauthorized: {uid_list}")
                        
                        # Send Discord alert
                        self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                        
                        self.buzzer.beep("error")
                        remaining = self.config.MAX_ATTEMPTS - self.auth_state["rfid_attempts"]
                        
                        error_msg = f"‚ùå UNAUTHORIZED RFID CARD!\n"
                        error_msg += f"üì± Detected UID: {uid_list}\n"
                        error_msg += f"‚ö†Ô∏è Card not registered in system\n"
                        error_msg += f"üîÑ {remaining} attempts remaining" if remaining > 0 else "üö´ No attempts remaining"
                        
                        self.root.after(0, lambda: self.gui.update_detail(error_msg, Colors.ERROR))
                        
                        if remaining > 0:
                            time.sleep(3)
                        else:
                            break
                else:
                    # FAILURE - No card detected - SEND DISCORD ALERT
                    details = f"No RFID card detected within timeout ({8}s)"
                    logger.warning(f"RFID timeout: attempt {self.auth_state['rfid_attempts']}")
                    
                    # Send Discord alert  
                    self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                    
                    remaining = self.config.MAX_ATTEMPTS - self.auth_state["rfid_attempts"]
                    
                    timeout_msg = f"‚è∞ NO CARD DETECTED!\n"
                    timeout_msg += f"üïê Scan timeout after {8} seconds\n"
                    timeout_msg += f"üì± Please present card closer to reader\n"
                    timeout_msg += f"üîÑ {remaining} attempts remaining" if remaining > 0 else "üö´ No attempts remaining"
                    
                    self.root.after(0, lambda: self.gui.update_detail(timeout_msg, Colors.WARNING))
                    
                    if remaining > 0:
                        time.sleep(2)
                    else:
                        break
                    
            except Exception as e:
                # HARDWARE ERROR - SEND DISCORD ALERT
                details = f"RFID hardware error: {str(e)}"
                logger.error(f"RFID error: {e}")
                
                # Send Discord alert
                self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
                
                self.root.after(0, lambda: self.gui.update_detail(f"üîß RFID READER ERROR!\n{str(e)}\nPlease check hardware connection", Colors.ERROR))
                time.sleep(2)
        
        # OUT OF ATTEMPTS - SEND FINAL DISCORD ALERT
        if self.auth_state["rfid_attempts"] >= self.config.MAX_ATTEMPTS:
            details = f"Maximum RFID attempts exceeded ({self.config.MAX_ATTEMPTS}) | Possible intrusion attempt"
            logger.critical(f"RFID max attempts exceeded: {self.auth_state['rfid_attempts']}")
            
            # Send critical Discord alert
            self._send_discord_failure_alert("rfid", self.auth_state['rfid_attempts'], details)
        
        logger.warning("RFID: Maximum attempts exceeded - Restarting authentication")
        self.root.after(0, lambda: self.gui.update_status("RFID FAILED - RESTARTING AUTHENTICATION", 'orange'))
        self.root.after(0, lambda: self.gui.update_detail(
            "‚ùå RFID AUTHENTICATION FAILED!\n"
            f"üö´ All {self.config.MAX_ATTEMPTS} attempts exhausted\n"
            "üîÑ Restarting full authentication process...\n"
            "üõ°Ô∏è Security event logged", Colors.ERROR))
        self.buzzer.beep("error")
        self.root.after(4000, self.start_authentication)
    
    def _proceed_to_passcode(self):
        """Chuy·ªÉn sang b∆∞·ªõc cu·ªëi - passcode v·ªõi enhanced security"""
        logger.info("Proceeding to final passcode authentication step")
        self.auth_state["step"] = AuthStep.PASSCODE
        self.auth_state["pin_attempts"] = 0
        
        # Discord notification v·ªÅ b∆∞·ªõc cu·ªëi
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("üîë **FINAL AUTHENTICATION STEP**\nProceeding to passcode entry\nUser has passed 3/4 security layers ‚úÖ",),
                daemon=True
            ).start()
        
        self.gui.update_step(4, "FINAL PASSCODE", "Enter system passcode", Colors.SUCCESS)
        self.gui.update_status("ENTER FINAL PASSCODE...", 'lightgreen')
        self.gui.update_detail(
            "üîë FINAL AUTHENTICATION STEP\n"
            "‚úÖ Face Recognition: PASSED\n"
            "‚úÖ Fingerprint: PASSED\n" 
            "‚úÖ RFID Card: PASSED\n"
            "üîÑ Passcode: PENDING\n\n"
            "Enter your numeric passcode to complete authentication.", 
            Colors.SUCCESS)
        
        self._request_passcode()

    def _request_passcode(self):
        """FIXED: Passcode input v·ªõi Discord alerts"""
        
        # Check max attempts
        if self.auth_state["pin_attempts"] >= self.config.MAX_ATTEMPTS:
            # Send final critical alert
            details = f"Maximum passcode attempts exceeded ({self.config.MAX_ATTEMPTS}) | Final authentication step failed"
            logger.critical(f"Passcode max attempts exceeded: {self.auth_state['pin_attempts']}")
            
            # Send Discord alert
            self._send_discord_failure_alert("passcode", self.auth_state['pin_attempts'], details)
            
            logger.warning("Passcode: Maximum attempts exceeded")
            self.gui.update_status("PASSCODE FAILED - RESTARTING", 'orange')
            self.gui.update_detail(
                "üö´ PASSCODE AUTHENTICATION FAILED!\n"
                f"‚ùå All {self.config.MAX_ATTEMPTS} attempts exhausted\n"
                "‚ö†Ô∏è User passed all other security layers\n"
                "üîÑ Restarting full authentication process...\n"
                "üõ°Ô∏è Critical security event logged", Colors.ERROR)
            self.buzzer.beep("error")
            self.root.after(4000, self.start_authentication)
            return
        
        # Increment attempt counter
        self.auth_state["pin_attempts"] += 1
        attempt_msg = f"Attempt {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS}"
        
        # Update GUI
        self.gui.update_step(4, "PASSCODE", attempt_msg, Colors.SUCCESS)
        self.gui.update_detail(
            f"üîë Enter system passcode... (Attempt {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS})\n"
            "‚úÖ Previous steps completed successfully\n"
            "üéØ Use the numeric keypad to enter your code\n"
            "‚ö†Ô∏è This is the final authentication step", Colors.SUCCESS)
        
        # FORCE FOCUS
        self.root.focus_force()
        self.root.update()
        
        # Show dialog
        dialog = EnhancedNumpadDialog(
            self.root, 
            "üîë FINAL AUTHENTICATION",
            f"Enter system passcode (Attempt {self.auth_state['pin_attempts']}/{self.config.MAX_ATTEMPTS}):", 
            True, 
            self.buzzer
        )
        
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        # Get input
        entered_pin = dialog.show()
        
        if entered_pin is None:
            # User cancelled
            logger.info("Passcode entry cancelled by user")
            self.gui.update_detail("‚ùå Passcode entry cancelled\nüîÑ Restarting authentication...", Colors.WARNING)
            self.buzzer.beep("click")
            self.root.after(2000, self.start_authentication)
            return
        
        # Validate passcode
        correct_passcode = self.admin_data.get_passcode()
        
        if entered_pin == correct_passcode:
            # SUCCESS
            logger.info("‚úÖ Passcode verified - FULL AUTHENTICATION COMPLETE!")
            self.gui.update_status("AUTHENTICATION COMPLETE! UNLOCKING DOOR...", 'lightgreen')
            self.gui.update_detail(
                "üéâ AUTHENTICATION SUCCESSFUL!\n"
                "‚úÖ All 4 security layers verified:\n"
                "  üë§ Face Recognition: PASSED\n"
                "  üëÜ Fingerprint: PASSED\n"
                "  üì± RFID Card: PASSED\n"
                "  üîë Passcode: PASSED\n\n"
                "üîì Door unlocking now...", Colors.SUCCESS)
            self.buzzer.beep("success")
            
            # Send success notification to Discord
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üîì **AUTHENTICATION COMPLETED** - All 4 layers verified successfully!",),
                    daemon=True
                ).start()
            
            self._unlock_door()
            
        else:
            # FAILURE - Wrong passcode - SEND DISCORD ALERT
            remaining = self.config.MAX_ATTEMPTS - self.auth_state["pin_attempts"]
            
            details = f"Incorrect passcode | Expected length: {len(correct_passcode)}, Got: {len(entered_pin)} | User reached final step"
            logger.warning(f"Passcode incorrect: attempt {self.auth_state['pin_attempts']}")
            
            # Send Discord alert
            self._send_discord_failure_alert("passcode", self.auth_state['pin_attempts'], details)
            
            self.buzzer.beep("error")
            
            if remaining > 0:
                # Still have attempts
                error_msg = f"‚ùå INCORRECT PASSCODE!\n"
                error_msg += f"üî¢ Passcode does not match system records\n"
                error_msg += f"üîÑ {remaining} attempts remaining\n"
                error_msg += f"‚ö†Ô∏è Please verify your passcode and try again\n"
                error_msg += f"üõ°Ô∏è This attempt has been logged"
                
                self.gui.update_detail(error_msg, Colors.ERROR)
                self.root.after(2500, self._request_passcode)
            else:
                # No attempts left
                final_error_msg = f"üö´ PASSCODE AUTHENTICATION FAILED!\n"
                final_error_msg += f"‚ùå All {self.config.MAX_ATTEMPTS} attempts exhausted\n"
                final_error_msg += f"‚ö†Ô∏è User completed 3/4 security layers but failed final step\n"
                final_error_msg += f"üîÑ Restarting full authentication process...\n"
                final_error_msg += f"üõ°Ô∏è Critical security breach logged"
                
                self.gui.update_status("PASSCODE FAILED - RESTARTING AUTHENTICATION", 'orange')
                self.gui.update_detail(final_error_msg, Colors.ERROR)
                self.root.after(4000, self.start_authentication)

    def _admin_authentication(self):
        """Enhanced admin authentication via RFID v·ªõi Discord alerts"""
        # Discord notification v·ªÅ admin access attempt
        if self.discord_bot:
            threading.Thread(
                target=self._send_discord_notification,
                args=("üîß **ADMIN RFID DETECTED**\nAdmin card scanned - requesting password authentication",),
                daemon=True
            ).start()
        
        # FORCE FOCUS BEFORE DIALOG
        self.root.focus_force()
        self.root.update()
        
        dialog = EnhancedNumpadDialog(
            self.root, 
            "üîß ADMIN RFID ACCESS",
            "Admin card detected. Enter admin password:", 
            True, 
            self.buzzer
        )
        
        # FORCE FOCUS FOR DIALOG
        if hasattr(dialog, 'dialog'):
            dialog.dialog.focus_force()
            dialog.dialog.grab_set()
            dialog.dialog.lift()
        
        password = dialog.show()
        
        if password == self.config.ADMIN_PASS:
            # Admin authentication successful
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(f"‚úÖ **ADMIN ACCESS GRANTED**\nAdmin authenticated successfully via RFID + password\nOpening admin control panel...",),
                    daemon=True
                ).start()
            
            logger.info("‚úÖ Admin RFID authentication successful")
            self.gui.update_status("ADMIN RFID VERIFIED! OPENING CONTROL PANEL", 'lightgreen')
            self.gui.update_detail(
                "üîß ADMIN AUTHENTICATION SUCCESSFUL!\n"
                "‚úÖ Admin RFID card verified\n"
                "‚úÖ Admin password verified\n"
                "üéõÔ∏è Opening admin control panel...", Colors.SUCCESS)
            self.buzzer.beep("success")
            self.admin_gui.show_admin_panel()
            
        elif password is not None:
            # Wrong admin password
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("‚ùå **ADMIN ACCESS DENIED**\nCorrect admin RFID but incorrect password\n‚ö†Ô∏è Possible unauthorized access attempt",),
                    daemon=True
                ).start()
            
            logger.warning("‚ùå Admin RFID detected but wrong password")
            self.gui.update_status("ADMIN PASSWORD INCORRECT", 'orange')
            self.gui.update_detail(
                "‚ùå ADMIN ACCESS DENIED!\n"
                "‚úÖ Admin RFID verified\n"
                "‚ùå Admin password incorrect\n"
                "‚ö†Ô∏è Security violation logged\n"
                "üîÑ Returning to authentication...", Colors.ERROR)
            self.buzzer.beep("error")
            time.sleep(3)
            self.start_authentication()
        else:
            # Admin cancelled
            if self.discord_bot:
                threading.Thread(
                    target=self._send_discord_notification,
                    args=("üîÑ **ADMIN ACCESS CANCELLED**\nAdmin cancelled password entry\nReturning to normal authentication",),
                    daemon=True
                ).start()
            
            logger.info("Admin access cancelled")
            self.gui.update_detail("üîÑ Admin access cancelled\nReturning to authentication...", Colors.WARNING)
            self.start_authentication()
    

    def _send_discord_failure_alert(self, step, attempts, details=""):
        """FIXED: Helper method ƒë·ªÉ g·ª≠i Discord failure alert"""
        def send_alert():
            try:
                if self.discord_bot and self.discord_bot.bot:
                    # T·∫°o event loop m·ªõi
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # Log ƒë·ªÉ debug
                    logger.info(f"Sending Discord alert: {step} - {attempts} attempts")
                    
                    # G·ª≠i alert
                    loop.run_until_complete(
                        self.discord_bot.send_authentication_failure_alert(step, attempts, details)
                    )
                    loop.close()
                    
                    logger.info(f"Discord alert sent successfully: {step}")
                    
                else:
                    logger.warning("Discord bot not available for alert")
                    
            except Exception as e:
                logger.error(f"Discord alert error: {e}")
                import traceback
                traceback.print_exc()
        
        # Ch·∫°y trong thread ri√™ng
        threading.Thread(target=send_alert, daemon=True).start()

    def _send_discord_success(self, step, details=""):
        """Enhanced helper function ƒë·ªÉ g·ª≠i Discord success notification"""
        try:
            if self.discord_bot:
                # Create event loop for this thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Record the success
                loop.run_until_complete(
                    self.discord_bot.record_authentication_success(step)
                )
                
                # Send additional success notification with details if provided
                if details:
                    success_message = f"‚úÖ **{step.upper()} AUTHENTICATION SUCCESS**\n{details}"
                    loop.run_until_complete(
                        self.discord_bot.send_security_notification(success_message, "SUCCESS")
                    )
                
                loop.close()
                logger.info(f"Discord success notification sent for {step}")
                
        except Exception as e:
            logger.error(f"Discord success notification error for {step}: {e}")

    def _send_discord_notification(self, message):
        """Enhanced helper function ƒë·ªÉ g·ª≠i Discord notification t·ª´ sync context"""
        try:
            if self.discord_bot and self.discord_bot.bot:
                # Create event loop for this thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Send notification
                loop.run_until_complete(
                    self.discord_bot.send_security_notification(message, "INFO")
                )
                loop.close()
                
                logger.info(f"Discord notification sent: {message[:50]}...")
                
        except Exception as e:
            logger.error(f"Discord notification error: {e}")

    def _unlock_door(self):
        """Enhanced door unlock v·ªõi Discord notifications"""
        try:
            logger.info(f"üîì Unlocking door for {self.config.LOCK_OPEN_DURATION} seconds")
            
            # Final Discord success notification
            if self.discord_bot:
                unlock_message = f"üîì **DOOR UNLOCKED SUCCESSFULLY**\n"
                unlock_message += f"üéâ 4-layer authentication completed:\n"
                unlock_message += f"  ‚úÖ Face Recognition: PASSED\n"
                unlock_message += f"  ‚úÖ Fingerprint: PASSED\n"
                unlock_message += f"  ‚úÖ RFID Card: PASSED\n"
                unlock_message += f"  ‚úÖ Passcode: PASSED\n\n"
                unlock_message += f"üïê Door will auto-lock in {self.config.LOCK_OPEN_DURATION} seconds\n"
                unlock_message += f"üìÖ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(unlock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_step(4, "COMPLETED", "DOOR UNLOCKED", Colors.SUCCESS)
            self.gui.update_status(f"DOOR OPEN - AUTO LOCK IN {self.config.LOCK_OPEN_DURATION}S", 'lightgreen')
            
            # Unlock the door
            self.relay.off()  # Unlock door
            self.buzzer.beep("success")
            
            # Countdown with visual effects
            for i in range(self.config.LOCK_OPEN_DURATION, 0, -1):
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000, 
                            lambda t=i: self.gui.update_detail(
                                f"üîì DOOR IS OPEN\n"
                                f"‚è∞ Auto lock in {t} seconds\n"
                                f"üö∂ Please enter and close the door\n"
                                f"üõ°Ô∏è All security systems active", Colors.SUCCESS))
                self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                            lambda t=i: self.gui.update_status(f"DOOR OPEN - LOCK IN {t}S", 'lightgreen'))
                
                # Beep countdown for last 3 seconds
                if i <= 3:
                    self.root.after((self.config.LOCK_OPEN_DURATION - i) * 1000,
                                lambda: self.buzzer.beep("click"))
            
            # Schedule auto-lock
            self.root.after(self.config.LOCK_OPEN_DURATION * 1000, self._lock_door)
            
        except Exception as e:
            logger.error(f"Door unlock error: {e}")
            
            # Error notification to Discord
            if self.discord_bot:
                error_message = f"‚ùå **DOOR UNLOCK ERROR**\nHardware error during unlock: {str(e)}\n‚ö†Ô∏è Manual intervention may be required"
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(error_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üîß DOOR UNLOCK ERROR!\n{str(e)}\nPlease check hardware", Colors.ERROR)
            self.buzzer.beep("error")

    def _lock_door(self):
        """Enhanced door lock v·ªõi Discord notifications"""
        try:
            logger.info("üîí Locking door and resetting system")
            
            # Lock the door
            self.relay.on()  # Lock door
            
            # Discord notification v·ªÅ auto-lock
            if self.discord_bot:
                lock_message = f"üîí **DOOR AUTO-LOCKED**\n"
                lock_message += f"‚úÖ Door secured after {self.config.LOCK_OPEN_DURATION} seconds\n"
                lock_message += f"üîÑ System ready for next user\n"
                lock_message += f"üõ°Ô∏è All security layers reset\n"
                lock_message += f"üìÖ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(lock_message,),
                    daemon=True
                ).start()
            
            self.gui.update_status("DOOR LOCKED - SYSTEM READY FOR NEXT USER", 'white')
            self.gui.update_detail(
                "üîí DOOR LOCKED AUTOMATICALLY\n"
                "‚úÖ Security system reset\n"
                "üîÑ Ready for next authentication cycle\n"
                "üõ°Ô∏è All sensors active and monitoring", Colors.PRIMARY)
            self.buzzer.beep("click")
            
            # Reset detection stats
            self.gui.detection_stats = {"total": 0, "recognized": 0, "unknown": 0}
            
            # Reset authentication state completely
            self.auth_state = {
                "step": AuthStep.FACE,
                "consecutive_face_ok": 0,
                "fingerprint_attempts": 0,
                "rfid_attempts": 0,
                "pin_attempts": 0
            }
            
            # Start new authentication cycle
            self.root.after(3000, self.start_authentication)
            
        except Exception as e:
            logger.error(f"Door lock error: {e}")
            
            # Critical error notification to Discord
            if self.discord_bot:
                critical_message = f"üö® **CRITICAL: DOOR LOCK ERROR**\n"
                critical_message += f"‚ùå Failed to lock door: {str(e)}\n"
                critical_message += f"‚ö†Ô∏è SECURITY BREACH RISK\n"
                critical_message += f"üîß IMMEDIATE MANUAL INTERVENTION REQUIRED"
                
                threading.Thread(
                    target=self._send_discord_notification,
                    args=(critical_message,),
                    daemon=True
                ).start()
            
            self.gui.update_detail(f"üö® CRITICAL: DOOR LOCK ERROR!\n{str(e)}\n‚ö†Ô∏è Manual intervention required", Colors.ERROR)
            self.buzzer.beep("error")

    
    def run(self):
        """Ch·∫°y h·ªá th·ªëng ch√≠nh"""
        try:
            logger.info("Starting AI Enhanced Security System")  # X√ìA ICON üöÄ

            if self.discord_bot:
                logger.info("ƒêang kh·ªüi ƒë·ªông Discord bot...")
            if self.discord_bot.start_bot():
                logger.info("‚úÖ Discord bot ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!")
            else:
                logger.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông Discord bot")

            # Startup effects - X√ìA ICON
            self.gui.update_status("AI ENHANCED SECURITY SYSTEM v2.1 - READY!", 'lightgreen')
            self.gui.update_detail("AI neural networks loaded and ready\n"
                                 "4-layer security system active\n"
                                 "Discord bot integration enabled\n"  # TH√äM D√íNG N√ÄY
                                 "Enhanced performance for Raspberry Pi 5", Colors.SUCCESS)
            
            self.buzzer.beep("startup")
            
            # Show system info - X√ìA ICON
            face_info = self.face_recognizer.get_database_info()
            self.gui.update_detail(f"System Status:\n"
                                 f"Registered faces: {face_info['total_people']}\n"
                                 f"Fingerprints: {len(self.admin_data.get_fingerprint_ids())}\n"
                                 f"RFID cards: {len(self.admin_data.get_rfid_uids())}\n"
                                 f"AI Status: Ready", Colors.SUCCESS)
            
            # Start authentication after 3 seconds
            self.root.after(3000, self.start_authentication)
            
            # Setup cleanup
            self.root.protocol("WM_DELETE_WINDOW", self.cleanup)
            
            # Start main loop
            self.root.mainloop()
            
        except KeyboardInterrupt:
            logger.info("System stopped by user request")
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Cleanup t√†i nguy√™n khi tho√°t"""
        logger.info("Cleaning up system resources...")
        self.running = False
        
        try:
            # TH√äM CLEANUP DISCORD BOT
            if hasattr(self, 'discord_bot') and self.discord_bot:
                self.discord_bot.stop_bot()
                logger.info("Discord bot stopped")
            
            if hasattr(self, 'picam2'):
                self.picam2.stop()
                logger.info("Camera stopped")
                
            if hasattr(self, 'relay'):
                self.relay.on()  # Ensure door is locked
                logger.info("Door locked")
                
            if hasattr(self, 'buzzer') and hasattr(self.buzzer, 'buzzer') and self.buzzer.buzzer:
                self.buzzer.buzzer.off()
                logger.info("Buzzer stopped")
                
        except Exception as e:
            logger.error(f"Cleanup error: {e}")
        
        if hasattr(self, 'root'):
            self.root.quit()
        
        logger.info("Cleanup completed")
    
    

# ==== MAIN EXECUTION ====
if __name__ == "__main__":
    try:
        print("=" * 100)
        print("HE THONG KHOA BAO MAT 4 LOP - AI ENHANCED VERSION 2.1")  # X√ìA ICON
        print("   T√°c gi·∫£: Khoi - Lu·∫≠n √°n t·ªët nghi·ªáp")
        print("   Ng√†y: 2025-01-16 - FIXED FOCUS & NO ICONS")
        print("=" * 100)
        print()
        print("CAI TIEN AI DAC BIET:")  # X√ìA ICON üéØ
        print("   OpenCV DNN Face Detection v·ªõi MobileNet SSD")  # X√ìA ICON ü§ñ
        print("   LBPH Face Recognition v·ªõi ƒë·ªô ch√≠nh x√°c cao")  # X√ìA ICON üß†
        print("   FPS cao 30+ v·ªõi real-time visual feedback")  # X√ìA ICON üìπ
        print("   Khung bounding box m√†u s·∫Øc (xanh/ƒë·ªè)")  # X√ìA ICON üé®
        print("   C·ª≠a s·ªï camera l·ªõn h∆°n 60% so v·ªõi phi√™n b·∫£n c≈©")  # X√ìA ICON üì±
        print("   T·ªëi ∆∞u ho√†n to√†n cho Raspberry Pi 5")  # X√ìA ICON ‚ö°
        print("   Enhanced buzzer v·ªõi nhi·ªÅu √¢m thanh")  # X√ìA ICON üéµ
        print("   Real-time statistics v√† monitoring")  # X√ìA ICON üìä
        print("   FIXED: Focus issues v·ªõi dialog")  # X√ìA ICON üîß
        print("   REMOVED: T·∫•t c·∫£ icon kh·ªèi giao di·ªán")  # X√ìA ICON ‚ùå
        print()
        print("4 LOP BAO MAT TUAN TU:")  # X√ìA ICON üîê
        print("   1. AI Face Recognition (OpenCV DNN)")  # X√ìA ICON ü§ñ
        print("   2. Fingerprint Biometric (AS608)")  # X√ìA ICON üëÜ
        print("   3. RFID/NFC Card (PN532)")  # X√ìA ICON üì±
        print("   4. Numeric Passcode (Keyboard)")  # X√ìA ICON üîë
        print()
        print("DIEU KHIEN NANG CAO:")  # X√ìA ICON üéÆ
        print("   * ho·∫∑c KP_* = Admin mode")
        print("   # ho·∫∑c KP_+ = Start authentication")
        print("   ESC = Exit system")
        print("   F11 = Toggle fullscreen")
        print("   Up/Down/Left/Right = Navigate dialogs")  # X√ìA ICON ‚Üë‚Üì‚Üê‚Üí
        print("   Enter/Space = Confirm")
        print("   Period (.) = Cancel/Exit dialogs")  # X√ìA ICON
        print("   1-9 = Quick select")
        print()
        print("KIEM TRA PHAN CUNG:")  # X√ìA ICON üîç
        
        hardware_components = [
            ("CAM", "Raspberry Pi Camera Module 2"),  # X√ìA ICON üìπ
            ("FP", "Fingerprint Sensor AS608 (USB/UART)"),  # X√ìA ICON üëÜ
            ("RFID", "RFID Reader PN532 (I2C)"),  # X√ìA ICON üì±
            ("RELAY", "Solenoid Lock + 4-channel Relay"),  # X√ìA ICON üîå
            ("BUZZ", "Enhanced Buzzer (GPIO PWM)"),  # X√ìA ICON üîä
            ("KBD", "USB Numeric Keypad"),  # X√ìA ICON ‚å®Ô∏è
            ("DATA", "AI Model Storage"),  # X√ìA ICON üíæ
            ("AI", "Face Database System")  # X√ìA ICON üß†
        ]
        
        for prefix, component in hardware_components:
            print(f"   {prefix}: {component}")
            time.sleep(0.2)
        
        print()
        print("KHOI TAO HE THONG ...")  # X√ìA ICON üöÄ
        print("=" * 100)
        
        # Initialize and run system
        system = AIEnhancedSecuritySystem()
        
        print()
        print("TAT CA THANH PHAN DA SAN SANG!")  # X√ìA ICON ‚úÖ
        print("ƒêang kh·ªüi ƒë·ªông giao di·ªán AI...")  # X√ìA ICON üé®
        print("K·∫øt n·ªëi hardware th√†nh c√¥ng!")  # X√ìA ICON üì°
        print("  neural networks ƒë√£ ƒë∆∞·ª£c load!")  # X√ìA ICON ü§ñ
        print("=" * 100)
        print("HE THONG SAN SANG! BAT DAU SU DUNG...")  # X√ìA ICON üéØ
        print("=" * 100)
        
        system.run()
        
    except Exception as e:
        print()
        print("=" * 100)
        print(f"LOI KHOI DONG NGHIEM TRONG: {e}")  # X√ìA ICON ‚ùå
        print()
        print("DANH SACH KIEM TRA KHAC PHUC:")  # X√ìA ICON üîß
        
        troubleshooting_items = [
            ("HW", "Ki·ªÉm tra k·∫øt n·ªëi ph·∫ßn c·ª©ng v√† ngu·ªìn ƒëi·ªán"),  # X√ìA ICON üîå
            ("AI", "ƒê·∫£m b·∫£o c√°c file models AI t·ªìn t·∫°i"),  # X√ìA ICON üìÅ
            ("GPIO", "Ki·ªÉm tra quy·ªÅn truy c·∫≠p GPIO v√† USB"),  # X√ìA ICON üîë
            ("LIB", "C√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß th∆∞ vi·ªán Python"),  # X√ìA ICON üì¶
            ("BUZZ", "C·∫•u h√¨nh ƒë√∫ng GPIO cho Buzzer"),  # X√ìA ICON üîä
            ("CAM", "Camera permissions v√† drivers"),  # X√ìA ICON üìπ
            ("DISK", "Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng"),  # X√ìA ICON üíæ
            ("I2C", "K·∫øt n·ªëi I2C v√† UART ho·∫°t ƒë·ªông"),  # X√ìA ICON üåê
            ("MODEL", "Download AI models (ch·∫°y download_models.py)"),  # X√ìA ICON ü§ñ
            ("LOG", "Ki·ªÉm tra log file ƒë·ªÉ xem chi ti·∫øt l·ªói")  # X√ìA ICON üìù
        ]
        
        for prefix, item in troubleshooting_items:
            print(f"   {prefix}: {item}")
        
        print()
        print("HUONG DAN KHAC PHUC:")  # X√ìA ICON üìû
        print("   1. Ch·∫°y: python3 download_models.py")
        print("   2. Ki·ªÉm tra: ls -la /home/khoi/Desktop/KHOI_LUANAN/models/")
        print("   3. Test camera: python3 -c 'from picamera2 import Picamera2; print(\"OK\")'")
        print("   4. Test OpenCV: python3 -c 'import cv2; print(cv2.__version__)'")
        print("   5. Ki·ªÉm tra log: tail -f /home/khoi/Desktop/KHOI_LUANAN/system.log")
        print()
        print("=" * 100)
        
        logger.error(f"System startup failed: {e}")
        sys.exit(1)
